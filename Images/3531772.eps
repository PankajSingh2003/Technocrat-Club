%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: Business people - 2 - up-01.eps
%%Creator: Adobe Illustrator(R) 24.0
%%For: Ayib Makmun B9
%%CreationDate: 2/24/2020
%%BoundingBox: 0 0 750 500
%%HiResBoundingBox: 0 0 750 500
%%CropBox: 0 0 750 500
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 24.0.1%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 24.0.1 x341 R agm 4.7767 ct 5.4352%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                               
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c148 79.164050, 2019/10/01-18:03:16        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">Business people - 2</rdf:li>
            </rdf:Alt>
         </dc:title>
         <xmp:MetadataDate>2020-02-24T20:57:30+07:00</xmp:MetadataDate>
         <xmp:ModifyDate>2020-02-24T20:57:30+07:00</xmp:ModifyDate>
         <xmp:CreateDate>2020-02-24T20:57:30+07:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator 24.0 (Windows)</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>76</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+ICQElDQ19QUk9GSUxFAAEBAAACMEFEQkUCEAAAbW50clJHQiBYWVogB88ABgAD&#xA;AAAAAAAAYWNzcEFQUEwAAAAAbm9uZQAAAAAAAAAAAAAAAAAAAAAAAPbWAAEAAAAA0y1BREJFAAAA&#xA;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKY3BydAAAAPwAAAAy&#xA;ZGVzYwAAATAAAABrd3RwdAAAAZwAAAAUYmtwdAAAAbAAAAAUclRSQwAAAcQAAAAOZ1RSQwAAAdQA&#xA;AAAOYlRSQwAAAeQAAAAOclhZWgAAAfQAAAAUZ1hZWgAAAggAAAAUYlhZWgAAAhwAAAAUdGV4dAAA&#xA;AABDb3B5cmlnaHQgMTk5OSBBZG9iZSBTeXN0ZW1zIEluY29ycG9yYXRlZAAAAGRlc2MAAAAAAAAA&#xA;EUFkb2JlIFJHQiAoMTk5OCkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&#xA;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFhZWiAAAAAAAADzUQABAAAA&#xA;ARbMWFlaIAAAAAAAAAAAAAAAAAAAAABjdXJ2AAAAAAAAAAECMwAAY3VydgAAAAAAAAABAjMAAGN1&#xA;cnYAAAAAAAAAAQIzAABYWVogAAAAAAAAnBgAAE+lAAAE/FhZWiAAAAAAAAA0jQAAoCwAAA+VWFla&#xA;IAAAAAAAACYxAAAQLwAAvpz/7gAOQWRvYmUAZMAAAAAB/9sAhAAGBAQEBQQGBQUGCQYFBgkLCAYG&#xA;CAsMCgoLCgoMEAwMDAwMDBAMDg8QDw4MExMUFBMTHBsbGxwfHx8fHx8fHx8fAQcHBw0MDRgQEBga&#xA;FREVGh8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx//wAAR&#xA;CABMAQADAREAAhEBAxEB/8QBogAAAAcBAQEBAQAAAAAAAAAABAUDAgYBAAcICQoLAQACAgMBAQEB&#xA;AQAAAAAAAAABAAIDBAUGBwgJCgsQAAIBAwMCBAIGBwMEAgYCcwECAxEEAAUhEjFBUQYTYSJxgRQy&#xA;kaEHFbFCI8FS0eEzFmLwJHKC8SVDNFOSorJjc8I1RCeTo7M2F1RkdMPS4ggmgwkKGBmElEVGpLRW&#xA;01UoGvLj88TU5PRldYWVpbXF1eX1ZnaGlqa2xtbm9jdHV2d3h5ent8fX5/c4SFhoeIiYqLjI2Oj4&#xA;KTlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+hEAAgIBAgMFBQQFBgQIAwNtAQACEQMEIRIxQQVR&#xA;E2EiBnGBkTKhsfAUwdHhI0IVUmJy8TMkNEOCFpJTJaJjssIHc9I14kSDF1STCAkKGBkmNkUaJ2R0&#xA;VTfyo7PDKCnT4/OElKS0xNTk9GV1hZWltcXV5fVGVmZ2hpamtsbW5vZHV2d3h5ent8fX5/c4SFho&#xA;eIiYqLjI2Oj4OUlZaXmJmam5ydnp+So6SlpqeoqaqrrK2ur6/9oADAMBAAIRAxEAPwD1TirsVdir&#xA;sVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirs&#xA;VdirsVdirsVdirsVdiq31ouXHmvIkilR1GxxVdirCvPn5q6P5MuFhv8ATdRu19NJ5rizgDwRRu7R&#xA;gySsyKDyXpluPFxdQzjjJFhlmmajaanptpqVm/qWl7DHcW7kEco5VDoaHpVWysijTBE4FdirsVdi&#xA;rsVdirsVdirsVQ91cPGQqdaVr1xVUt5TJHUihBocVVMVWtLGpozAHFWvXh/nGKu9eH+cYq714f5x&#xA;iq8EEVHQ4q7FXYq7FXnn5p+eNe0pItG8t2U8urXpVPryxkxQctwAzKULMteuyjfLMMsVnikBXS92&#xA;ccU5cgnv5e3uv3Xl9W1q6ivrmNyi3sC8UlUAHtRW4sSvIAVp0qN4zIJsCguSHCau051JiqqQK0Db&#xA;fdkWCW2lzcy3M0csAjhTj6MoYNzqKt8P7NDtkyBQo7/chu51G3t+qSSUDE+khenEgEGnffpmP40e&#xA;m9dzk4tLKfUD3mkfbf36/T+o5a4yPxS41ptufDFUuOnzGVn2FeRG/Qliw+6uKo4NL3QffiqX61DB&#xA;cqkL/bFSD4A7EEZRmiJOTpspgbVtIW3hsobO3QRQWkaQwxr0WNFCqBXwAy2MraZjdG5Jg7FXYq7F&#xA;XYq7FUPf6jp+n2zXV/cxWlsuzTzusSD5s5AxUlhn5d2GvW95dPrHmCXUb2SPnd6bI8bJFI7bNGu7&#xA;xqAONB8JOUYTI2TycnPwigObO8vcZbJFHJTmK06dv1Yq2qqqhVFAO2Kt4qhr1RxVv2q0r7UJxVCU&#xA;98UOWpHXuf14qvjUGRQdwSARiqX+b7nUoLa2jsLoWTSsVExUMC4HwRnkDTlv77Zha2cwBwnhv8U5&#xA;elhEk8QtCeQfNdzrMFzZ6jtqlk37wFeBaM7BiooKhqg0HhlfZ+rOUGMvri2a3SjGQY/SWWZsXBQ2&#xA;o3i2dnJcEV4D4R4k7DMfV5/Cxmfc24MXiTEWEahJcLOfXJ9aQB2Hf49x+GcdnjMSuf1S3+b0eERM&#xA;fTyCfaFrdnb2LW97OI5beRowrVLUr2AqdjUZv+z9XHHj4MhoxNOs1mknOfFAWJC0wnube6jRlqE+&#xA;IHkCu+3jm4hMS5OtyYzA0XlPmZfJ2kec/wBLT65cQ63aNHdPH6zuPq4pytREOMVHjqFX7Xxct8uH&#xA;jGgBcC3wOM4yDtJl3lPzt5f80rcNpdxIr27AzQSr6bgPWjbEgg07YzwHHz6uLdsqtWUzoAQev6jl&#xA;aEdJJHHG0kjBI0BZ3YgKFAqSSegGKXzzJeahrn5kXusfpKaO1h1GGz0aa3kVomZ5RHDQ1ZPTCfG4&#xA;pv06mmZxkIxEBVkWfc3wwEwMz9P6X0OzKoqxAHidswWhQkvrdSURhJL2RdycgZjkzGMkX0S+6WVW&#xA;E02zSVovcAZXK+rZHuDWlSt9cKDo1fupX9eOM7pyDZOcvcd2KuxV2KuxV2KvnD8/fM95rusXGkWJ&#xA;P6I8ucTfOPstdynjT5oKqP8AZZbAU4+U38EJB5qn0b80dP1+RvT07jFY6jMSAqi59Rat7KY2k/2O&#xA;RjH005mt9OSP9SH2xD3Y+fNBNjePaTfpG+04Il1Y2o5yiaSqrHToCWUj2yB25tEpVEkDiroGQwSP&#xA;JBHI8bQu6hmhfiWQkVKtxLLUdDQkYsw8QvfNX5m6J+cel2OpajFc6RrV08UemQrWOK19TghaqKwd&#xA;VIYtXc17YYyBB8mEhKJHm9ywM0Pe/wB2v+t/A4ql9zdW1rA09zKkMKU5SSEKoqaDc++EAnk1Zc0M&#xA;cTKZEYjqXmnnDy3P5s1u3uLXzGtpbcOGmwRN1kBJZxRkqeVK032zY6XtIYImHh8Rvc/gOrz4cWpM&#xA;ZjPECQ9AB513b77vR9Ctr21sLG2vrn63eQxxxz3XEr6jqAC5BLbnvvmDlkJSJiKBPJ2uKJEQCbPe&#xA;8v8A+cgvMxXUtD8vQyFQjHUr7j2CVWANTsWDdfbIiNhzuzoiWqxxPLjH3vNvK3nTVtB88nzEvqzW&#xA;CemmrKCXrbScEYtv/MVK/wCVTJDGAK6s+3JkazIOQB5e4APrK3uIbiCO4gcSQTIskUimoZGFVYHw&#xA;IOVuEgPMUTS6POq/aHEivswr+GYXaGI5MJiOe33uXoZVlF/jZ8yeZvOPm2/8w6hd29zcpB67rCsJ&#xA;bgqRnggBX4TRVG/fN1Hs/BIAyjEyobkNP5jJHYEgPfdHmsdb8qW/mGGAR6hdxJJcEVDCZTxmAB6f&#xA;ErdOua+WkxwymQHq70y1GQwESfSFBbu7gIn/AHj+l8fAVNeO9KZY47xbV/KfmbzfJrHmeC3kFzca&#xA;gVt7KakT/V+LHlWTiPgHpoN/HwzY/mceKok9Pe3QwyluEJ5PvfM35e+dIZrvTZJGlgaO4tVYUeOU&#xA;VX94glUcXQH6MyccIakAA7Xz/FMc0DjG76ksLtbyxt7pVKC4iSUI3VeahqH5VzT5IcMjHuLAGwkH&#xA;5mz+j5B11qVrZyp/wS0yMZ8Mo+cgPmWcIcXyfKulaw8Gn3cZm9F43SaA9DyVq1XxpwXNplw3kjID&#xA;vt3WhyR/J5sciP4TEed718g+sLHzlo11oUOoSzxxzSWYvZLNmCygcOTLwb4vhIIzVyoEjzp05xSH&#xA;R4yPO/mpXZo9RlQt1pxH40y0Qj3NZkSyvzX551vQNL8rW5hW/v8AVoS8klw5U83ZCo2H/FlMYaYZ&#xA;LJNUyjkMWTflj5gTzFpZ1NjGtwBwmt4zy9Nm3AJ8eIB+nKJYDCZHTo25JAxHezXC0OxV2KuxV2Ku&#xA;xV82/mv5f1HQ7LzlqNyoW01XWLGW0IcMzqY7ouCo6UMoPxZZCYJruaMkCBfQo38jNZ0XzJr2uWl3&#xA;YozTWlvJHaXXC4UmOV+UgDKBsZxTbbxOMhQb55/FlZHKMR/pRT3Cy0fT7GGWS1treyvblqzTpFGr&#xA;SspbgXYAFjv3r1ymfLmyhz5K31y4thxuwrt+y6d8gJkfUz4AeSDd/UmM8gHqsOIPcL14jIE2zApM&#xA;RfW8Ontd3MixQwqWllc0VQvUk5dE7MBilKfDEWSrOkc8akNVDRlZab1H9uSaiKeWfmd540CKS88p&#xA;oLl9VQRO7hU9Bdlm4liysTwI6LTNlg0M/DGbbh+3ueU9pdZA4ZYd+L0+7mC8w+tNvKkgRogHU1ox&#xA;PIAcffeuWPCY8RG42IfQFrrcF15ft9VtJkLzW4mKs4BV+FStKb8W2zUZDUuEPsOjyDLhjk/nRt5/&#xA;daNpV3dXF3d2kVxdXQ43E8qh5HUEGjM1SR8A+7LLLbjkYSEo7SHV5jodympecvMmgaXFCq6taXVh&#xA;bQH4EVrdkkRxtTpbE7eOSnKhZY5css+Ukm5S7/d+x9QeVNPm07yto+nz0M1nY21vKR05RQqjU+kZ&#xA;Vd7pArZEa1P6Gj309QPSt5Xq3QcUJ3+7DEWaSDT59/KaTzBqnlzzPp1lf3EU1tbJNpqxyMvCaskh&#xA;C06eoyUb55stSIxlEkIZX/zj/wCcNT1tNX07V7mS9ntzHcW80xLtweqOvI9gVUge5yrW4hGiE09Q&#xA;1vUbXS7P12iDyMeMUfSp/oM1058IZRjbFZ73zPqVs09vC62xOwtl4k0NPhI+M79aHIQM5nZmREc2&#xA;M6NrV3/i6eBV1fUJ7OJkvdKSZii1ZaSEPIGVh0223zbYdKeG5zxj8e6mjJMdAXq1jvc3DcWX+7Kx&#xA;t1SqAkbV+nMAhIQl9YQXerfV7gtJbSwFpICfgJB47j5YCAWQJB2fM195tudJ1q5tbrTrKdbW4aOS&#xA;FrWBAwjcilVjDUYZtY4OIAglyMWXHGMgYkk8jxcvhW/xereRdT8m+Z9PfVLryxDYBXMXqgpMXZQK&#xA;kfAh475rdXIYZcJNri0s8gsM/HkrysRUafDT/VGR4i41MA/NCSaw83eT9NsYo5I76cRMssazFV9a&#xA;Jf3bOGMdA37NMytPEGMieiKTL8jrg33lptQlSOOeRiHEEaQoaO6glIwoJooyGqFTpL0nMdXYq7FX&#xA;Yq7FXYq8c/5yVvtKtPLukR6hZm8huL/1JYElMDt6NvIgPqBXpQyj9nfJY47215ZbAFIYf0V5L/Nn&#xA;Q7Gw014brW7W3tkvEn/dLDIfq/EwGPchoAx+MfwyXMMdhJ7hLp19KhSS7VlOxBiH/NWVGIPNvBI5&#xA;JLrl/ZeX0SbVNQS3s2BLTNG7HlsAoRS7GvtlZjGI3bImcjQSMfmn5Gvr6Czs55VldvTSWSNlRmc0&#xA;Aqdxv4jKZZI9HIjhmNyyi5sE1byzqFg8vorOrxmWnLj8INaVFfvy7HuFw5/AzRyVfDum1pbFdNgt&#xA;3dqrEiM4JDVVQK1y1xJSsk97zv8AMLRdMsfLr+ZltIrnVTHE8080MczMOKhizMpc0T/K2AzLw5Zm&#xA;sdnh95/sdN2thAwymIxlPbnEHqOfuDyTTPzL02C6dtS8u2l/bFaJGixW7Bqj4q+nLXau2Zp0ZraR&#xA;ee0+qhE/vMeOXuiB+gvVfy782+RvNtw+m2unS6ffQReqLduDRmNSFPB0A+yWGxUe2YOo00se5NvS&#xA;6DX48voiOGhy6If8z59V0nzD5a0zQtOee1vbgHV7kwNOkcJlRB8QBVPhLkk5jgjq7CV9A8d/Km11&#xA;q4/N3Sr+/wBOktluJpjPxt2hiX1beRTQUAWvL78lkAMaasRIkC+vQAAANgOmVuQkH5gSzReSNdMC&#xA;NJM1jPHGkYLMWkQoKAb9WyzDXGL70gWwX8gNDew8sxX0qFZtTluZBUUPpwlIlBH+srn6cyNbO513&#xA;KeaSfkZoV7pvn/zMstvJBBAktvEzoyq1Lmg4kgA7JlusyCUI0WUgaZ1rL3Ou6hdG1NbawhkZG7Eq&#xA;CfvdhT5ZpZ+o7dGcfSE1/L6f1NAKk1MUzr94D/8AG2TwH0sco3Tm3A/Sd4ablIa/c2XNa62/3tu/&#xA;mn/EBiqGuoYp9YSKVeUbW55L8nr2yGTHGceGQsFlCZibHNLIvKGkS63eyTqZoeEfC2cJwUt1IIUS&#xA;H7Hdu/yymOjxAbD73IGuyjr9gQt7As0d5NCoW3tgqRqNgFDBVp9AzHmOKz3Ozwy4OGJ5yZTp8vq2&#xA;NvJ3aNSfnTfM7GbiHT541MjzeV/mZ6kn5t+RIlOyycwD02lBb8FzY6f+6m1pt+SVv9W8u3dtSnoX&#xA;c8VKcacLiVenbp0yrVG5/AIL0XMZXYq7FXYq7FXYq8P/ADxtjrv5leQ/LIqyNK09wg/31JKgc+Gy&#xA;W75ZHkWnJuQFv5hRl/zY/LtUAMhkjbsDxSdmP3DBHkVn9Qe5ZBueGfnDrK39xq8K/FDpk1nb7dCw&#xA;jmlk/F+P0ZiZpXfwc7TxojzB/Qyq1/K3yJ5g0Cw1LT7X9Hy3kMVx6sTySAB0qU4SOy7E+FdssGGB&#xA;F0nDqzjmeMcY7jt9y/yz5K84G5Mup+Z7j6tbzhGsrcKY5VTZ0kLoDRuletPA5lRMQKAcjL2linAx&#xA;8GAJHOzYejZB1DBPNP5Y+VPMelPf3kDx6q1pGEvo5JAy+kgK0jLekdhTdczcHaGbFHhjKo+4fqcL&#xA;P2fhyy4pRuXvLzzz95c8k+SPLVpZ6XZC6806tD6C3MzPM4ienqS+kSY1dvsIVQHuOmZWHU5cx9Z9&#xA;I8gHU9oYcOnhUI+uW3fsh/yS0zUdB/NK80e/QRXa6awnjPUGT0JwPmAQPvyOsmJ4wRyth2Vili1B&#xA;jLnw/qL2rzEP3iV6em+aLL9cXrsf0FXux6WtW8vaQBfp3X+OCe2QFYb4yE1zJcdRvLb6zbtCW4K/&#xA;UgVOxrkMkOIUzxz4JAoS3sbuBoRzR1gV0U04mjFabAn+XBiiYiibTmmJysCko13QfNNwJP0LqcGn&#xA;tclvrLSQmYlT0VfiWnep6+GHFjEZEy3B+DPJn4oiNcnWHl/zHYeWpLG1vLVdYlJMl+YWaIAnakRc&#xA;9E8WIr27ZbEQB2GzTIkoLyx5S836Lp0tq2tQzTS3MUpm+rAAQrQSxheQozjo29PDCfDH0ivikyvm&#xA;yKbTr3hO9rcNFeSJRJnIkUOAeBZKLyAJ6VH0ZEMVXS7W/gjH12Vbi4ZIxNOq8A8iIFZ+G4Xkd6V2&#xA;xKuurS8e6a4t3SNxA0UbMC1HO4YrtUDwrgVRubHU/Rme0uAl9KgX1JAGjqvSqKFam/ZsVBo2l+na&#xA;N5jhsr20vJ7OVJ0/cGKORCr9CX5O/IHbpSmQ8KAjwi3JOpkZiXcjdGs9dtIWgvJoJIkoLf0lZWA3&#xA;5BixavtkoxERQa82TjlxVTFNd/KX9LeZ08znX9Sh1e2NbD44HtrfrQJAYdwK13bc9a5kRzkR4a2a&#xA;+JPPJHlG58sWElm962oGSR5pLmUKsjvI7OxYKKdXyvJPiNoLJsgrsVdirsVdirTMFBJ6DFXmXmTy&#xA;R5sufzT07zvpM1g8dhai1WzvTOGofVEnFo0bjVZjQ779skDtTWYm7UfOXkLzVq3mny35k0Weyhm0&#xA;JGH1e+E/F2Llv91LWlD44grKJJBeji/mislluIC9yFX1IbasnxmnIIXEdQD3NNsiS2Ddht75c0a/&#xA;nuriXQZLlLiYzS24QQl5gTxkf1WiVqcye9ffMYQJBsOSclEUeQZBo95LY6RBAdJntgkogitUWE8E&#xA;bcSH0pGRYwTTrUeFMtwxIjRas0gZWETDdyWThJLeSUXdwxDQjmI+dWrJXjRRx3OWtSa8hx5duuBK&#xA;U/WpDappy20vN7QVnZaRKSOBQt15DrSmFDzPQ/KnmJvzfk1TzXYm7tEhLaNe29XtYTGaQpIGAKss&#xA;ant9vfuMyfzFY+EbOv8AyIOfxZG+7yWaymr6L+eMnmOLQtQ1HSp7aOKa5soDKAzQrHXtXjwFcfFB&#xA;xcPVH5aQ1Pi/w1+h6Jq015dyj0rGYwqh4zVQVDLXdCwcU6U41zXziTIHoHeQEBjJ4hZ6b/qr7UVq&#xA;j3c08It7OSRYiH9UNGBUndaMwPYY5YkkV0XAI8JuQHlv+gJwpqK0I9jlziuxV2KuxV2KuxV2KuxV&#xA;2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2&#xA;KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Kv/2Q==</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:InstanceID>xmp.iid:1655c8e1-fe8d-8f49-809c-5e5e96a4c11c</xmpMM:InstanceID>
         <xmpMM:DocumentID>xmp.did:1655c8e1-fe8d-8f49-809c-5e5e96a4c11c</xmpMM:DocumentID>
         <xmpMM:OriginalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</xmpMM:OriginalDocumentID>
         <xmpMM:RenditionClass>default</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:03795e79-b505-6b42-a6e1-e03bd17c5a6d</stRef:instanceID>
            <stRef:documentID>xmp.did:03795e79-b505-6b42-a6e1-e03bd17c5a6d</stRef:documentID>
            <stRef:originalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</stRef:originalDocumentID>
            <stRef:renditionClass>default</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:9055feea-6df3-418a-84b0-35eb367eec15</stEvt:instanceID>
                  <stEvt:when>2016-04-18T22:41:34+07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:1655c8e1-fe8d-8f49-809c-5e5e96a4c11c</stEvt:instanceID>
                  <stEvt:when>2020-02-24T20:57:30+07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator 24.0 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
         <illustrator:CreatorSubTool>Adobe Illustrator</illustrator:CreatorSubTool>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>750.000000</stDim:w>
            <stDim:h>500.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>White</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Black</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>0</xmpG:red>
                           <xmpG:green>0</xmpG:green>
                           <xmpG:blue>0</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Color Group 1</xmpG:groupName>
                  <xmpG:groupType>1</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=245 G=236 B=224</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>241</xmpG:red>
                           <xmpG:green>234</xmpG:green>
                           <xmpG:blue>223</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=37 G=188 B=175 1</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>110</xmpG:red>
                           <xmpG:green>186</xmpG:green>
                           <xmpG:blue>173</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=15 G=114 B=146 1</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>66</xmpG:red>
                           <xmpG:green>113</xmpG:green>
                           <xmpG:blue>143</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=24 G=87 B=189 1</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>55</xmpG:red>
                           <xmpG:green>88</xmpG:green>
                           <xmpG:blue>184</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=239 G=95 B=122 1</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>209</xmpG:red>
                           <xmpG:green>95</xmpG:green>
                           <xmpG:blue>120</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Kulit</xmpG:groupName>
                  <xmpG:groupType>1</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=238 G=215 B=186</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>230</xmpG:red>
                           <xmpG:green>213</xmpG:green>
                           <xmpG:blue>185</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=39 M=59 Y=77 K=25 1</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>122</xmpG:red>
                           <xmpG:green>94</xmpG:green>
                           <xmpG:blue>67</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=109 G=75 B=53 1</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>101</xmpG:red>
                           <xmpG:green>76</xmpG:green>
                           <xmpG:blue>57</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=198 G=187 B=163 1</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>193</xmpG:red>
                           <xmpG:green>185</xmpG:green>
                           <xmpG:blue>162</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=233 G=229 B=217</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>230</xmpG:red>
                           <xmpG:green>227</xmpG:green>
                           <xmpG:blue>215</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Color Group 2</xmpG:groupName>
                  <xmpG:groupType>1</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=58 G=77 B=87</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>66</xmpG:red>
                           <xmpG:green>78</xmpG:green>
                           <xmpG:blue>87</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Gold 2</xmpG:groupName>
                  <xmpG:groupType>1</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=20 M=40 Y=96 K=7</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>180</xmpG:red>
                           <xmpG:green>144</xmpG:green>
                           <xmpG:blue>58</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Grays</xmpG:groupName>
                  <xmpG:groupType>1</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=100</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>39</xmpG:red>
                           <xmpG:green>36</xmpG:green>
                           <xmpG:blue>37</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=90</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>67</xmpG:red>
                           <xmpG:green>66</xmpG:green>
                           <xmpG:blue>68</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=80</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>89</xmpG:red>
                           <xmpG:green>89</xmpG:green>
                           <xmpG:blue>91</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=70</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>109</xmpG:red>
                           <xmpG:green>110</xmpG:green>
                           <xmpG:blue>112</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=60</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>128</xmpG:red>
                           <xmpG:green>128</xmpG:green>
                           <xmpG:blue>131</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=50</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>145</xmpG:red>
                           <xmpG:green>147</xmpG:green>
                           <xmpG:blue>149</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=40</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>165</xmpG:red>
                           <xmpG:green>166</xmpG:green>
                           <xmpG:blue>169</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=30</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>186</xmpG:red>
                           <xmpG:green>188</xmpG:green>
                           <xmpG:blue>190</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=20</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>207</xmpG:red>
                           <xmpG:green>209</xmpG:green>
                           <xmpG:blue>210</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=10</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>229</xmpG:red>
                           <xmpG:green>229</xmpG:green>
                           <xmpG:blue>230</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=5</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>240</xmpG:red>
                           <xmpG:green>241</xmpG:green>
                           <xmpG:blue>241</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Color Group 5</xmpG:groupName>
                  <xmpG:groupType>1</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=251 G=209 B=91 1</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>239</xmpG:red>
                           <xmpG:green>207</xmpG:green>
                           <xmpG:blue>100</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=96 G=107 B=241</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>99</xmpG:red>
                           <xmpG:green>107</xmpG:green>
                           <xmpG:blue>236</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=135 G=140 B=240</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>134</xmpG:red>
                           <xmpG:green>138</xmpG:green>
                           <xmpG:blue>235</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=86 G=84 B=140</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>86</xmpG:red>
                           <xmpG:green>85</xmpG:green>
                           <xmpG:blue>136</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>kulit orang II</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>227</xmpG:red>
                           <xmpG:green>131</xmpG:green>
                           <xmpG:blue>120</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Kulit orang</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>240</xmpG:red>
                           <xmpG:green>198</xmpG:green>
                           <xmpG:blue>174</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <pdf:Producer>Adobe PDF library 15.00</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -500 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 500 li
750 500 li
750 0 li
cp
clp
750 500 mo
0 500 li
0 0 li
750 0 li
750 500 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 0 cmyk
f
361.155 216.147 mo
192.423 216.147 li
192.423 113.436 li
361.155 113.436 li
361.155 216.147 li
cp
.115297 .0875563 .0918593 0 cmyk
f
358.651 213.445 mo
194.927 213.445 li
194.927 116.138 li
358.651 116.138 li
358.651 213.445 li
cp
.0433661 .0238956 .0283818 0 cmyk
f
206.395 176.71 mo
249.546 176.71 li
249.546 133.559 li
206.395 133.559 li
206.395 176.71 li
cp
250.546 177.71 mo
205.395 177.71 li
205.395 132.559 li
250.546 132.559 li
250.546 177.71 li
cp
.115297 .0875563 .0918593 0 cmyk
f
250.046 170.352 mo
205.895 170.352 li
205.895 169.352 li
250.046 169.352 li
250.046 170.352 li
cp
f
250.046 162.993 mo
205.895 162.993 li
205.895 161.993 li
250.046 161.993 li
250.046 162.993 li
cp
f
250.046 155.635 mo
205.895 155.635 li
205.895 154.635 li
250.046 154.635 li
250.046 155.635 li
cp
f
250.046 148.276 mo
205.895 148.276 li
205.895 147.276 li
250.046 147.276 li
250.046 148.276 li
cp
f
250.046 140.917 mo
205.895 140.917 li
205.895 139.917 li
250.046 139.917 li
250.046 140.917 li
cp
f
243.188 177.21 mo
242.188 177.21 li
242.188 133.059 li
243.188 133.059 li
243.188 177.21 li
cp
f
235.829 177.21 mo
234.829 177.21 li
234.829 133.059 li
235.829 133.059 li
235.829 177.21 li
cp
f
228.47 177.21 mo
227.47 177.21 li
227.47 133.059 li
228.47 133.059 li
228.47 177.21 li
cp
f
221.112 177.21 mo
220.112 177.21 li
220.112 133.059 li
221.112 133.059 li
221.112 177.21 li
cp
f
213.753 177.21 mo
212.753 177.21 li
212.753 133.059 li
213.753 133.059 li
213.753 177.21 li
cp
f
324.506 156.747 mo
314.951 156.747 li
314.951 147.191 li
324.506 147.191 li
324.506 156.747 li
cp
0 .605188 .451362 0 cmyk
f
241.022 146.419 mo
231.468 146.419 li
231.468 136.864 li
241.022 136.864 li
241.022 146.419 li
cp
.506462 .452674 0 0 cmyk
f
289.147 164.792 mo
279.592 164.792 li
279.592 155.237 li
289.147 155.237 li
289.147 164.792 li
cp
.0167849 .1691 .756985 0 cmyk
f
307.121 156.747 mo
297.565 156.747 li
297.565 147.191 li
307.121 147.191 li
307.121 156.747 li
cp
0 .605188 .451362 0 cmyk
f
328.651 171.93 mo
279.592 171.93 li
279.592 170.93 li
328.651 170.93 li
328.651 171.93 li
cp
.115297 .0875563 .0918593 0 cmyk
f
328.651 176.093 mo
279.592 176.093 li
279.592 175.093 li
328.651 175.093 li
328.651 176.093 li
cp
f
328.651 180.255 mo
279.592 180.255 li
279.592 179.255 li
328.651 179.255 li
328.651 180.255 li
cp
f
328.651 184.418 mo
279.592 184.418 li
279.592 183.418 li
328.651 183.418 li
328.651 184.418 li
cp
f
309.752 188.581 mo
279.592 188.581 li
279.592 187.581 li
309.752 187.581 li
309.752 188.581 li
cp
f
168.387 406.516 mo
29.4351 406.516 li
27.9795 406.516 26.7881 405.324 26.7881 403.868 cv
26.7881 403.523 li
26.7881 402.067 27.9795 400.877 29.4351 400.877 cv
168.387 400.877 li
169.843 400.877 171.035 402.067 171.035 403.523 cv
171.035 403.868 li
171.035 405.324 169.843 406.516 168.387 406.516 cv
cp
.0433661 .0238956 .0283818 0 cmyk
f
358.465 414.008 mo
63.8535 414.008 li
62.374 414.008 61.1641 412.797 61.1641 411.318 cv
61.1641 408.177 li
61.1641 406.697 62.374 405.487 63.8535 405.487 cv
358.465 405.487 li
359.944 405.487 361.155 406.697 361.155 408.177 cv
361.155 411.318 li
361.155 412.797 359.944 414.008 358.465 414.008 cv
cp
f
74.3281 403.653 mo
74.3281 403.653 57.689 403.653 57.5952 403.653 cv
50.7485 401.458 43.2637 399.038 40.3745 398.101 cv
41.6313 393.654 li
60.8784 400.877 li
66.5059 397.331 li
69.8638 397.331 74.3281 400.633 74.3281 403.653 cv
cp
level3{
gsave
clp
[12.5037 21.657 -21.657 12.5037 50.5055 388.531 ]ct
/0 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~"=q:g">%@h">.Fi">7Ok">@Ul">@Ul">I[m">[jp"#Igp"#Igp"#Rpr"#e't"#e't"#n1!"$"7""$"7"
"$+=#!]n:#!^"C%!^+I&!^4O'!^4R(!^=X)!^Og,!^Xm-!^Xp.!^b!/!^k*1!^t02!_(63!_1?5!Ct<5
!D(B6!D1H7!D:Q9!D:Q9!DCW:!)1W;!):]<!)Cc=!)Ll?!)Ll?!)Ur@!)_&B!)h,C!)q2D!)q2D!*%;F
!*.AG!*7GH!*@MI!*ISJ!*R\L!*R\L!*[bM!*dkO!*mqP!+"%R!+"%R!+++S!+44U!+=:V!+F@W!+OIY
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 0 1 ]
/Size [64 ]
>>
]
/Bounds []
/Encode [0 1 ]
>>
>>/Gradient add_res /0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[12.5037 21.657 -21.657 12.5037 50.5055 388.531 ]ct
clp
/0 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 4 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s/N*!WiE)!WiE)!WiE)!WiE)!WiE)!WiE)!WiE)
!WiE)!WiB'!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E0#
zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz!!!!!~>
<~.P!#".kE5&/1iG*/M8Y./hSb//h\k20/,(70etL>1,:U?1,C^B1GgpG2)R6K2)[?N2E*QR2`EZS2`NcV
3&ioY3B9,]3]]>a4$,Pe4?P_g4?Pbi4Zttm5<hCu5X7S"5X7V$5s[h(6:+%,6UO706psI477B[87Rfm<
7n6'?84Z9C8P)KF8P)KG8kM]K91qoO9MA,S9he>W:/4PZ:/4P[:JXb_:f'tc;,L1g;GpCj;GpCk;c?Uo
<)cgr<E3%!<`W7%='&I)=BJ[-=BJ[-=]nm1>$>*5>?b<9>[1N=>[1N=?!U`A?=$rE?XI/I?smAM@:<SQ
~>
<~^qdb$^qdb$^qmk'_83t(_83t(_83t(_8=(+_SX1,_SX1,_Sa:/_o'C0_o'C0_o0L3`5KU4`5KU4`5KU4
`5KU4`5KX6`Pog8`Pog8`Poj:`l?$<`l?'>a2c6@a2c9BaN2HDaN2KFaiVZHaiVZHaiV]Jb0%lLb0%lL
b0%lLb0%lMbKJ)PbKJ)PbKJ)Qbfn;Tbfn;Tbfn;Uc-=MXc-=MXc-=MYcHa_\cHa_\cHa_\cHa_]cd0q`
cd0q`cd0q`cd0q`cd0q`d*U.dd*U.dd*U.ddF$@hdF$@hdaHRldaHRldaHRle'ldpe'ldpe'ldpeC<!t
~>
0 ]
>>
0 0 1 0 []true true []
/DeviceCMYK
GenStrips
} /Gradient add_res /0 /Gradient get_res exec grestore
}if
np
146.775 396.844 mo
152.309 400.164 156.586 403.653 150.002 403.653 cv
149.12 403.653 147.544 403.653 145.537 403.653 cv
137.621 403.653 123.139 403.653 118.75 403.653 cv
118.637 400.482 li
144.581 400.482 li
146.775 396.844 li
cp
level3{
gsave
clp
[9.7293 16.8516 -16.8516 9.7293 130.643 393.551 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[9.7293 16.8516 -16.8516 9.7293 130.643 393.551 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
135.67 376.396 mo
117.474 376.396 li
115.748 376.396 li
115.748 376.396 113.591 356.343 111.283 335.577 cv
109.032 315.467 90.6113 270.445 89.4668 267.65 cv
89.4292 267.557 89.4106 267.52 89.4106 267.52 cv
86.5591 267.52 li
86.5591 267.52 82.3198 309.896 80.5186 319.538 cv
79.0557 327.397 70.1265 360.319 64.0674 380.204 cv
45.8335 375.59 li
44.145 375.158 li
44.145 375.158 50.1479 332.144 51.6113 310.158 cv
52.2305 301.004 52.418 288.998 53.7124 276.336 cv
54.4063 276.468 55.0254 276.468 55.4941 276.336 cv
56.4321 276.092 55.5508 272.771 54.5376 269.602 cv
54.8003 267.688 55.1006 265.756 55.4194 263.843 cv
56.1509 265.737 56.6201 267.369 58.3833 266.619 cv
59.1899 266.263 57.4077 260.316 57.0327 258.534 cv
56.9766 258.233 56.8262 257.896 56.6387 257.577 cv
56.6572 257.559 li
59.2275 245.89 63.373 234.598 70.2954 225.331 cv
73.0903 225.331 li
105.712 225.331 li
105.712 225.331 117.249 255.401 126.553 279.675 cv
135.876 303.949 138.446 310.665 139.347 332.406 cv
140.266 354.148 137.021 376.396 137.021 376.396 cv
135.67 376.396 li
cp
level3{
gsave
clp
[82.0947 142.192 -142.192 82.0947 41.3316 242.053 ]ct
/1 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~`4do4`P*u3`P4&4`kX56`ka86a20G8a29J7aM]V8aMfY8aMo_9ai>k:ai>k:b/c";b/l(;bK;4<bKD:=
bfhF>bfqL?bg%O?bg.U@c-RaAc-Ra@c-[gAcI*sBcI4$CcdX0Dcda6Ecdj9Ed+0BFd+9EFdFfZHdFo]H
dFo]HdbGoIdbPrIe(u)JeD;2JeDD5Je_hDLe_qGLe`%MMf&I\Of&IYNf&R_OfB!kPfB*nPfB3tQfB="Q
f]X+Rf]a.Rg$0=Tg$9@Tg$BFUg?]LUg?fRVg?oXWg[>dXg[GjYh!bsZh!l!Yh=;0[h=D3[h=M9\hXhB]
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 0 1 ]
/Size [64 ]
>>
]
/Bounds []
/Encode [0 1 ]
>>
>>/Gradient add_res /1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[82.0947 142.192 -142.192 82.0947 41.3316 242.053 ]ct
clp
/1 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 4 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~_o0L3`5KU4`5T^7`Pog8`Q#p;`l?$<`lH-?a2c6@a2c6@a2l?CaN2HDaN;QGaiVZHai_cKb0%lLb0.uO
bKJ)PbKJ)PbKJ)PbKJ,Rbfn;Tbfn;Tbfn>Vc-=MXc-=PZcHa_\cHa_\cHab^cd0q`cd0tbd*U.dd*U.d
d*U.edF$@hdF$@idaHRme'ldpe'ldqeC<!teC<!teC<!ue^`4#e^`4#e^`4$f%/F'f%/F'f%/F'f%/F(
f@SX+f@SX+f\"j/f\"j/f\"j/g"G'3g"G'3g"G'3g=k97g=k97gY:K;gY:K;gt^]?gt^]?gt^]?h;-oC
~>
<~]tM+m]tV4p^;%Ft^VIY#^qmk'_8=(+_Sa:/_o0L3`5T^7`Q#p;`l?$<`lH-?a2l?CaN;QGai_cKb0.uO
bKJ,Rbfn>Vc-=PZcHab^cd0q`cd0tbd*U1fdF$CjdaHUne'lgreC<%!e^`4#e^`7%f%/I)f\"m1g"G'3
g"G'4g=tB;gt^]@h;-oCh;-oDhVR,Hhr!>Li8EPPiSibTio8tWio8tXj5]1\jQ,C`jlPUdk2tghkND$k
kND$kkih6ol07HslK[["lg*m&lg*m&m-O**mHs<.mdBN2n*f`6n*f`6nF5r:naZ/>o()ABoCMSFoCMSF
~>
<~0/"t30.nk0/hSb//hSb//hJY,/M/P+/M&G(/1W5$.k3"u.Olnt.Oceq.4H\p.4?Sm-n$Jl-mpAi-RU8h
-RU5f-71&d-71#b,pai`,paf^,U=W\,U=W\,U=TZ,9nEX,9nBV+sJ3T+sJ0R+X&!P+X%sN+<VdL+<VaJ
+!2RH+!2RG*Zc@C*??.?*#oq<*#oq;)]K_8)]K_7)B'M4)B'M4)B'M3)&X;0)&X;/(`4)+(Ddl((Ddl'
()@Z$()@Z$'bqGu'bqGu'GM5q'GM5q',)#m',)#m',)#m&eYfi&eYfi&eYfi&J5Te&J5Te&.fBa&.fBa
~>
<~#mgnE#m^eB#RC\A#RC\A#RC\A#RC\A#R:S>#6tJ=#6tJ=#6tJ=#6tJ=#6tJ=#6tJ=#6kA:"pP89"pP89
"pP89"pP89"pP89"pP89"pP89"pP57"U,&5"U,&5"U,&5"U,&5"U,&5"U,&5"U,&5"U,&5"U,#3"9\i1
"9\i1"9\i0!s8W-!s8W-!s8W,!WiE)!WiE)!WiE)!WiE)!WiE)!WiE)!WiE)!WiE)!WiE)!WiE)!WiE)
!WiE)!WiE)!WiE)!WiE)!WiE)!WiE)!WiE)!WiE)!WiE)!WiE)!WiE)!WiE)!<E3%!<E3%!<E3%!<E3%
~>
]
>>
0 0 1 0 []true true []
/DeviceCMYK
GenStrips
} /Gradient add_res /1 /Gradient get_res exec grestore
}if
np
124.809 144.499 mo
125.446 142.848 125.784 141.084 125.784 139.227 cv
125.784 138.627 125.747 138.026 125.671 137.445 cv
126.628 136.732 127.435 135.869 127.96 134.856 cv
128.279 135.738 128.598 136.638 128.917 137.52 cv
129.292 138.533 129.648 139.565 129.742 140.634 cv
129.892 142.266 129.348 143.954 128.298 145.192 cv
127.66 145.943 126.854 146.543 126.178 147.237 cv
125.484 147.95 124.902 148.832 124.865 149.807 cv
124.846 150.464 125.071 151.102 125.203 151.739 cv
125.559 153.709 124.752 155.941 123.026 156.936 cv
121.282 157.948 118.843 157.723 117.586 159.28 cv
117.023 159.975 116.836 160.894 116.367 161.663 cv
115.898 162.395 115.148 162.919 114.322 163.164 cv
112.634 162.169 110.589 161.25 108.169 160.368 cv
107.476 160.106 106.744 159.843 105.975 159.599 cv
106.519 158.249 107.063 156.879 107.063 156.879 cv
107.063 156.879 111.978 158.117 113.047 157.536 cv
114.097 156.936 121.188 153.353 124.79 144.499 cv
124.809 144.499 li
cp
level3{
gsave
clp
[8.90125 15.4174 -15.4174 8.90125 114.359 142.709 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[8.90125 15.4174 -15.4174 8.90125 114.359 142.709 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
125.671 137.445 mo
124.978 137.989 124.189 138.439 123.383 138.795 cv
121.132 139.809 118.656 140.277 116.33 141.103 cv
111.621 142.772 107.532 146.487 105.956 151.289 cv
105.731 151.983 105.524 152.733 105.037 153.277 cv
104.061 154.366 102.335 154.291 101.079 155.022 cv
99.4092 155.998 98.9399 158.155 97.8335 159.768 cv
97.6831 159.993 97.5142 160.218 97.3267 160.425 cv
96.6514 161.175 95.77 161.644 94.813 161.907 cv
93.7437 162.188 92.5806 162.188 91.5117 161.925 cv
89.4668 161.438 87.6846 160.181 86.165 158.736 cv
85.3774 157.986 84.627 157.179 83.7451 156.542 cv
82.5073 155.679 81.0439 155.172 79.5244 155.135 cv
76.8794 155.566 74.6284 156.579 72.4897 158.305 cv
71.8896 157.367 71.7021 156.185 71.8335 155.097 cv
72.0024 153.69 72.6401 152.396 73.4277 151.214 cv
74.3096 149.901 75.3975 148.682 76.7671 147.913 cv
78.7368 146.806 81.2881 146.581 82.7324 144.854 cv
84.5146 142.735 83.8579 139.321 85.6401 137.201 cv
87.8911 134.519 92.8433 135.4 94.8506 132.53 cv
95.6572 131.386 95.77 129.904 96.1826 128.572 cv
98.3208 121.763 107.194 119.961 113.441 121.031 cv
120.119 122.156 126.535 127.015 128.561 133.637 cv
128.467 133.674 li
128.354 134.087 128.185 134.481 127.96 134.856 cv
127.435 135.869 126.628 136.732 125.671 137.445 cv
cp
level3{
gsave
clp
[15.4537 26.7666 -26.7666 15.4537 90.8145 128.755 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[15.4537 26.7666 -26.7666 15.4537 90.8145 128.755 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
101.66 163.333 mo
96.7451 165.846 li
94.813 161.907 li
95.77 161.644 96.6514 161.175 97.3267 160.425 cv
97.5142 160.218 97.6831 159.993 97.8335 159.768 cv
101.66 163.333 li
cp
0 .433814 .731868 0 cmyk
f
108.169 160.368 mo
105.693 166.803 li
101.66 163.333 li
105.975 159.599 li
106.744 159.843 107.476 160.106 108.169 160.368 cv
cp
f
76.3545 185.956 mo
73.0903 225.331 li
70.2954 225.331 li
71.4019 214.863 72.415 198.43 73.0527 189.801 cv
75.0225 187.494 76.3545 185.956 76.3545 185.956 cv
cp
f
124.565 221.917 mo
127.21 227.488 132.481 228.182 132.481 228.182 cv
130.174 228.932 128.129 229.382 126.553 229.42 cv
120.569 229.551 114.06 210.849 111.452 197.755 cv
112.465 195.654 113.291 193.684 113.234 192.746 cv
113.159 191.489 112.934 184.68 112.784 179.371 cv
112.784 179.371 121.901 216.364 124.565 221.917 cv
cp
f
185.119 204.808 mo
185.25 206.44 183.543 209.442 182.061 211.13 cv
180.56 212.837 178.084 214.038 173.976 214.188 cv
170.187 214.338 162.777 213.418 162.777 213.418 cv
162.777 213.418 161.557 214.131 159.55 215.276 cv
157.674 213.813 156.211 207.922 157.336 205.184 cv
162.233 203.852 li
162.233 203.852 166.078 200.306 167.767 200.231 cv
169.455 200.175 176.527 199.837 176.714 200.625 cv
177.277 202.97 174.126 202.407 171.65 203.458 cv
169.155 204.508 171.725 204.339 173 204.396 cv
174.294 204.452 184.968 203.176 185.119 204.808 cv
cp
0 .255863 .275639 0 cmyk
f
111.452 197.755 mo
110.121 200.475 108.488 203.401 108.057 204.527 cv
107.476 206.009 105.956 215.257 105.712 225.331 cv
73.0903 225.331 li
76.3545 185.956 li
76.3545 185.956 75.0225 187.494 73.0527 189.801 cv
67.7065 196.066 57.5576 208.035 56.5635 210.023 cv
55.4194 212.331 54.2188 242.852 53.8813 251.931 cv
51.6865 250.674 46.1899 250.186 41.9502 251.931 cv
40.5811 234.748 38.7612 208.616 40.1309 205.371 cv
42.2129 200.438 59.5464 174.569 67.0498 164.289 cv
68.9258 161.738 70.6704 159.75 72.4897 158.305 cv
74.6284 156.579 76.8794 155.566 79.5244 155.135 cv
81.0439 155.172 82.5073 155.679 83.7451 156.542 cv
84.627 157.179 85.3774 157.986 86.165 158.736 cv
87.6846 160.181 89.4668 161.438 91.5117 161.925 cv
92.5806 162.188 93.7437 162.188 94.813 161.907 cv
96.7451 165.846 li
101.66 163.333 li
105.693 166.803 li
108.169 160.368 li
110.589 161.25 112.634 162.169 114.322 163.164 cv
117.905 165.246 120.006 167.628 121.057 170.592 cv
121.057 170.611 121.076 170.611 121.076 170.629 cv
123.345 179.709 132.894 211.824 132.894 211.824 cv
157.336 205.184 li
156.211 207.922 157.674 213.813 159.55 215.276 cv
153.716 218.577 141.167 225.406 132.481 228.182 cv
132.481 228.182 127.21 227.488 124.565 221.917 cv
121.901 216.364 112.784 179.371 112.784 179.371 cv
112.934 184.68 113.159 191.489 113.234 192.746 cv
113.291 193.684 112.465 195.654 111.452 197.755 cv
cp
level3{
gsave
clp
[46.5345 80.6 -80.6 46.5345 62.3347 163.936 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[46.5345 80.6 -80.6 46.5345 62.3347 163.936 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
146.775 396.844 mo
144.581 400.482 li
118.637 400.482 li
118.355 392.866 li
118.355 392.866 117.98 386.02 117.474 376.396 cv
135.67 376.396 li
135.745 385.082 135.783 391.01 135.783 391.01 cv
135.783 391.01 141.786 393.86 146.775 396.844 cv
cp
0 .255863 .275639 0 cmyk
f
125.671 137.445 mo
125.747 138.026 125.784 138.627 125.784 139.227 cv
125.784 141.084 125.446 142.848 124.809 144.499 cv
124.79 144.499 li
121.188 153.353 114.097 156.936 113.047 157.536 cv
111.978 158.117 107.063 156.879 107.063 156.879 cv
107.063 156.879 106.519 158.249 105.975 159.599 cv
101.66 163.333 li
97.8335 159.768 li
98.9399 158.155 99.4092 155.998 101.079 155.022 cv
102.335 154.291 104.061 154.366 105.037 153.277 cv
105.524 152.733 105.731 151.983 105.956 151.289 cv
107.532 146.487 111.621 142.772 116.33 141.103 cv
118.656 140.277 121.132 139.809 123.383 138.795 cv
124.189 138.439 124.978 137.989 125.671 137.445 cv
cp
f
66.5059 397.331 mo
60.8784 400.877 li
41.6313 393.654 li
43.3198 387.708 li
43.3198 387.708 44.333 382.83 45.8335 375.59 cv
64.0674 380.204 li
62.6602 384.726 61.4409 388.57 60.4653 391.291 cv
60.4653 391.291 63.3921 394.049 66.5059 397.331 cv
cp
f
55.4194 263.843 mo
55.1382 263.148 54.8379 262.417 54.4063 261.761 cv
52.8306 259.321 52.5117 262.454 52.6992 263.824 cv
52.7744 264.443 53.7124 266.976 54.5376 269.602 cv
55.5508 272.771 56.4321 276.092 55.4941 276.336 cv
55.0254 276.468 54.4063 276.468 53.7124 276.336 cv
51.9487 276.092 49.6978 275.191 48.1973 274.291 cv
46.0962 273.016 44.3516 270.596 43.4136 266.263 cv
42.5508 262.248 42.1382 254.182 42.1382 254.182 cv
42.0815 253.45 42.0254 252.7 41.9502 251.931 cv
46.1899 250.186 51.6865 250.674 53.8813 251.931 cv
53.8247 253.525 53.7871 254.463 53.7871 254.463 cv
53.7871 254.463 55.7383 256.021 56.6387 257.577 cv
56.8262 257.896 56.9766 258.233 57.0327 258.534 cv
57.4077 260.316 59.1899 266.263 58.3833 266.619 cv
56.6201 267.369 56.1509 265.737 55.4194 263.843 cv
cp
f
320.084 400.208 mo
319.976 400.588 319.949 400.996 319.949 401.403 cv
319.949 404.801 322.721 407.572 326.145 407.572 cv
329.569 407.572 332.341 404.801 332.341 401.403 cv
332.341 397.979 329.569 395.207 326.145 395.207 cv
325.71 395.207 325.302 395.262 324.895 395.344 cv
324.868 395.344 li
322.449 395.859 320.546 397.762 320.084 400.208 cv
cp
level3{
gsave
clp
[6.18299 10.7093 -10.7093 6.18299 323.054 396.04 ]ct
/2 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~p]"Drp]"Dqp]"DqpA\;opA\8npA\8mpA\8mpA\8lpA\5kpA\5jp&A,hp&A)gp&A)fp&A)ep&A&dp&A&c
o`%o`o`%o`o`%l^o`%l]oD_c\oD_`Zo)DWYo)DWXo)DTVnc)KUnc)HSnc)EQnc)EPnGc<OnGc9MnGc9L
n,H-In,H-Hn,H-Gmf-$Fmf-!Dmf-!CmJfmAmJfj?mJfj>mJfj>mJfj=m/K^:m/K^9m/K^8m/K^7m/K[5
m/K[4m/K[3li0O1li0O0lMjC.lMj@,l2O7*l2O4)kl4(&kl4(&kPmq#kPmq"kPmn!k5Rask5Rarjo7Up
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 0 1 ]
/Size [64 ]
>>
]
/Bounds []
/Encode [1 0 ]
>>
>>/Gradient add_res /2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[6.18299 10.7093 -10.7093 6.18299 323.054 396.04 ]ct
clp
/2 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 4 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~jQ5LbjlPUcjlY^fk2tggk2tggk3(pjkND$kkNM-nkih6okiq?rl07Hsl0@R!lK[["lKdd%lg*m&lg*m&
lg*m&lg*m&lg*m&lg*m&lg*p(m-O**m-O**m-O**m-O**m-O-,mHs<.mHs<.mHs?0mdBN2mdBN2mdBQ4
n*f`6n*f`6n*f`7nF5r:nF5r:nF5r:nF5r;naZ/>naZ/>naZ/?o()ABo()ACoCMSFoCMSFoCMSFoCMSG
o^qeJo^qeJo^qeJo^qeJo^qeJo^qeJp%A"Np%A"Np%A"Np%A"Np%A"Np%A"Np%A"Np@e4Rp@e4Rp@e4R
~>
255 <~5X@\%5s[e&5sdn)6:4+-6UO4.6UX=16psF26q'O577Ka97Rfj:7Ros=7n?0A84Z9B84cBE8P)KF8P)KF
8P)NH8kM]J8kM]J8kM]J8kM`L91qoN91qoN91qoN91qrP9MA,R9MA,R9MA/T9he>V9he>V9he>V9heAX
:/4PZ:/4P[:JXb^:JXb^:JXb_:f'tc;,L1f;,L1g;GpCj;GpCj;GpCk;c?Un;c?Un;c?Uo<)cgr<)cgs
<E3%!<E3%!<`W7%<`W7%<`W7%='&I)='&I)='&I)=BJ[-=BJ[-=BJ[-=BJ[-=]nm1=]nm1=]nm1=]nm1
~>
<~-RU8h-R^Ak-n-So.4H\p.4Qes.P!#".k<,#.kE5&/1`>'/1iG*/M8Y./hSb//h\k20/"t30/,(60JP::
0ekF=1,:XA1G^jE1c.'I2)R9M2E!KQ2`EZS2`E]U3&ioY3B9,]3]]>a4$,Pe4?P_g4?Pbi4Zttm5!D1q
5<h@t5X7S#5s[e&5s[e'6:+"+6UO4/6psF26psF377BX77Rfj:7Rfj;7n6'>7n6'?84Z9C8P)KF8P)KG
8kM]J91qoN91qoN9MA,R9he>V9he>V:/4PZ:JXb^:JXb^:f'tb:f'tb;,L1f;,L1f;GpCj;GpCj;c?Un
~>
]
>>
0 0 1 0 []true true []
/DeviceCMYK
GenStrips
} /Gradient add_res /2 /Gradient get_res exec grestore
}if
np
259.754 395.207 mo
256.357 395.207 253.585 397.979 253.585 401.403 cv
253.585 404.801 256.357 407.572 259.754 407.572 cv
263.178 407.572 265.95 404.801 265.95 401.403 cv
265.95 400.996 265.923 400.588 265.814 400.208 cv
265.352 397.762 263.45 395.859 261.031 395.344 cv
261.004 395.344 li
260.596 395.262 260.188 395.207 259.754 395.207 cv
cp
level3{
gsave
clp
[6.18196 10.7075 -10.7075 6.18196 256.669 396.039 ]ct
/2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[6.18196 10.7075 -10.7075 6.18196 256.669 396.039 ]ct
clp
/2 /Gradient get_res exec grestore
}if
np
296.147 393.686 mo
292.723 393.686 li
320.084 400.208 li
320.546 397.762 322.449 395.859 324.868 395.344 cv
296.147 388.468 li
296.147 393.686 li
cp
.177035 .122347 .126802 0 cmyk
f
289.915 388.413 mo
261.031 395.344 li
263.45 395.859 265.352 397.762 265.814 400.208 cv
293.203 393.686 li
289.915 393.686 li
289.915 388.413 li
cp
f
288.497 393.097 mo
288.497 397.08 li
290.981 397.08 li
294.842 397.08 li
297.429 397.08 li
297.429 393.138 li
297.429 323.419 li
288.497 323.419 li
288.497 393.097 li
cp
f
288.497 326.963 mo
288.497 327.235 li
290.981 327.235 li
294.842 327.235 li
297.429 327.235 li
297.429 326.966 li
297.429 323.419 li
288.497 323.419 li
288.497 326.963 li
cp
.270329 .200107 .198642 0 cmyk
f
282.994 315.062 mo
282.994 323.419 li
288.497 323.419 li
297.429 323.419 li
302.952 323.419 li
302.952 315.062 li
282.994 315.062 li
cp
level3{
gsave
clp
[8.60816 14.9098 -14.9098 8.60816 288.669 311.785 ]ct
/2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[8.60816 14.9098 -14.9098 8.60816 288.669 311.785 ]ct
clp
/2 /Gradient get_res exec grestore
}if
np
303.117 280.568 mo
303.117 305.104 li
312.356 305.104 li
312.356 280.568 li
303.117 280.568 li
cp
.177035 .122347 .126802 0 cmyk
f
257.492 308.389 mo
257.492 311.776 li
257.492 313.583 258.971 315.062 260.777 315.062 cv
282.994 315.062 li
302.952 315.062 li
325.169 315.062 li
326.976 315.062 328.454 313.583 328.454 311.776 cv
328.454 308.389 li
328.454 306.562 326.976 305.104 325.169 305.104 cv
312.356 305.104 li
303.117 305.104 li
260.777 305.104 li
258.971 305.104 257.492 306.562 257.492 308.389 cv
cp
.70602 .623011 0 0 cmyk
f
284.37 251.638 mo
284.37 274.717 li
284.37 277.961 286.998 280.568 290.222 280.568 cv
303.117 280.568 li
312.356 280.568 li
324.019 280.568 li
327.263 280.568 329.871 277.961 329.871 274.717 cv
329.871 251.638 li
329.871 248.393 327.263 245.786 324.019 245.786 cv
290.222 245.786 li
286.998 245.786 284.37 248.393 284.37 251.638 cv
cp
f
232.711 267.53 mo
238.337 267.53 li
249.014 267.53 li
249.014 270.979 li
215.463 270.979 li
215.463 267.53 li
216.592 267.53 217.229 267.53 217.229 267.53 cv
232.711 267.53 li
cp
.270329 .200107 .198642 0 cmyk
f
214.437 254.02 mo
217.229 267.53 li
217.229 267.53 216.592 267.53 215.463 267.53 cv
205.895 221.331 li
207.044 221.331 207.681 221.331 207.681 221.331 cv
214.437 254.02 li
cp
f
215.463 267.53 mo
215.463 270.979 li
154.788 270.979 li
154.788 267.53 li
214.786 267.53 li
215.463 267.53 li
cp
.177035 .122347 .126802 0 cmyk
f
205.895 221.331 mo
215.463 267.53 li
214.786 267.53 li
154.788 267.53 li
145.22 221.331 li
204.601 221.331 li
205.094 221.331 205.525 221.331 205.895 221.331 cv
cp
f
239.281 392.686 mo
239.343 393.733 li
226.223 397.922 219.241 393.733 219.241 393.733 cv
219.241 393.733 213.184 371.509 208.502 347.239 cv
224.847 319.479 li
224.847 319.479 226.592 318.862 229.692 317.918 cv
239.281 392.686 li
cp
.296422 .289555 .457801 .00299077 cmyk
f
239.343 393.733 mo
240.144 407.572 li
203.677 407.572 li
189.982 407.572 219.241 393.733 219.241 393.733 cv
219.241 393.733 226.223 397.922 239.343 393.733 cv
cp
level3{
gsave
clp
[11.4693 19.8654 -19.8654 11.4693 216.561 394.701 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[11.4693 19.8654 -19.8654 11.4693 216.561 394.701 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
177.826 396.136 mo
175.28 407.572 li
139.676 407.572 li
125.98 407.572 155.24 393.733 155.24 393.733 cv
155.24 393.733 163.104 398.477 177.826 396.136 cv
cp
level3{
gsave
clp
[11.2537 19.492 -19.492 11.2537 152.971 394.463 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[11.2537 19.492 -19.492 11.2537 152.971 394.463 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
208.502 347.239 mo
177.826 396.136 li
163.104 398.477 155.24 393.733 155.24 393.733 cv
155.24 393.733 199.345 313.236 203.739 304.469 cv
207.702 296.522 251.991 282.827 260.533 280.24 cv
269.608 280.24 282.647 281.308 291.743 284.859 cv
297.554 287.098 301.743 290.362 302.297 294.982 cv
298.231 304.099 288.951 307.056 271.867 308.986 cv
253.798 311.019 237.495 315.516 229.692 317.918 cv
226.592 318.862 224.847 319.479 224.847 319.479 cv
208.502 347.239 li
cp
.23563 .222141 .363989 0 cmyk
f
262.237 179.854 mo
264.188 189.648 263.88 195.665 263.88 195.665 cv
261.087 194.843 258.315 188.067 258.315 188.067 cv
259.465 186.425 259.65 182.462 257.33 180.881 cv
255.605 179.71 254.558 180.901 254.024 181.866 cv
254.024 181.866 255.893 186.671 254.784 187.041 cv
253.675 187.431 252.34 182.811 250.698 182.277 cv
249.055 181.743 245.174 180.511 244.004 178.438 cv
240.965 181.312 235.175 183.509 231.027 182.914 cv
228.666 182.564 226.818 181.292 226.325 178.704 cv
226.325 178.704 229.692 172.914 237.125 167.924 cv
244.209 163.161 252.998 163.305 259.014 172.031 cv
259.157 172.236 259.28 172.442 259.424 172.647 cv
260.779 174.906 261.724 177.616 262.237 179.854 cv
cp
level3{
gsave
clp
[18.7253 32.4332 -32.4332 18.7253 237.918 167.409 ]ct
/2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[18.7253 32.4332 -32.4332 18.7253 237.918 167.409 ]ct
clp
/2 /Gradient get_res exec grestore
}if
np
296.363 256.011 mo
291.312 256.565 li
288.951 245.56 285.542 229.646 285.316 228.517 cv
289.833 239.749 296.363 256.011 296.363 256.011 cv
cp
.924163 1 .23505 .118563 cmyk
f
304.884 277.283 mo
305.007 284.941 304.248 290.65 302.297 294.982 cv
301.743 290.362 297.554 287.098 291.743 284.859 cv
293.365 281.349 293.919 276.38 293.591 270.795 cv
297.226 270.897 301.003 271.041 304.412 270.938 cv
304.617 273.095 304.782 275.229 304.884 277.283 cv
cp
f
288.91 270.672 mo
289.607 270.692 290.306 270.713 290.983 270.733 cv
291.846 270.754 292.708 270.774 293.591 270.795 cv
293.919 276.38 293.365 281.349 291.743 284.859 cv
282.647 281.308 269.608 280.24 260.533 280.24 cv
259.999 278.433 258.747 274.306 257.248 269.173 cv
260.759 269.583 263.941 268.352 263.941 268.352 cv
263.941 268.352 277.883 270.281 288.91 270.672 cv
cp
level3{
gsave
clp
[15.4166 26.7023 -26.7023 15.4166 269.361 262.179 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[15.4166 26.7023 -26.7023 15.4166 269.361 262.179 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
304.412 270.938 mo
301.003 271.041 297.226 270.897 293.591 270.795 cv
292.708 270.774 291.846 270.754 290.983 270.733 cv
290.306 270.713 289.607 270.692 288.91 270.672 cv
289.3 263.197 286.199 258.208 285.501 257.202 cv
265.913 259.357 li
265.913 259.357 258.644 257.469 253.613 256.853 cv
250.144 245.169 246.755 233.691 246.755 233.691 cv
237.228 258.413 li
235.626 262.746 234.313 265.641 232.711 267.53 cv
217.229 267.53 li
214.437 254.02 li
217.989 253.608 220.268 253.362 220.268 253.362 cv
223.061 243.26 230.945 218.374 232.444 212.646 cv
233.594 208.333 237.598 204.986 243.696 202.708 cv
244.024 202.851 244.394 203.015 244.764 203.18 cv
249.158 201.763 li
249.158 201.763 250.123 203.816 250.882 205.458 cv
252.238 208.313 258.233 207.964 261.868 206.465 cv
265.338 205.048 266.652 202.173 265.995 200.695 cv
265.974 200.633 265.954 200.572 265.913 200.51 cv
265.708 200.018 265.502 199.525 265.297 199.052 cv
275.481 198.375 285.994 198.724 291.271 202.255 cv
291.312 202.194 li
301.743 208.457 317.204 258.105 316.506 265.189 cv
316.075 269.48 310.921 270.692 304.412 270.938 cv
cp
285.316 228.517 mo
285.542 229.646 288.951 245.56 291.312 256.565 cv
296.363 256.011 li
296.363 256.011 289.833 239.749 285.316 228.517 cv
cp
level3{
gsave
clp
[46.4812 80.5079 -80.5079 46.4812 238.204 205.377 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[46.4812 80.5079 -80.5079 46.4812 238.204 205.377 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
253.613 256.853 mo
258.644 257.469 265.913 259.357 265.913 259.357 cv
285.501 257.202 li
286.199 258.208 289.3 263.197 288.91 270.672 cv
277.883 270.281 263.941 268.352 263.941 268.352 cv
263.941 268.352 260.759 269.583 257.248 269.173 cv
256.755 269.111 256.283 269.028 255.79 268.905 cv
251.786 267.899 250.205 265.415 249.137 265.374 cv
248.049 265.313 243.47 266.134 240.657 266.832 cv
239.815 267.058 239.015 267.14 238.337 267.14 cv
236.756 267.14 235.832 266.605 236.427 265.764 cv
237.29 264.573 238.727 261.862 240.247 261.041 cv
241.787 260.22 246.961 256.791 250.595 256.647 cv
251.396 256.606 252.443 256.688 253.613 256.853 cv
cp
0 .255863 .275639 0 cmyk
f
265.297 199.052 mo
265.502 199.525 265.708 200.018 265.913 200.51 cv
265.954 200.572 265.974 200.633 265.995 200.695 cv
266.652 202.173 265.338 205.048 261.868 206.465 cv
258.233 207.964 252.238 208.313 250.882 205.458 cv
250.123 203.816 249.158 201.763 249.158 201.763 cv
244.764 203.18 li
244.394 203.015 244.024 202.851 243.696 202.708 cv
237.967 200.079 236.222 197.656 233.306 191.722 cv
233.265 191.62 233.204 191.517 233.163 191.414 cv
232.115 189.279 231.13 186.404 231.027 182.914 cv
235.175 183.509 240.965 181.312 244.004 178.438 cv
245.174 180.511 249.055 181.743 250.698 182.277 cv
252.34 182.811 253.675 187.431 254.784 187.041 cv
255.893 186.671 254.024 181.866 254.024 181.866 cv
254.558 180.901 255.605 179.71 257.33 180.881 cv
259.65 182.462 259.465 186.425 258.315 188.067 cv
258.315 188.067 261.087 194.843 263.88 195.665 cv
263.88 195.665 264.517 197.205 265.297 199.052 cv
cp
f
89.0107 279.727 mo
89.0107 410.768 li
82.4199 410.768 li
82.4199 279.727 li
89.0107 279.727 li
cp
.177035 .122347 .126802 0 cmyk
f
348.486 279.727 mo
348.486 410.768 li
341.915 410.768 li
341.915 279.727 li
348.486 279.727 li
cp
f
89.0107 279.727 mo
89.0107 286.76 li
82.4199 286.76 li
82.4199 279.727 li
89.0107 279.727 li
cp
.270329 .200107 .198642 0 cmyk
f
348.486 279.727 mo
348.486 286.76 li
341.915 286.76 li
341.915 279.727 li
348.486 279.727 li
cp
f
361.155 270.979 mo
361.155 279.727 li
348.486 279.727 li
341.915 279.727 li
89.0107 279.727 li
82.4199 279.727 li
69.7715 279.727 li
69.7715 270.979 li
226.52 270.979 li
260.071 270.979 li
320.746 270.979 li
361.155 270.979 li
cp
.0433661 .0238956 .0283818 0 cmyk
f
557.382 405.034 mo
686.082 405.034 li
688.675 405.034 690.797 402.912 690.797 400.319 cv
690.797 400.319 li
690.797 397.727 688.675 395.604 686.082 395.604 cv
557.382 395.604 li
554.789 395.604 552.667 397.727 552.667 400.319 cv
552.667 400.319 li
552.667 402.912 554.789 405.034 557.382 405.034 cv
cp
f
695.843 414.448 mo
395.369 414.448 li
393.593 414.448 392.14 412.995 392.14 411.219 cv
392.14 410.799 li
392.14 409.022 393.593 407.569 395.369 407.569 cv
695.843 407.569 li
697.619 407.569 699.072 409.022 699.072 410.799 cv
699.072 411.219 li
699.072 412.995 697.619 414.448 695.843 414.448 cv
cp
f
633.406 132.477 mo
635.792 131.575 638.458 131.074 641.045 130.793 cv
641.045 130.813 li
641.025 130.833 li
640.864 133.279 643.992 134.221 647.34 134.081 cv
651.39 133.9 653.436 132.978 654.157 131.314 cv
654.177 131.314 654.177 131.314 654.177 131.314 cv
654.137 131.033 654.097 130.753 654.057 130.472 cv
659.891 130.712 667.51 131.475 670.357 133.84 cv
674.728 137.429 685.976 179.212 685.976 179.212 cv
687.54 184.305 688.823 188.395 689.625 190.52 cv
690.146 191.883 690.206 194.089 689.965 196.815 cv
690.286 210.409 681.304 239.861 681.304 239.861 cv
677.054 245.295 li
674.187 245.495 668.031 244.052 666.006 242.648 cv
666.086 242.267 666.167 241.726 666.267 241.084 cv
667.169 235.892 669.314 223.16 670.958 212.333 cv
672.242 203.772 673.204 196.375 672.983 194.811 cv
672.803 193.607 671.5 189.738 669.755 184.866 cv
669.755 184.846 669.755 184.846 669.755 184.846 cv
666.227 175.082 660.874 161.328 659.209 157.078 cv
659.55 158.982 667.67 204.695 667.951 214.579 cv
668.232 224.684 664.482 241.325 664.482 241.325 cv
664.482 241.345 li
645.877 243.651 624.163 241.004 624.163 241.004 cv
624.163 240.964 li
622.138 232.483 li
626.629 176.004 li
628.935 146.933 li
628.494 148.777 621.396 178.189 618.449 185.688 cv
615.502 193.187 595.453 207.622 594.209 208.524 cv
594.169 208.544 594.149 208.564 594.149 208.564 cv
587.974 212.534 582.942 215.682 582.42 215.782 cv
581.037 216.083 577.568 216.203 577.568 216.203 cv
572.275 207.361 li
583.804 198.54 603.232 182.42 603.232 182.42 cv
603.232 182.42 607.883 173.398 612.154 165.157 cv
619.352 151.303 623.321 140.958 628.073 135.845 cv
628.253 135.645 628.454 135.444 628.654 135.244 cv
629.958 134.061 631.582 133.159 633.406 132.477 cv
cp
level3{
gsave
clp
[59.8886 103.73 -103.73 59.8886 607.808 146.967 ]ct
/3 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~#nS$U#nS$U#nS$U#nS$U#nS$U#nS$U#nS'V#nS'V#nS'V#n\-W#n\-W#n\-W$5"6X$5"9Y$5"9Y$5+?Z
$5+B[$5+B[$5+B[$5+E\$5+E\$54K]$54N^$54N^$54Q_$PX`a$PX`a$PXcb$Paic$Pald$Paoe$Pjuf
$l1,h$l:2i$l:5j$l:8k$lC>l%2^Jn%2^Mo%2gSp%2p\r%N6es%N?nu%N?r!%N?u"%id2%%id2%%im;'
&03G)&0<P+&0<S,&K`e/&Kik0&Kin1&g9+4&g9.5&g916&gB:8'-fL;'-oU='-oX>'.#a@'I>mB'IH!D
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 0 1 ]
/Size [64 ]
>>
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~'IH!D'IH!D'IH!D'IH!D'IH!D'IH!D'IH!D'IH!D'IH!D'IH!D'IH!D'IH!D'IH!D'IH!D'IH!D'IH!D
'IH!D'IH!D'IH!D'IH!D'IH!D'IH!D'IH!D'IH!D'IH!D'IH!D'IH!D'IH!D'IH!D'IH!D'IH!D'IH!D
'IH!D'IH!D'IH!D'IH!D'IH!D'IH!D'IH!D'IH!D'IH!D'IH!D'IH!D'IH!D'IH!D'IH!D'IH!D'IH!D
'IH!D'IH!D'IH!D'IH!D'IH!D'IH!D'IH!D'IH!D'IH!D'IH!D'IH!D'IH!D'IH!D'IH!D'IH!D'IH!D
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 0 1 ]
/Size [64 ]
>>
]
/Bounds [.967337 ]
/Encode [0 1 0 1 ]
>>
>>/Gradient add_res /3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[59.8886 103.73 -103.73 59.8886 607.808 146.967 ]ct
clp
/3 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 4 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~#RC\A#RC\A#RC\A#RC\A#RC\A#RC\A#RC\A#RC\A#RC\A#RC\A#RC\A#mgnE#mgnE#mgnE#mgnE#mgnE
#mgnE#mgnE#mgnE#mgnE#mgnE#mgnE#mgnE#mgnF$47+I$47+I$47+I$47+I$47+I$47+I$47.K$O[=M
$O[=M$O[=M$O[=M$O[@O$k*OQ$k*OQ$k*OQ$k*RS%1NaU%1NaU%1NaU%1WjX%LrsY%LrsY%M''\%hB0]
%hB0]%hK9`&.fBa&.fBa&.oKd&J5Te&J5Te&J5Te&J>]h&eYfi&eYfi&eYfi',)#m',)#m',)#m',)#m
~>
<~%hB0]%hB0]%hB0]%hB0]%hB0]%hB0]%hB0]%hB0]&.fBa&.fBa&.fBa&.fBa&.fBa&.fBa&J5Te&J5Te
&J5Te&J5Te&J5Te&J5Tf&eYfi&eYfi&eYfi&eYfj',)#m',)#m',)#n'GM5q'GM5q'GM8s'bqGu'bqK"
()@Z$()@Z$()@]&(Ddl((Ddl((Ddo*(`4,.)&X;0)&X>2)B'M4)B'M4)B0V7)]K_8)]Th;*#oq<*$$%?
*??.@*?H7C*ZlIG+!2RH+!;[K+<VdL+<VdL+<_mO+X/*S,9nEX,9nEX,U=W\,U=W\,pai`,pai`,pai`
~>
<~)B'M4)B'M4)B'M4)B'M4)B'M4)]K_8)]K_8)]K_8)]K_8)]K_8)]K_8)]K_8*#oq<*#oq<*#oq=*??.@
*??.@*??.A*Zc@D*Zc@D*Zc@E+!2RH+!2RI+<VdL+<VdL+<VdM+X&!P+X&!Q+sJ6V,9nEX,9nHZ,U=W\
,U=Z^,palb-71&d-71)f-RU;j-n$Jl-n$Mn.4H\p.4H_r.Olr!.k</%/1iG*/M/P+/M8Y./h\k20/,(6
0JP::0etL>1,:U?1,C^B1GgpF1c7-J2)[?N2E*QR2`NcV3B9)[3]];_4$,Mc4?P_g4Ztqk4Ztqk4Ztqk
~>
0 ]
>>
0 0 1 0 []true true []
/DeviceCMYK
GenStrips
} /Gradient add_res /3 /Gradient get_res exec grestore
}if
np
666.006 242.648 mo
668.031 244.052 674.187 245.495 677.054 245.295 cv
676.833 245.917 676.713 246.237 676.713 246.237 cv
676.713 246.237 674.587 254.598 672.843 258.607 cv
670.958 262.979 668.613 265.144 666.167 266.025 cv
663.701 266.908 659.771 267.489 658.067 266.647 cv
656.383 265.825 663.159 255.52 663.641 254.116 cv
664.122 252.713 664.442 249.365 662.277 251.59 cv
660.112 253.815 659.37 257.444 657.104 255.86 cv
656.322 255.319 659.43 249.445 660.212 247.661 cv
660.994 245.856 665.866 243.49 665.866 243.49 cv
665.866 243.49 665.926 243.189 666.006 242.648 cv
cp
0 .255863 .275639 0 cmyk
f
676.071 389.61 mo
676.091 390.813 li
675.67 402.361 li
669.796 402.361 646.959 402.361 642.268 402.361 cv
638.038 402.361 637.998 401.019 639.922 399.153 cv
644.112 395.164 657.465 388.849 657.465 388.849 cv
664.563 390.793 675.49 389.67 676.071 389.61 cv
cp
level3{
gsave
clp
[37.3932 0 0 37.3932 638.698 395.605 ]ct
/2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[37.3932 0 0 37.3932 638.698 395.605 ]ct
clp
/2 /Gradient get_res exec grestore
}if
np
621.136 386.081 mo
621.116 386.081 621.116 386.081 621.116 386.081 cv
621.116 386.081 622.459 340.128 622.459 303.077 cv
622.459 276.853 623.521 255.981 624.163 241.004 cv
624.163 241.004 645.877 243.651 664.482 241.345 cv
665.084 241.265 665.686 241.185 666.267 241.084 cv
666.167 241.726 666.086 242.267 666.006 242.648 cv
665.926 243.189 665.866 243.49 665.866 243.49 cv
665.866 243.49 660.994 245.856 660.212 247.661 cv
659.43 249.445 656.322 255.319 657.104 255.86 cv
659.37 257.444 660.112 253.815 662.277 251.59 cv
664.442 249.365 664.122 252.713 663.641 254.116 cv
663.159 255.52 656.383 265.825 658.067 266.647 cv
659.771 267.489 663.701 266.908 666.167 266.025 cv
668.613 265.144 670.958 262.979 672.843 258.607 cv
676.071 389.61 li
675.49 389.67 664.563 390.793 657.465 388.849 cv
657.465 388.849 652.593 329.903 651.21 312.761 cv
649.827 295.619 649.726 253.014 649.726 253.014 cv
648.483 253.014 li
645.135 253.014 li
639.762 387.906 li
639.762 388.046 li
639.762 388.046 637.075 388.146 630.659 388.046 cv
624.544 387.966 621.437 386.262 621.136 386.081 cv
cp
level3{
gsave
clp
[77.3252 133.931 -133.931 77.3252 607.382 250.693 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[77.3252 133.931 -133.931 77.3252 607.382 250.693 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
669.755 184.866 mo
669.775 185.487 670.337 198.019 670.958 212.333 cv
669.314 223.16 667.169 235.892 666.267 241.084 cv
665.686 241.185 665.084 241.265 664.482 241.345 cv
664.482 241.325 li
664.482 241.325 668.232 224.684 667.951 214.579 cv
667.67 204.695 659.55 158.982 659.209 157.078 cv
660.874 161.328 666.227 175.082 669.755 184.846 cv
669.755 184.846 669.755 184.846 669.755 184.866 cv
cp
.0932937 .136568 .198703 0 cmyk
f
621.998 95.8467 mo
621.978 95.8267 621.938 95.8267 621.898 95.8267 cv
619.853 89.9521 li
619.853 89.9521 624.103 91.456 626.389 91.5161 cv
628.634 91.5561 634.027 86.3633 642.268 88.1279 cv
650.508 89.8921 650.248 92.8594 650.248 92.8594 cv
650.248 92.8594 653.957 92.7993 654.839 94.9043 cv
655.701 97.0098 658.588 106.433 653.876 121.811 cv
653.876 121.811 651.11 119.766 650.147 116.397 cv
651.33 115.154 651.872 113.069 651.39 111.125 cv
650.688 108.337 648.383 107.175 646.198 109.36 cv
646.198 109.36 645.997 115.997 645.456 116.297 cv
644.955 116.598 642.809 110.603 642.007 109.42 cv
641.225 108.237 640.343 109.38 638.158 106.894 cv
635.972 104.388 635.25 102.764 635.25 102.764 cv
635.23 102.724 li
631.141 104.468 627.331 105.33 624.344 105.27 cv
624.143 105.29 623.923 105.29 623.742 105.27 cv
620.474 105.089 617.587 102.142 617.587 102.142 cv
620.013 100.959 li
620.013 100.959 616.284 96.1074 616.284 94.7041 cv
616.284 94.7041 620.494 95.5459 621.898 95.8267 cv
621.918 95.8467 li
621.998 95.8467 li
cp
level3{
gsave
clp
[22.3011 38.6266 -38.6266 22.3011 628.419 85.0063 ]ct
/2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[22.3011 38.6266 -38.6266 22.3011 628.419 85.0063 ]ct
clp
/2 /Gradient get_res exec grestore
}if
np
641.045 130.793 mo
640.283 127.124 li
633.867 127.545 li
633.867 127.545 628.614 121.39 625.687 114.292 cv
625.687 114.292 625.687 114.292 625.687 114.272 cv
624.604 111.205 624.083 108.237 624.344 105.29 cv
624.344 105.27 li
627.331 105.33 631.141 104.468 635.23 102.724 cv
635.25 102.764 li
635.25 102.764 635.972 104.388 638.158 106.894 cv
640.343 109.38 641.225 108.237 642.007 109.42 cv
642.809 110.603 644.955 116.598 645.456 116.297 cv
645.997 115.997 646.198 109.36 646.198 109.36 cv
648.383 107.175 650.688 108.337 651.39 111.125 cv
651.872 113.069 651.33 115.154 650.147 116.397 cv
651.11 119.766 653.876 121.811 653.876 121.811 cv
653.656 124.538 653.636 127.444 654.057 130.472 cv
654.097 130.753 654.137 131.033 654.177 131.314 cv
654.177 131.314 654.177 131.314 654.157 131.314 cv
653.436 132.978 651.39 133.9 647.34 134.081 cv
643.992 134.221 640.864 133.279 641.025 130.833 cv
641.045 130.813 li
641.045 130.793 li
cp
0 .255863 .275639 0 cmyk
f
639.762 388.046 mo
639.361 398.512 li
633.967 398.512 612.936 398.512 608.605 398.512 cv
597.738 398.512 616.584 388.447 621.136 386.081 cv
621.437 386.262 624.544 387.966 630.659 388.046 cv
637.075 388.146 639.762 388.046 639.762 388.046 cv
cp
level3{
gsave
clp
[34.4833 0 0 34.4833 605.278 392.297 ]ct
/2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[34.4833 0 0 34.4833 605.278 392.297 ]ct
clp
/2 /Gradient get_res exec grestore
}if
np
628.935 146.933 mo
626.629 176.004 li
625.226 179.333 620.595 190.139 618.309 192.244 cv
616.665 193.788 604.034 202.188 594.209 208.524 cv
595.453 207.622 615.502 193.187 618.449 185.688 cv
621.396 178.189 628.494 148.777 628.935 146.933 cv
cp
.0932937 .136568 .198703 0 cmyk
f
572.275 207.361 mo
577.568 216.203 li
575.183 217.546 573.719 218.349 573.719 218.349 cv
573.719 218.349 566.642 222.038 562.792 223.321 cv
558.622 224.704 555.695 224.423 553.569 223.281 cv
551.885 222.378 549.74 220.714 548.717 219.21 cv
570.671 218.349 li
560.928 212.815 li
562.17 212.333 563.434 211.792 561.108 211.692 cv
560.466 211.672 559.825 211.732 559.203 211.833 cv
559.183 211.833 li
557.579 212.053 556.176 212.454 555.454 211.833 cv
555.213 211.612 555.033 211.271 554.973 210.77 cv
554.873 209.908 562.07 207.602 563.774 207.021 cv
565.499 206.459 570.671 208.564 570.671 208.564 cv
571.193 208.184 571.714 207.762 572.275 207.361 cv
cp
0 .255863 .275639 0 cmyk
f
548.717 219.21 mo
532.658 219.832 li
527.465 212.534 li
555.454 211.833 li
556.176 212.454 557.579 212.053 559.183 211.833 cv
559.203 211.833 li
560.928 212.815 li
570.671 218.349 li
548.717 219.21 li
cp
.0833143 .0712596 .138613 0 cmyk
f
435.999 402.005 mo
436.081 402.293 436.102 402.601 436.102 402.909 cv
436.102 405.476 434.007 407.569 431.42 407.569 cv
428.833 407.569 426.739 405.476 426.739 402.909 cv
426.739 400.321 428.833 398.228 431.42 398.228 cv
431.749 398.228 432.057 398.269 432.365 398.33 cv
432.385 398.33 li
434.213 398.72 435.65 400.157 435.999 402.005 cv
cp
.517632 .444068 .306737 .0250553 cmyk
f
481.582 398.228 mo
484.149 398.228 486.243 400.321 486.243 402.909 cv
486.243 405.476 484.149 407.569 481.582 407.569 cv
478.995 407.569 476.901 405.476 476.901 402.909 cv
476.901 402.601 476.921 402.293 477.003 402.005 cv
477.353 400.157 478.79 398.72 480.617 398.33 cv
480.638 398.33 li
480.946 398.269 481.254 398.228 481.582 398.228 cv
cp
f
451.974 397.077 mo
454.561 397.077 li
435.999 402.005 li
435.65 400.157 434.213 398.72 432.385 398.33 cv
451.974 393.135 li
451.974 397.077 li
cp
.177035 .122347 .126802 0 cmyk
f
460.906 393.094 mo
480.617 398.33 li
478.79 398.72 477.353 400.157 477.003 402.005 cv
458.421 397.077 li
460.906 397.077 li
460.906 393.094 li
cp
f
460.906 393.094 mo
460.906 397.077 li
458.421 397.077 li
454.561 397.077 li
451.974 397.077 li
451.974 393.135 li
451.974 344.382 li
460.906 344.382 li
460.906 393.094 li
cp
f
460.906 347.927 mo
460.906 348.198 li
458.421 348.198 li
454.561 348.198 li
451.974 348.198 li
451.974 347.93 li
451.974 344.382 li
460.906 344.382 li
460.906 347.927 li
cp
.270329 .200107 .198642 0 cmyk
f
466.408 336.025 mo
466.408 344.382 li
460.906 344.382 li
451.974 344.382 li
446.45 344.382 li
446.45 336.025 li
466.408 336.025 li
cp
.517632 .444068 .306737 .0250553 cmyk
f
446.286 280.565 mo
446.286 326.066 li
437.046 326.066 li
437.046 280.565 li
446.286 280.565 li
cp
.177035 .122347 .126802 0 cmyk
f
491.91 329.352 mo
491.91 332.739 li
491.91 334.547 490.432 336.025 488.625 336.025 cv
466.408 336.025 li
446.45 336.025 li
424.234 336.025 li
422.427 336.025 420.948 334.547 420.948 332.739 cv
420.948 329.352 li
420.948 327.524 422.427 326.066 424.234 326.066 cv
437.046 326.066 li
446.286 326.066 li
488.625 326.066 li
490.432 326.066 491.91 327.524 491.91 329.352 cv
cp
level3{
gsave
clp
[20.8495 36.1125 -36.1125 20.8495 446.006 312.987 ]ct
/4 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~"=q:g">.Ch">7Fh">@Ih">RRi">d[j"#[[j"#d^j"#mdk"$*pm!]mjl!^+!n!^4$n!^=*o!^O3p!^X6p
!^j?q!_'Ks!CjEr!D'Ns!D0Qs!DBZt!DK]t!)B`u!)Kg!!)Tj!!)fs"!)p!"!*$$"!*6-#!*?0#!*Q9$
!*Z<$!*lE%!*uH%!+)K%!+;T&!+DW&!+MZ&!+_c'!+hc&!,%l'!,.r(!,A&)!,J))!,S,)!,e5*!,n5)
!-+>*!-4A*!-FJ+!-OM+!-XP+!-jY,!-s\,!.'_,!.9h-!.Kq.!.Tq-!.g%.!.p%-!/$%,!/6.-!/?1-
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 0 1 ]
/Size [64 ]
>>
]
/Bounds []
/Encode [0 1 ]
>>
>>/Gradient add_res /4 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[20.8495 36.1125 -36.1125 20.8495 446.006 312.987 ]ct
clp
/4 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 4 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s/N*!WiE)!WiE)!WiE)!W`<&!<E3%!<E3%!<E3%!<E3%!<E3%
!<E3%!<E3%!<E0#zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz!!!!!~>
<~.P!##/1iG*/M8Y./h\k30JP:;1,C^C1c7-J2)[?N2E*QS3&ruZ3BB2_4$5Vf4?Yhj4[)%o5<qJ!5X@\&
6:+%,6psI477B[87n6*@84Z<D8kM`L91qrP9heAX:/4S\:JXe`;,L4h;GpFl;c?Xp<E3(#<`W:'=BJ^/
=]nm2>$G39>[1N>?!U`B?=.&I?smAN@:<SR@UinYA7T4^AS,OeB4kjjBPD0qC2.L!CMR^%Ci+$,DJj?1
Df9T6EH,u<EcQ5BFEDVHF`hhLG'8(RG^+IXH$O[\H?spbI!g?jIXZ`pIt*!!JUrB'JqAT+K7ei1KnY57
~>
<~^qdb$^q[Y!^V7Fr^:h4n]tD"j]Xtef]=PSb]",A^\[f8]\[f8]\[]/Z\@B&Y\@8rV\$riU\$i`R[^ENN
[C*BK['[3I['[0GZa6sCZEga?Z*CO;Yct=7YHP.5YHP.5YHP+3Y-+n/Xf\\+XK8J'X/i8#WiE%tWMuhp
W2QYmVl-GiVP^5eV5:#aUnjf]USFTYU8"BUTqS0QTV%jJSt;OESXl=BSXl=AS=H+=S"#n9R[T\5R@'A.
Q^=&*QBmi&Q'IW"Pa%DsPEV2oP*1ukOcbcgOH>QcO,o?_NfK-[NK&mUMi3LOMMd7ILkphAL5(G;KnY57
~>
0 ]
>>
0 0 1 0 []true true []
/DeviceCMYK
GenStrips
} /Gradient add_res /4 /Gradient get_res exec grestore
}if
np
465.033 251.635 mo
465.033 274.714 li
465.033 277.958 462.404 280.565 459.181 280.565 cv
446.286 280.565 li
437.046 280.565 li
425.384 280.565 li
422.139 280.565 419.532 277.958 419.532 274.714 cv
419.532 251.635 li
419.532 248.39 422.139 245.783 425.384 245.783 cv
459.181 245.783 li
462.404 245.783 465.033 248.39 465.033 251.635 cv
cp
level3{
gsave
clp
[24.2985 42.0862 -42.0862 24.2985 430.13 242.13 ]ct
/4 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[24.2985 42.0862 -42.0862 24.2985 430.13 242.13 ]ct
clp
/4 /Gradient get_res exec grestore
}if
np
517.526 304.199 mo
518.984 304.404 520.298 304.63 521.448 304.835 cv
511.428 305.226 507.013 316.56 506.479 324.876 cv
506.479 324.876 472.148 327.463 451.964 326.066 cv
447.673 325.759 439.316 324.198 438.782 297.136 cv
439.562 297.218 447.673 298.039 458.268 297.136 cv
469.417 296.171 479.848 294.815 479.848 294.815 cv
485.495 296.171 502.681 300.318 517.526 304.199 cv
cp
level3{
gsave
clp
[28.9361 50.1187 -50.1187 28.9361 464.727 282.156 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[28.9361 50.1187 -50.1187 28.9361 464.727 282.156 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
557.36 403.155 mo
559.537 403.155 560.954 401.513 561.734 400.239 cv
566.805 403.689 571.836 407.569 568.756 407.569 cv
564.054 407.569 542.987 407.569 535.801 407.569 cv
535.636 403.155 li
540.461 403.155 554.444 403.155 557.36 403.155 cv
cp
level3{
gsave
clp
[10.3162 17.8681 -17.8681 10.3162 546.708 396.763 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[10.3162 17.8681 -17.8681 10.3162 546.708 396.763 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
527.772 306.95 mo
534.712 308.86 539.928 310.503 541.324 311.365 cv
546.416 314.548 553.644 395.045 553.644 395.045 cv
553.644 395.045 557.689 397.509 561.734 400.239 cv
560.954 401.513 559.537 403.155 557.36 403.155 cv
554.444 403.155 540.461 403.155 535.636 403.155 cv
535.411 396.872 li
535.411 396.872 528.429 356.907 525.534 339.167 cv
531.242 321.837 532.474 310.913 527.772 306.95 cv
cp
.0191043 .320897 .326787 0 cmyk
f
522.413 265.597 mo
526.129 265.885 528.717 266.069 528.717 266.069 cv
539.25 264.345 li
539.25 264.345 546.129 266.274 547.771 266.87 cv
549.394 267.486 553.685 273.174 553.171 273.666 cv
552.063 274.673 547.135 271.1 546.313 270.792 cv
545.492 270.483 542.125 270.463 541.776 270.463 cv
540.605 270.524 538.059 271.243 537.997 271.88 cv
537.915 272.517 545.882 272.804 545.615 275.35 cv
545.451 276.993 538.983 276.91 537.238 277.014 cv
535.985 277.075 529.928 279.005 525.308 274.98 cv
524.61 275.063 523.706 275.186 522.66 275.309 cv
522.352 274.467 522.166 273.604 522.043 272.783 cv
521.51 269.006 522.413 265.617 522.413 265.617 cv
522.413 265.597 li
cp
0 .255863 .275639 0 cmyk
f
522.043 272.783 mo
503.071 273.748 li
506.254 270.915 508.04 266.706 508.225 266.645 cv
508.533 266.521 513.502 265.392 514.364 265.392 cv
515.227 265.392 521.448 267.507 521.448 266.521 cv
521.448 266.315 521.12 265.946 520.606 265.474 cv
521.243 265.515 521.838 265.576 522.413 265.597 cv
522.413 265.617 li
522.413 265.617 521.51 269.006 522.043 272.783 cv
cp
level3{
gsave
clp
[6.11329 10.5885 -10.5885 6.11329 510.301 265.445 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[6.11329 10.5885 -10.5885 6.11329 510.301 265.445 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
523.747 344.423 mo
515.555 367.645 505.042 395.045 505.042 395.045 cv
505.042 395.045 507.588 396.687 510.586 398.781 cv
510.586 398.781 509.026 403.155 505.494 403.155 cv
501.962 403.155 482.107 403.155 482.107 403.155 cv
506.479 324.876 li
507.013 316.56 511.428 305.226 521.448 304.835 cv
523.07 305.123 524.343 305.39 525.185 305.615 cv
526.191 305.903 527.054 306.334 527.772 306.95 cv
532.474 310.913 531.242 321.837 525.534 339.167 cv
524.98 340.851 524.384 342.616 523.747 344.423 cv
cp
0 .255863 .275639 0 cmyk
f
480.793 407.569 mo
482.107 403.155 li
482.107 403.155 501.962 403.155 505.494 403.155 cv
509.026 403.155 510.586 398.781 510.586 398.781 cv
515.884 402.457 522.557 407.569 519.025 407.569 cv
513.502 407.569 480.793 407.569 480.793 407.569 cv
cp
level3{
gsave
clp
[11.2688 19.5182 -19.5182 11.2688 494.084 396.24 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[11.2688 19.5182 -19.5182 11.2688 494.084 396.24 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
499.889 263.995 mo
503.707 261.799 li
503.707 261.799 511.141 261.183 512.886 261.183 cv
514.241 261.183 518.738 263.852 520.606 265.474 cv
521.12 265.946 521.448 266.315 521.448 266.521 cv
521.448 267.507 515.227 265.392 514.364 265.392 cv
513.502 265.392 508.533 266.521 508.225 266.645 cv
508.04 266.706 506.254 270.915 503.071 273.748 cv
500.853 275.74 497.958 277.055 494.447 275.884 cv
494.447 275.884 492.764 275.986 489.93 276.15 cv
488.862 269.744 489.93 266.521 489.93 266.521 cv
494.447 267.116 li
499.889 263.995 li
cp
0 .255863 .275639 0 cmyk
f
461.738 277.198 mo
452.909 277.342 444.06 277.239 437.674 276.603 cv
432.54 276.089 428.988 275.227 428.311 273.872 cv
425.518 268.246 426.853 228.802 427.202 220.055 cv
427.222 220.055 li
427.346 218.618 428.146 212.725 432.992 210.897 cv
436.072 209.727 441.616 208.618 448.207 208.002 cv
449.624 208.68 451.102 209.131 452.56 209.46 cv
455.394 215.456 460.362 235.742 461.451 238.925 cv
461.902 240.3 461.964 250.669 461.882 262.086 cv
446.482 259.108 li
444.285 234.797 li
444.265 234.797 li
443.033 260.382 li
461.882 262.846 li
475.68 264.652 li
479.437 265.146 li
487.24 266.172 li
489.93 266.521 li
489.93 266.521 488.862 269.744 489.93 276.15 cv
487.938 276.274 485.372 276.397 482.415 276.541 cv
481.717 276.582 480.998 276.603 480.279 276.644 cv
479.109 276.685 477.918 276.746 476.665 276.787 cv
472.046 276.973 466.892 277.137 461.738 277.198 cv
cp
level3{
gsave
clp
[42.5401 73.6816 -73.6816 42.5401 426.86 214.322 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[42.5401 73.6816 -73.6816 42.5401 426.86 214.322 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
482.415 276.541 mo
485.372 276.397 487.938 276.274 489.93 276.15 cv
492.764 275.986 494.447 275.884 494.447 275.884 cv
497.958 277.055 500.853 275.74 503.071 273.748 cv
522.043 272.783 li
522.166 273.604 522.352 274.467 522.66 275.309 cv
512.557 276.582 488.185 279.478 484.694 278.43 cv
484.119 278.266 483.01 277.731 482.415 276.541 cv
cp
.924163 1 .23505 .118563 cmyk
f
478.863 178.065 mo
478.863 178.065 483.01 183.013 482.25 187.633 cv
479.889 195.374 471.861 206.01 470.095 205.785 cv
469.007 205.661 466.933 205.209 465.516 204.881 cv
464.633 204.676 463.997 204.511 463.997 204.511 cv
462.333 204.45 li
462.621 198.988 463.463 192.212 463.997 190.918 cv
464.736 189.112 476.953 182.007 478.863 178.065 cv
cp
0 .255863 .275639 0 cmyk
f
477.959 292.352 mo
477.959 292.352 477.343 285.021 476.665 276.787 cv
477.918 276.746 479.109 276.685 480.279 276.644 cv
480.978 285.186 481.635 292.352 481.635 292.352 cv
479.664 292.352 li
477.959 292.352 li
cp
level3{
gsave
clp
[7.98165 13.8246 -13.8246 7.98165 475.167 277.652 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[7.98165 13.8246 -13.8246 7.98165 475.167 277.652 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
482.744 239.643 mo
485.536 251.963 487.24 266.172 487.24 266.172 cv
479.437 265.146 li
478.924 257.712 478.616 251.183 478.965 249.294 cv
480.279 245.885 481.696 241.82 481.635 239.992 cv
481.553 236.933 478.267 223.915 477.61 221.328 cv
477.897 222.046 480.136 228.104 482.744 239.643 cv
cp
.924163 1 .23505 .118563 cmyk
f
474.9 254.57 mo
474.838 252.456 476.399 239.787 476.255 237.734 cv
476.111 235.68 469.869 213.094 468.74 208.166 cv
477.364 209.563 481.286 213.176 482.826 218.33 cv
484.673 224.49 495.577 263.688 495.577 263.688 cv
495.577 263.688 497.281 263.79 499.889 263.995 cv
494.447 267.116 li
489.93 266.521 li
487.24 266.172 li
487.24 266.172 485.536 251.963 482.744 239.643 cv
480.136 228.104 477.897 222.046 477.61 221.328 cv
478.267 223.915 481.553 236.933 481.635 239.992 cv
481.696 241.82 480.279 245.885 478.965 249.294 cv
478.616 251.183 478.924 257.712 479.437 265.146 cv
475.68 264.652 li
475.249 259.375 474.92 255.248 474.9 254.57 cv
cp
level3{
gsave
clp
[31.9618 55.3595 -55.3595 31.9618 462.362 211.848 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[31.9618 55.3595 -55.3595 31.9618 462.362 211.848 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
448.207 208.002 mo
445.805 206.873 443.628 205.168 442.129 202.602 cv
442.129 202.602 442.026 183.383 448.186 173.404 cv
454.346 163.425 460.28 164.575 462.19 164.801 cv
462.19 164.801 468.678 162.254 474.633 164.636 cv
480.567 167.018 485.249 173.609 485.454 179.769 cv
485.659 185.929 479.191 208.659 479.191 208.659 cv
479.191 208.659 470.136 208.043 465.516 206.339 cv
465.516 204.881 li
466.933 205.209 469.007 205.661 470.095 205.785 cv
471.861 206.01 479.889 195.374 482.25 187.633 cv
483.01 183.013 478.863 178.065 478.863 178.065 cv
476.953 182.007 464.736 189.112 463.997 190.918 cv
463.463 192.212 462.621 198.988 462.333 204.45 cv
462.21 206.626 462.19 208.598 462.313 209.932 cv
462.313 209.932 459.295 210.343 455.496 209.932 cv
454.552 209.83 453.566 209.686 452.56 209.46 cv
451.102 209.131 449.624 208.68 448.207 208.002 cv
cp
level3{
gsave
clp
[24.4638 42.3725 -42.3725 24.4638 451.504 168.147 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[24.4638 42.3725 -42.3725 24.4638 451.504 168.147 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
465.516 206.339 mo
465.516 207.776 li
466.03 207.817 466.502 207.879 466.974 207.94 cv
466.974 207.94 467.898 216.42 466.974 217.119 cv
466.05 217.837 461.738 218.042 460.178 217.119 cv
458.617 216.195 456.79 213.012 455.496 209.932 cv
459.295 210.343 462.313 209.932 462.313 209.932 cv
462.19 208.598 462.21 206.626 462.333 204.45 cv
463.997 204.511 li
463.997 204.511 464.633 204.676 465.516 204.881 cv
465.516 206.339 li
cp
0 .255863 .275639 0 cmyk
f
461.882 262.086 mo
461.882 262.332 461.882 262.578 461.882 262.846 cv
475.68 264.652 li
475.249 259.375 474.92 255.248 474.9 254.57 cv
474.838 252.456 476.399 239.787 476.255 237.734 cv
476.111 235.681 469.869 213.094 468.74 208.166 cv
468.186 208.084 467.59 208.002 466.974 207.94 cv
466.974 207.94 467.898 216.42 466.974 217.119 cv
466.05 217.837 461.738 218.042 460.178 217.119 cv
458.617 216.195 456.79 213.012 455.496 209.932 cv
454.552 209.83 453.566 209.686 452.56 209.46 cv
455.394 215.456 460.362 235.742 461.451 238.925 cv
461.902 240.3 461.964 250.669 461.882 262.086 cv
cp
479.664 292.352 mo
477.959 292.352 li
477.959 292.352 477.343 285.021 476.665 276.787 cv
472.046 276.972 466.892 277.137 461.738 277.198 cv
461.718 278.143 461.697 279.066 461.677 279.97 cv
461.574 288.204 461.451 294.363 461.451 294.363 cv
461.451 294.363 448.371 295.555 438.762 294.754 cv
438.762 295.575 438.782 296.355 438.782 297.136 cv
439.562 297.218 447.673 298.039 458.268 297.136 cv
469.417 296.171 479.848 294.815 479.848 294.815 cv
479.848 294.815 479.766 293.912 479.664 292.352 cv
cp
level3{
gsave
clp
[43.7821 75.8328 -75.8328 43.7821 434.759 219.737 ]ct
/5 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~!5)D6!52J7!5;P8!5MY9!5V_:!5_b:!5he:!5qk;!6.t<!68"<!6A(=!6J+=!6\7?!6e:?!6n=?!7"C@
!7+F@!74LA!74I@!7=OA!7FUB!7X^C!7aaC!7jgD!7sjD!8'mD!80sE!8:!E!8L-G!8U0G!8^6H!8g9H
!8p?I!9$BI!THQK!THQK!ol`M"6;lN"Q`&P"Qi,Q"m88R"m88R#3\DS#O+PT#O4VU#jXeW#jahW$11"Y
$11"Y$LU.Z$L^4[$h-@\$h6F]%.ZR^%Iu[_%eDja&+i$c&+r*d&G83e&b\?f')+Nh'DFWi'DO]j'_sll
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 0 1 ]
/Size [64 ]
>>
]
/Bounds []
/Encode [0 1 ]
>>
>>/Gradient add_res /5 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[43.7821 75.8328 -75.8328 43.7821 434.759 219.737 ]ct
clp
/5 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 4 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz!!!!"!<E3&!WiE*!s8W-!s8W."9\i1"9\i2"U,&6"pP89
"pP8:#6tJ=#6tJ>#RC\A#RC\A#mgnE#mgnE$47+I$47+I$O[=M$k*OQ%1NaU%LrsY%LrsY%hB0]&.fBa
&J5Te&eYfi&eYfi',)#m~>
<~]=beh]Y2"l]tV4q^VIY#^qmk'_8=(+_Sa:/_o0L4`Q#p;`lH-?a2l?CaN;QHb0.uObKS2Sbg"DWc-FV[
cHab^cd0q`cd0tbd*U1fdF$Cje'lgreC<%!e^`7%f%/I)f@S[-f\"m1g"G*5gY:N=gt^`Ah;-rEhVR/I
hr!>Li8EPPiSibSiSibTio8tXj5]1\jQ,C`jlPUdk2tggk2tghkND$lkih6pl07HtlK[[#lg*m'm-O**
m-O**mHs<.mdBN2n*f`6nF5r:naZ/>naZ/>o()ABoCMSFo^qeJo^qeJp%A"Np@e4Rp@e4Rp\4FVq"XXZ
~>
<~='&I)='&I)='&I)=&r@&<`W7%<`N."<E)ps<)cgr<)Z^o;c6Lk;GpCj;Gg:g;,L1f;,C(c:esk_:JXb^
:JX_\:/4PZ:/4MX9he>V9he>V9he;T9MA)P91qoN91qlL8kMZH8P)KF8P)HD84Z9B84Z6@7n6'>7n6$<
7Rfj:7Rfj977BX677BX677BX677BX56psF26psF26psF16UO4.6UO4-6:+")5s[e&5s[e&5s[e%5X7S"
5X7S"5X7S"5<h@s5<h@s5!D.o5!D.o4Ztqk4Ztqk4Ztqk4Ztqk4Ztqk4Ztqk4?P_g4?P_g4?P_g4?P_g
~>
0 ]
>>
0 0 1 0 []true true []
/DeviceCMYK
GenStrips
} /Gradient add_res /5 /Gradient get_res exec grestore
}if
np
443.033 260.382 mo
444.265 234.797 li
444.285 234.797 li
446.482 259.108 li
461.882 262.086 li
461.882 262.332 461.882 262.578 461.882 262.846 cv
443.033 260.382 li
cp
.924163 1 .23505 .118563 cmyk
f
437.674 276.603 mo
444.06 277.239 452.909 277.342 461.738 277.198 cv
461.718 278.143 461.697 279.066 461.677 279.97 cv
459.5 280.34 443.505 283.009 440.856 282.906 cv
438.207 282.783 437.304 281.633 437.16 281.428 cv
437.16 281.407 437.16 281.407 437.16 281.407 cv
437.386 279.724 437.55 278.081 437.674 276.603 cv
cp
.826535 .631281 .551141 .479408 cmyk
f
437.16 281.428 mo
437.304 281.633 438.207 282.783 440.856 282.906 cv
443.505 283.009 459.5 280.34 461.677 279.97 cv
461.574 288.204 461.451 294.363 461.451 294.363 cv
461.451 294.363 448.371 295.555 438.762 294.754 cv
437.55 294.651 436.4 294.528 435.333 294.363 cv
435.333 294.363 436.421 287.67 437.16 281.428 cv
cp
level3{
gsave
clp
[11.674 20.2199 -20.2199 11.674 443.184 277.95 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[11.674 20.2199 -20.2199 11.674 443.184 277.95 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
686.194 277.274 mo
394.806 277.274 li
394.806 285.629 li
686.194 285.629 li
686.194 277.274 li
cp
.177035 .122347 .126802 0 cmyk
f
413.755 410.768 mo
403.302 410.768 li
403.302 285.629 li
413.755 285.629 li
413.755 410.768 li
cp
f
677.697 410.768 mo
667.244 410.768 li
667.244 285.629 li
677.697 285.629 li
677.697 410.768 li
cp
f
413.755 290.756 mo
403.302 290.756 li
403.302 285.629 li
413.755 285.629 li
413.755 290.756 li
cp
.270329 .200107 .198642 0 cmyk
f
677.697 290.756 mo
667.244 290.756 li
667.244 285.629 li
677.697 285.629 li
677.697 290.756 li
cp
f
521.292 273.825 mo
515.666 273.825 li
504.989 273.825 li
504.989 277.274 li
538.539 277.274 li
538.539 273.825 li
537.411 273.825 536.774 273.825 536.774 273.825 cv
521.292 273.825 li
cp
.67071 .608301 .387243 .167544 cmyk
f
539.566 260.314 mo
536.774 273.825 li
536.774 273.825 537.411 273.825 538.539 273.825 cv
548.108 227.626 li
546.958 227.626 546.322 227.626 546.322 227.626 cv
539.566 260.314 li
cp
f
538.539 273.825 mo
538.539 277.274 li
599.215 277.274 li
599.215 273.825 li
539.217 273.825 li
538.539 273.825 li
cp
.517632 .444068 .306737 .0250553 cmyk
f
548.108 227.626 mo
538.539 273.825 li
539.217 273.825 li
599.215 273.825 li
608.783 227.626 li
549.402 227.626 li
548.909 227.626 548.478 227.626 548.108 227.626 cv
cp
f
594.116 145.646 mo
482.963 145.646 li
482.963 138.48 li
594.116 138.48 li
594.116 145.646 li
cp
.0433661 .0238956 .0283818 0 cmyk
f
502.32 102.79 mo
495.491 102.79 li
495.491 138.48 li
502.32 138.48 li
502.32 102.79 li
cp
.115297 .0875563 .0918593 0 cmyk
f
529.676 102.79 mo
522.847 102.79 li
522.847 138.48 li
529.676 138.48 li
529.676 102.79 li
cp
.0433661 .0238956 .0283818 0 cmyk
f
518.254 104.476 mo
513.617 104.476 li
513.617 138.48 li
518.254 138.48 li
518.254 104.476 li
cp
f
509.149 102.79 mo
502.32 102.79 li
502.32 138.48 li
509.149 138.48 li
509.149 102.79 li
cp
f
513.617 108.41 mo
509.024 108.41 li
509.024 138.48 li
513.617 138.48 li
513.617 108.41 li
cp
.115297 .0875563 .0918593 0 cmyk
f
522.847 100.26 mo
518.254 100.26 li
518.254 138.48 li
522.847 138.48 li
522.847 100.26 li
cp
f
534.033 106.539 mo
529.676 107.99 li
539.805 138.384 li
544.162 136.932 li
534.033 106.539 li
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
[/Gradient [/0 /1 /2 /3 /4 /5 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 16.0
%%AI8_CreatorVersion: 24.0.1
%%For: (Ayib Makmun B9) ()
%%Title: (Business people - 2 - up-01.eps)
%%CreationDate: 2/24/2020 8:57 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb",KB6W(PoC2AJT&]9iHNhn2Y+`Fn\A]c&,=&\o0d6[^S)9/(B7FMpD'`.^5d$*!F_l];g+ka<B6Ip#o3/V+X#H[Ag:s\F,U[+9
%8P*G*,/YajXN4*51HW3I5?6GPjbd6Lql2P9-b<>Yg[0UDd.I$HU@;B$-4Z:gGbQIdeODq'Q,knKl3k7ggD(gQonHZ$oN.lQ@(?u(
%n$:_9^0>O*Nk2D/<F8Ji!fQO=&%L2K2H0o=UX/^ak$e!!DOmbt%eL>O`>pEJ?LO)KJ_R/_ONh_qI#p*d2Cm\r%,?IG=b[[09OcuS
%<.1dU41`k>CX'I[X'o:L]dikO4(.i^bdmT(C+();"%d*mPaFuK%/NJCYmSCY9k\,o:gGCU,t(4S$9>#K"'"r+?2_1"fMRp&Wgg69
%l(,0Wrr<b7!*'tfbt"\fL8nT;lQ,2nK^WI]i#QPi[/k2*<KnF0L)I^-kHA%J>g]1n%cDlgkTZ,(d-Oe@Je"%&.[k"qCui+&2UAd(
%gt<r#8uZVrcCdJ..>_]J"ImOfHq$f6N%?>3)/)[_9`d;\XPF36q.hmBl:&*am:CN!a!WS.a*R]`hHUd5+d'uZ,nhN3om4kKL^]W3
%NBaq4PYD!eX^?,P!09lFD-AUpA1S]5W5YPBcVW)eB!%`>U<.,EYBdpP-D4R1HSV3S?gokMU>%F.K5WjlC%+I&M(5+lkK%lp5FaRA
%n8MU`\ujfNUGhYg6E[1ceAS1em:\OSG:df>q$paI'+5ZE'Bcr)Kf\/(>pcDt>Dj(.Shu\/U*oF4Gh9HN;#^ht'^/Q6GRpC=JnjJ+
%VTtq4#dis2C>:BuJ#Ws[V)n@1E`B`*fl"X1E5-?0:QIjM&<CLnJr/*952rcsJ#]Xq][<4*;QUG8&CB1Y12"@d:A+FU?>7lq=&9fp
%qNJ(hT'Oop?LP=p'Bbh8YhS_oD@_bTL***J_]+<45<m_g^jZo/h0MS6g<j5283S<ESs:)&m?B_k!Oq)9HI$LP(=50R!8_;"6TK\+
%B[)"LY9eEQ9!+U`0kC49E'LY_0lOhE<X`@ne7Ph"=)WJ/l:&A4\4>*<hldcs;/a31h'MKZ.!hdtD5_*^gDuPeI,Y6!$;qK^P8!u#
%Ca.a^7E)^<eES/j<YGj2lE>m62.?!4KEQE$490*9-1\I#Ir6Y5=eGJE)9ra#(C-9,2%#9JQNU@o/fCfC>WK=bE#%=]0dZGnMgfo\
%i2o`/RsZAdba7n^!aFRiHpK0:KhOcbA.,q7^/-3l$`-0-.U_5pMF(/k9#XJ$/nU$P@_PqmQAQtfFbta/0*rq$RS$I,".*98Q?&gL
%#qA2o9'%g,B&ValHs(tmKM-nI;jPU0X#Ha]<sC8`s,*Nnno/Rm$bmZ",eOK/#Y"?'6-'Eo\?blg/'*;F(VFAXTD/XT#m)c!!fR)Q
%s/a$*A`t[Tr.h>/0DdQn%>-`A/>F@(d1="oL7F$Mk@"'f!.kWPa8eIN!/h,u&TBlQ>R4R7og0NK"9J-MqT2P2"(9BiQ%_kc.g)+@
%QO"Cd#,Zp+M;Vc&fE+uZnn#='(3lXV,YK"HP!g--06%UT0`]6,1g^gc@SY-Vn6(9/?o%dp!@fU10R-9Q!-en`'VX2BTB!8jb\)/,
%?nUq2cN0ms>T)\4#[PSo3A/Ls>fQ&'-?!6Oc^"0.ZKLfX8EbXD-2S<<Qf,E!lb^=I'!i*o*E*f=@PY75@BD:0nH/R&nX0e@0X13n
%10J]00IeRq1W6d(>&ckq)DDP&4B.(-bD0NUPm>hR(ZqQQbeXNjOKr"V",70P>:c8+7.`e-!;+S66r3Z^!O\OQ3fMAD:GI)u2MehR
%H[)#F>Wc8]q3M3GA,S>G(]%q:Z&kT&gsSM_5h.&$D&L]e#A@WJWO%-1"[I,soc0X>#WRK^7NQW612n!=84E_UPC\f&5Yu#7/e3\2
%PQ3Fhm'9Maaoec41MhdJ`"N/CA\`s=:iI#6(^kT*"8e7_?6B:Rc<::@;97qE.gq[PQ\7"Hcf_".H-E.,A[k@J>me,I/t8'`&qRGV
%a)c'Wad+=Rad*Or!R?hPb&Cpt,%>h#*\i!ZfI3a:?B\ql('u$_.cZHb.G@jS\FT?Y,H`S;aln<pdJjVp8bOGC(Zs+'36IU!(,5d3
%@a6?0T#Y>YLH(h*W]UKL$u?(J8AH?WD:%?<huFS98LAsI"$k4!"IsitLB.O$-jC6Tjg(u46'5C`c-,sgR#Yuh=a]>TbFC)^?sZ:n
%_S_'G99LI=)"V4]M_d#E;ZXo2n1()55eN&3s"deQ2Q.O]#r9V$,'8R_@(mgq)(pG2%8mMp:+:o$>Xn1g&omuJ5_N[qGJs7N$n%c>
%ZGg8QSue=LAQ".]'U)U(1n2W<f]#[B>@JH^Yq"Z.*_p:hr#uo)kSFQ@JggoODpJ?S[JsjDJBZaIALoI]?Q]^Rae!>giURgs/-Oo3
%%?PPP!:S![huq=+]Rp7QJU%LuK"qC*c@^:kW2pE7bsHIq7V=`N""mCM1bWLbJFm*,\(UjW"&uA\rBQ@6mm]CIG+#a\9LHuk=2DP,
%QHk=?V"g?oT65TB\:?ktVTlH!H%E\=l_OY0IH0>2M`!/Bi0X`#/7J6[>Qs`)QnJ@=G(CKcE<1TlFti)1+^GSb0uQ5]1A],N\I`.L
%5i[FK@:5[!0O%(Tb@:]G2AI#?.jH#\Gt'8nL/>gI+qMo8enf&c.o$.7=5Z%<%g2*;#rKa*$ou@?=W*Zi!(I#TN'e?f&9&NF>=<dH
%Y8RP^Kq,,99&^F\+g5+-Oa/!($:tB67NaPn7Xtt[K(P]Z<+`?Q%Y;GE$[NN8AcSlW!BL/sSeECkE=E+PLfp&E0L\SMLD:iA5#+AC
%O$Il-W:^YELfi6#&]&n!b%.GAK$/s+Ls.X7cu5VuOQ0$O!M[DdJ^>Xb![7WU+S,UO+b2hNF!4^S5CdgrM?4JZ=:O$f;\_&ib,>^3
%0ope!2uke#9NDBU!Y$>CM(Cb))c<PiARsJiKFLF^3gteuBf>Ojfk;4^H*F-,l;>QU,AS0W=IbOd,CmPLC_X.jLeU@W!KhAT9WW7H
%X#RAP>46Oe%$b)[-VmiCN]grU<&.K#d=3$<=-e8G(nK<n6?X,lZ:mtcbZFp82F#B^5fmClJJa)skJESqlOLX::98(0Ag]af2i$X6
%kYiYnq-eV'W6p$KF'Z5)o<kOg4k@!T/T"_?=NA?`-4kFYV35IbQ!C[b%qc1f>K@Lq_3-Un#u]5.=A]3g@suj'fo]%P,2%b`'e@U!
%)nY*4m'>AXn$UfQlJWL/r^)="(+Y,9JN5I($KaMprI?DTfVClhRr)h-g@`1'IddLuHL:]N00l13_!qnZmVqU;7r6=a<g9h=6cq6<
%,oqWF![R#4UeP?I<WE^UAcq/V!4A1T3Fb)i1,:(^aTh@[0ue!*]>U@t8?'Tq:;F^u5V!q`We&,4QgklIE8MlMJb2?(LrcbFA)]>p
%\@gq&"HLf9D^C0%Q96L:!>@U?I]T93Jgah']aloT]`">gK/Kr:5g-#I/n+:.KPq'N-\k--R00/`ne-K"1-fqAka_%K1Q=]W1^4Cg
%(%EsJ,%Ro8@/X\368C_b^H'c*#/=!0j&j4\rt)diRBt"sD7cZuoit/=c!tTLLCIn6LsBBuV.?%K!d7]:fP-2tQE5`s*TR@C^&gPP
%j?lA"Lc@(B`gj/3`,um#Qsk?s"cfnhfX/\)@("M%h@8UbZ?Lo.F"Z$]pgd2qL?l\Hc@?@[>nE<g#41/PFou?Ia<O]L75N%onmcsj
%j;/[T)p4In;.?1.XM>a])Sg`T=/WllJGWssdH"AV<\RYm;Xq"qD:nA,N^JPj6k*CYB3C)Xfmkphb(r$,rrC[2*l'<qE\2tZYhjqq
%9k,V?^i#eR?4N+&jb]37S*3.lAMAa'[32$MLu77ob;36*/q`T8"7@D)2hr2@b#lut4_D-JkTe-Q%/6+H+N&&>OM_ieN%`@?-(1+]
%U@hhF1<5gidS28e(hkD"\I`7&`=t$3cJ(uH=;SD]#h*T6oGZf-9SqCKnW8_]A`X=e?dPDRggMHObAnH=&b7'\C\Yc/nS3q@UT,HB
%).&j\fjkp0@l4ZKMocRaQFJt$"OJ1GEf0BV/\T]Fk^#3'%SB.%i(HIWgI"@eEp#0/S*PTX;.l8<elj15G'M/4r%_T_6PcQ\W(/i0
%39u]$-K&H%Zt,OM"U<1J(2*mT0Xb[!QqOYm:"R-g[E@.lO'5#%%>Wr5<A;j$@qsOP4Vk<j!EA;cN7b9K0m/Wqn%%d,kKShU4OQF/
%FC`,MU'?^in1N9M!@k1((Q#Y\aC.lGl0D_/MuZEl8qFihn@B%p7ufE\1GiM'59o*/1;puT*@uZd*GYsU0Z9&MOW^H%(2LtoFUk7^
%6#g7nHuWNW?0/QH^`58uXG(*#em&Y?oZPT'pUV,>_I=mPKFp;$rRM7b&]"a'gk]2d;IM;J)!b?c5cGr6fjZ4r_.-3.[5D[Getb+!
%n2&i[\Us?M`9)9SBY&Gn-o>0k6IBGj.;76\B\gdCjiO21aqZ2Zocpq<85Ppd.]'4<H_ri=.\\rP68rS>TL)9]gA[b>%p^CUO?oj4
%Lahq/\\hMU@1e\m>)n9kNsL0?18&FPnkT4mI&uu]aks-Kof?*Z5$-%B]\e_A$Z[74O.@BD8d8CFfHGiJ16D0a=#A87A$9G$[1%G>
%:2EXcYD`(TIou05s+:&);WB$h;\rT)aNi"=f<0*r%c.hAn1qG9(C:tqE:V_ra:hXk^9DMkraR$$p95`a<49AlKp<h",](qAYZR1$
%*9KUZ!9,kZloJ`q\$:b&/2H?[aD"m'GQJZVhMZA\2W#q[n-q=kJ;t3,dk\0TmArZ""VnRRTr/Yc>TCb-I@F?nQ99<C[D@RT"uq0D
%K`%QtS/<Co63tU:g"sq.EB.j_qC/qKNVqdqS7j,eCLhJ+'&aSM')k]<O7\F"&[83H"W<O7`(eVLZ!b(tciPsLD9e)!al&F*LU=Bc
%.Kc]K4)edK'q5&Y7lh\laFO@8"-I.?XHF^G@u:+7e0(E>19mc&aXKVADD!i+l3??]ZG.h<pR%\nW[HPBfe.%;R9Ut*T?4K>lT:c4
%k<A`S\\&+;F74h=1'BI-%!LX?IsWgY#LRMQ`T(=^r,7!Q1)QCUq8rPPrYj',j4Cjm'#1pbfr[U%<K(ubNW)^Gd?hO)?Nts[//QJ)
%Eitoab@'R*f^@^LIBo7)Pq[R.@s0,-`Znr)K@gTb=[^):._l1;I2FNN+Fb_5BT:8equRW#0L`;pDhqjuJ>0BKJqsH@f$C(JO&q9O
%G`u4u=V8]_\GSb9GK'CRM;3Qa!GX>+O-CB(`mD3iN'[27!Oanj,pI]eO3,u5^H3i:ai_=K"`AZhMRb?TXissTX=TYp.'2$*Tf(G8
%_<.uK#4TG79&X_c$4]YD!@]</Mur9b-C9G^0>Or\@@Db8=L;e(V\=Z?rB4`DRV2`n-ZWLW#c'2l/'QoY**Qdj_?NKHOt2=%,SK<7
%mR9ZLc=X>XR:.kDRi+dq-n59OjJ7#nBOjGHlTo8?X_Kb``Ju?DOKni-W5/tZ0]F_O<?5Gbm(X#K"SGKg@N"4bg#[CfhWUX!\[;;q
%YmTBk%M+T,RYj<GlW'22VWbc>*j$_(rdAW?iF,XKFS'mUgJQ^`M%qG+driW6VYXP9e9&*T95oa[/eEg:&H1kk7_(>EE.OE_9Va>1
%od\`[K:89*mZKf"7b93f41lg_7U-Kco%WB_>7='?q.`;-.J<HWnKd'U7f&7Y?@&Y,"52$sj0*d2o1VA6ZhR`6/[tV=CUB[u#F9[d
%obnO()AXeZ'%?NTet8Nqo^cXZJ#gE)(g7&VP,%m*rXdWGpVpT&?+n['W6M>7%2\&9>0tnr^!1Ys:rkBQ^a_r\/aM\_/q>1$2"A6P
%<^YuIa4]gn*`kGG:GmkL+l@RG&L(JV*i,sI]8[YdaX[<kK5547SU.1P+o6uq[W-;oG=%7&FM1)aZ@^*6L5j5\`0'>DH;;S.M#N0*
%cC<&4RF]ohlF)g=:9OdWl0#/)*"e@72^<R/HW8eT%4_e``1XK'W[f)aV]V>u`Z#R.hMe+e[jRiHY<UMSCkkj],@+7j'5M+<FDRJ]
%05G2gNDj8%S;rTX&N!6)FTlTA`fX;?IoQ$(hJY7)egW`i)I'+LlZ?s6Nigd8FZQs+Hg#6]SPirpP5B4l.4]dV>:m&X<#]Jr8ko3U
%Tp?AP9\QFJCpAf_YHZ[gN<B%u5+K>QDoB"E[A*N(N]57DU]6Kq^""M]NGaD#*0)36QHI7VdVZJZ8i%PLf(Z<(a-s&i7qT.G/@G3?
%8;nsO-<>K:V1Qb.[b?QbT@%9da*=DTbTn)t7md)%=7OrS^Rc[0/sdj\h2(#c22dNKll$Uf80>[tmcoj*<B[B4Z0':'em"+H*D^Y0
%N?GS?G+m?RF9iN8L8#KkB"Ofp@uR\ebr6Rn'776cIp6)Tm:WrSRj2Z)-#r)C#P6MsD&d1bs.^[cs5%]k@[o1O&W?Zb.68h[^"GE%
%jaUG/F1jRiC&>\F?:J&uM_!LN75=&Qf/$`fnLh_<"B(8Yq:=.QdsGRIoXa'U%-i.a6fRsp$e$imMiTT"r9/*Xd:)Y=g>#>S)p^BC
%_FTV6!`<5J@c)&kMI,a6^T*hAXC;l4EhhL-k=ptJE]faPMC*fp%eMr\hcnCsTrL>V#d0r(H,V,P^L<<)BP60f7m:HC=I_(8d;Uf=
%Q0Cp-7h1)#BNcXaX6T`Kf-eW/Df6Qo-IRrl*<%kU?B#dHWl5h&>LI,@Ib,"8a&Y-R\?O,je_"X0L(Y`V@he<AHA!886hsR->L-J?
%H_OT_hOtDOnMjs9XJ7Kt*-9!kKTK\=pm0mm+-.)TbZ#J]<g`f0dFp<eBghd7kXT@-TqkOo%eMg$W%a"A?qV./8K7%K8a+(W7s.If
%)"]b%dIcH.8]FYG"Jsnp6q(*"imL:mFOQ;L*A`31D%igV9\$(]q,@./V8BReCoWIN[@pW23H'6$I&kZWkh#"p*c:A8D_0IsoldC0
%<7P'Xff<#8UFb/eKQSSe5-h>Pe.[g+`_]d=nftr.7Rk&2gc]c_,iPd*e^6n1N0<uTA%"kVdoAY)r.btBpqE/-*3pIt:-n>G(_odX
%,ADRjG<DUl\3J1ohA__0NF0is#lVXMSW9Gb"-;uh>>>'+]P,4'HD;'&@^PZK6do&:=At8TWR^:)qTg"QhKe.``n8e00a:a^G$hl/
%YlLpM'(<K`+;oJ,XJ"#_@sI!mibp]Y7_PcNo_C.?V,9D*@\bIbDnLQ#qP\250j"f9rDo\fQ^8^EL?5)AiJ?]3X;5<h5bmgQ%>nI>
%,IsW#LEeniC.@H:m7iQcV-/;-_rXu!<(B.!7["q>>-!+fa<gZ"74uQHV%NC`N.0hc*(h+ajtMg#1=WcFErGu+BDoj&?#`hRQXWeL
%W3'fqA!b2UD?T(VaM]]25@3[h]ja30YtHgKC=Kck3-NDn[,]f8pF+c?!g`h?fVLQ:@oUDD3-K"h%+lE'257gf%hcJgLTEt!;iG4Q
%7Pf3:`l*ibe+a#<BVQE%'o,-91S)"Fi"*(iBUn#,naubBe+6*(+<%fDq4jL+#9EVr)n>$R+,Y:fUPG6)9hHFC'P6:E5"-ZMDfiW:
%=3-D,Dp"[Kg:(h@(AhKtd[2Wc'l9"]T#YYebSL4b[TLu:c<+6I9=X!%<>JSfa((u+Ar=K9MITZVmpM"p=&g4r`A(:2)H.n_fH+LV
%N-o$i8.UP#/Kg,6.dNJMqPLXDR*s4Kd6hA:Bk'bn`i$TAA3f'*-hVu>`^rPnr=Ccoq)sLQM+g73%luVGi\XEc1%EDBZ;3BpY&R-e
%(#^g0JDW6Z%0+r;6/of%COc,mWH@f5MqX2*]Jij+pr7YZNVB:gB^_H,g7=+IE20p%<P;O6+7#T-cjpfR<`M3"3'/5pYIrCNfbdgP
%3kIINW]GY.ekY[.>PlK3"BQdag(@"(q9Q_fmsjWBW?cDOC_2NK7YH!X]+d7TgJUGa_sl7ChBkHYHYmJ6:aV78&WC/jq+/=?lR4P$
%H6;*=$kdo4bDfm*6,?E,O"mL^+r8B[?2Rn_r4%XRW3CVpTCkjq6F1IAKTR*K"L>U.`4k&`'YW@KIT8HaoSl]abo_C!eR?Y`;-X[t
%Do0P_Y6/t1*HYi)Rf<Cio4)Z-r18=Nj4/N<&>AcEN`h8FY42kuGQiT0Jj3SX+0XUthYm\V99!$BI7?2&_=-JAit_L$G?g/_RsDYu
%5@22#(BX'B]D#0'nDh)gcf/g-ms8[nn8VG&A$,b*fSsm&d\sB@HA"*u:sbY=>rQ8tOId9GbR$]k%_DK]=Lg/cci)F!NUjR4BP>/Z
%LYA[k4a3PaZALR)VB;o6]hors^[*4i!uog_FB*1\!G>Hb^j)qFBkos!>!q\Yl"Y'0e!4Op.`U,s3-I6@h2Pogj4N0IFuOkTGN4H@
%%R,o-2tf8G1]<;ul.:KOs4(JgSVZl+?#sSjn5cJ:d18uh^peRV3T?;_G$c!Mf^q<lPkY`_KqLZ_BK@h-_^H2>L\*L0Itt'+N6f8Y
%:XO'Z<RASTs!UV(NL"AEdFJFjI!9&gS"i6FAuA<%[_UV_B=Q6V,O1+@rD&(pb&g9bLXari2>0Ft4],]beCYElp-am';.EDOfG!p1
%%IHWlo3rEo+3+:;UZg@F2T5TbR7>q$E3T#q\/5rFgW/0.i.LJ\o,i>/hNGX%LlH%Vlm"5/)p`ou;flKmf8/cU'0D"oA6AfNgN=j_
%^.73hBAShSDU^`q8j-pG@k<i$KhVJjS&*'5^JPT`+)`C6r[c6t803<oNCEDb'ZoB0i*sji;2hi;5M>'+i!/Pl46Xb1"1SlJ!SlA7
%;U^*nTsNNDOe[?cI5gBap`"-Kn\0.,O0V3nLCC,Z5L[.Y+_=op2#iTSM!0mra(=.C7,$[2>O<R(dFDD_DEjjHiu!jP0=FjbR.A#.
%BR+OFoq/@1Nnd<fc-+Kj09`Is99$kEAE[6Td(dq:Ad*p<)Lp:QE<8,Eic"8opcr'"Z[@`-H<+O0FP>j6C2gG&8dnAQhm)e8*En`V
%fQm'S/?uJOjrKYRr8F/)0h+!ChRldQ0m;E4SN!;h)TL'lZ1I,<3,edc:BtnFFHec$C*,SoT__02SDIjK0jQrL6[D+\c_IXB4%eO(
%X2i;p0j^auT&&&R"NI>&GClhCD7-IG5ItU9)FM".]_5ANNNpB&Zho%We,D/K##4/?,=$dS[Qdtp46tBXeHcDibADrjT@Y$%-IMM7
%L^KI<:0g"Tds.cCH[OkE]#G[mrV)buUTV;MTKuiZmD_SEp0'tEU$$-.2l=?%o<Ah:pK.j;qlen'lq]X[cF\D!gOKSIBh)nX$[kF5
%%c_u!/@XVHfq!'GqX,m.EU7\B=(u9e_1Ep#6>)^I*%^<pf8#/6+@[hg0[?2J>/4O)U&>_bJfRGuEF`,XR(m43J3Lte<*'D<Y)_*@
%rq!OLZ#r)aU`A-eA,C@aT8r<fZ$e[A:]FYrP[4_=gS\QYo_ia^^EAi%IV4ej2GiYY3As^S#3si+*?1qe"*JFQNXaKeYpd_S:"553
%U5C&G7/`io[3o7:_=?BsI2Zb87a4,V`DlgD$h\!O8el8sM\/OBUUNY3qoD00UMm,!Nq\Z]a1Od7fWjI(F,s2O*bW-pn`Y&2Tl,q_
%2Qm#`fE0&iorF@4;LM\@(q6l<;QY.lYJtRI[l_>D1"H?KibsORGgIOm;8sR*LsfQHU$*ng>tj#m.G^cFc*BgX:Y`sZeJ:=ooD%7!
%WW.ARb$T=@Wr_n"WY.f2EP41AIY1L[#I0=6*t^D&O,t[k$<jdl;52A%FkLck(Z/u/oJ(1LY5YA!eX4kLId=+*q<L&dNX$$#)up/*
%'P\UJ<ptC16C31(pq8V3K;[tom81jooX(^tYQ!78Z`%TQn5c<JkVm?W)t5H9iWAYm)f'Q73Yhu+YuWP[ra^L400(^hgF2BU+&W=_
%bO:K>^Y:?Jg2/87EL2-JB@J,4l#geM)Y'*ZhDa>.[.Meil?):JQI]%4)6WSn-nAt@rG8R-NV0X!rg]BErt,sPIcT@ak\9)8q@R%9
%pl?/qnVY2Vq1$o#oFcen?J^dZ5'B2-N;8@`'?i=@r7d2Zp<q%'Ykf2X'bOU0RO_e\9[T2_U95*5D`8k/YBQRFeMsJnN1sEle2o$M
%4j$/6bN*jjP@IGBLreZ0kVk!N36"pWLcFhKZ5ee`&K&nt,`bCbk_nM!FOQ;sc5e>;m(Z@u7W+CgBP0dP>PdqmO+r,\iV,S6HT(*e
%$dS==h(`\uK0dN3TT,h1?k\KEq0fR;:erV@(h6%;nfpPkUEUpi'r[.A/#Z=.Nna&H4$!`>,8dBh9g>G@aS3qj5-c[7GO1di2l1&6
%PhgE[/&0Bam'ucZp7"Y%Rs_!:iQUh!Qd7hk)pZB'Y""+X%"O>4Z]t7$"$+c7%@Y-)s(G@,O0h;43YOD$*/.,+aPIkEoq.aBqRl,+
%-+f54s*n9>NmR=];:Wj4rS=u6hV7C<$2T@@N`'SiQSDdTY*[uP'6#>u[#af1R8LNLXIbG-(J86O9O`s;*s31c7iE&o0h_EmLmWZ&
%+[XgF6[AOk]$bCZ`],I2*E#C73n:/WN;Y*\NL`9%`p$u,iHs#Ja)7N2.Dt,.\OPVm9\+QC:S0$uNp%Lf1[gt]rLKrIS(hMBLJkHj
%T<<t<M<NO.Ok)XG>4C*E8b7C;IB#6J-PQM"[I?!*G]qO!_V\jNGT??+=48X6,-Q4Fc\Y#cWB@/+i`NBM=/-f`N2HiUdAT8I1=e"&
%Y%`kPr9[OWI3,:&'.L7T0F2lHrkQk^qM.NOeAF^27#hon/ApCQFE'cTh!hqJ24iq%c5AZhTa`iihpd*4nM`k7$b(Wr$8B1U5bK@;
%&kp>Yp"*53[0n^GA+[g!k!RacK'o/GT9PQT=B824LJ3F7nHV6&#SMO+#RnbkIobX'&GcAq1D9[010HVWPsa)(!J4CfdC2:6oH!Au
%!q7HF'=W0ZU,E#_:D'9cb;JK+:0Ttc9VQSD!JhS-1sA^ZL>(mj`o'TABJ^SMS)II3ROjpCn-90c_1sQD^!<!n?+<%O)VQ2PHdVq@
%BGahN6P+B)R/#j?l3G"V06d^`o.bC"pshJf\&3SN?U:DpiCNp4!.D4T#P0*Yp.OWMr^i#9X%joeS&dgf*p)uiQ2c2n<G2313bqd@
%-5LPO)ALQ0/JJc=-;Mpg.>AXM0akm2,Si'@i<gf@6qef(XFW;!!ROA&&*8`mRK,M,hukd>]ts5:,/:s6Jcf8DiFN&A^h6(j,N=ac
%cghs,Sf*3P*!Wq^2m(g/$rk6h1/u91/$*$I/FuaT@Bgr3%"i;F$3UZZ>3's07!D%%k0Ppl\/G&a8dn[;<R.>1ZE/R+#?i9$cXtR<
%;]-o,ZD%B^'ZZ)oN1/fZ#\;;aX>=mq:<oNdj=F.I_aqFjMp%'05QDPg*$aE7AMu%nkTQSW6ihF;5SPd(Q1A(V2(PD)3R4cBk&.rg
%W-=%XP?@$#->S1m:lS_7""%F")$A,+ba*Om#&r0kCN^pXRPP_g,"m+*H!/@%:nL.DLY5/#AL-,_[`J!+Y6`-q6"'a'LWXT*&!-eC
%?.a],+)V'6?#K]em;Ht),RPMb'kUL@KNV2BP%9-]ciA;u:hA%=iTZUF*qb6Icku+0A.X,DW95@#<"4O,geWr?"f$El(8_7$,D5-@
%[t0(a7o6IjbfUden4ZGbV2PhMKmL^K=:VZ6?C"^M"(M07I5%nNL,"`s$p=j,?o.d=a>rhuJEJWi`%3EI]G;BVa5,j&-B"eU7W9EB
%%#17fgs%`G1lr+aLJ0P7XYjj(97UK=1/e5^NM9SV:e"(dcP^-7=:L'Ond'@=YR]2"2E26])Zg,J$q&q0+Bq2`<_d-,8LgJee.cYS
%JVHF9gTpu%b367OTmic^![!a@TEJ-Q,mQ:6aDhjjAGiIQ&iK9T0kaG.$5j6VW6(EYN0M::".Eg]o"T`d4r)79`?KCj``*'\8&@Cm
%Y(l`p/',#9`rIs4.g6u_Pl.Q,&66'"_$1$Ki%R+o#+-<a\[m=%)ISedZd&dknKGZI-)YKDPZWR!8PBok<Idj\cQU2`$jNqLE<?dZ
%$!]?^#JmTYdA`S$5Yc9cgfYE1JHJ"Hd&7h:@54hp#%HgBR;>uG0c[K2_5WjG!)d5(!VI:g1+Q"L+k(8lK@l24@Uom63Sp_KkQO@#
%WX>++(59O>A;2m#4!:^tZ?Veq>jaX5L>Xe\1#3s0(_M\4Cdp=YV/5Zeqh*"5Hmut4;W)g,cOMZ*XRSU=AP8P_7-;S`^nH\c>Y??<
%&EjKWL5;(*%9ArU4.ioGCBFd7Z03l4(c=!<"u/YnfAX;+H5IqRNb;Hm:Bf.!TS])&$/I-]d9r3S_AU;g!;RY0!7[>pbRcbUOH#Wp
%%5B!ZTQ&"qQH+:QE&Uaa"'1e:bc`ce@2Q#[CBQ3%(gq'f,2O4oO+0tF`Wrhb)0Jk9'G/8];c=;R,,GP;PN=)(T.IN^d\pAKGX:%K
%6IQZ'4*Pn*Wh=c-fPrS]I+CID)2gI#"AQ4,qbC.'4XYMFPIL5XG\58&W8fL/Vq50-MY(UoJK9^lT)F,?BFRqks!-oHceY60bYAt^
%CA/H"k+^9)JBU3QXW,=o6XO+/-+H6cRsZ7^HY]:YmB?>hWYn\b6&q2_LJTAOm)-\FZi0AldG&Gp;196.N#o>.$JHO9]/OU$f9$;<
%;erBi:hj[o(H(cjGh`t5kfULS@&;_]6&/U35m#?%WLY7r)N'*/`J99aK**FLf/WXm#DtQG&uMB3R[JVG6pOG>g22&@f0@=lhSgo'
%Z+eb\oV4fc@q#3U7FBYoJioDkL&rCDA*SP02eP+@j'D?@A!(g/n^mXSn*bg$g5UFOj08&!R,j+rWN%dALA[NU^43m2T$:kl.<7to
%l8<rA7.d_-P4)jn+qm+Bc`28f6M/X+U@2Q-8IeGjW58F*a*HO`OFZ$F2(`W,'s.QFe:IJK3S*Ll33FBMGeGcD)]\u97jF`PYB?>B
%pRt!*CjQusGZ?gt%CE/ZF='(gB;TIAMhDH#Lsl&6A%&#aA_Db(C]UZ:gI`G6c)7`8UaAjD<juYJGC-:>lJ:(1WS5oA?$#tr)h-aI
%?+C""X>X'AEMBLN[?D^a7+RK,\_V)]:i/EE:6fumea*7Q9?BSCjsrRSHKDZkBluL70A3Pi)ld('f34LD-q3I\G!i;YNDm78D7"rP
%4[gogI,"T:;75R9L3#Z4=ufkgEkoP@W]jD<_qd(!cQt>[>mAo1U=G_RN#E)%h1hrA=GPF!Z/0@UPi%7RraJT+:@D.=7B\#uhUs)#
%_A^BbmZ_8G8UH22#>Wgh\TV_pD04nC"kc2VnRL.9F)8_@9PE;D]I\99D>!g#D5c!Fm6U7k@CeFZr92HVK0a@jh$\"W;](+o<^#OE
%eS%KfeD&j"gF^Yo,tD0R.CGW=j]A9qc%TQ6;:QSr6^bL@7'>:lC^db,+Gh9qg/OM8.+UfG;u%&Bi^m3gFs:r.-O1IM'"ZfG1K:NR
%["'d`p"+(K+ikt8D5TFT.+UZrgatrbHf79bl8>N.IQS?s,,9l[Nh%!u0HZ5!-0i8IP`?+$Wn?>H?M^Lt<F7Rj,Yr*)KshpgQeB/p
%?IZ5^_/=<!aqQ\Geq78<DjXbo5Lm]_qJR`YWms1'V;A.p/1bBZ?KUWU/Z)`KRQm)2R0.Z=;C:pI1ZN5FhLZ4]O28RbT2.0<If1Br
%Bj!UII]@]%3V(oj'Es;0qt/iE)BHhqj.qQ;)e;3\?O\8M]ChpE99KUN9l-SBTLliL/[c>5blgjeU&_DCE&T"_CdMa?]mTE>e^4Tb
%L]MDrE]t>Q\lir9"+&mGAed'3r(@fQ=Kc'H-OlmYg(MiuH7JIHhgq&C>U!sfGZ%rFbBgd<TYsu'l$,XWpU,$/e+>i\,K.iEZ_m_+
%Y3TqOO<TWZk#j-ROB?D[edH5f;>RcNX,BA'I&9rPVT!ai7\X_P#$4U<E^loo'iXB.KI[N8#!j$&(.rC_?3m"nUhuEP[AtJXnPdD/
%j9pg'_qeU'6cXd1q%G4[V?mTqJi=$YFW*coeIWr`@$<R"m_2^7GhV+p@f+)A9%]^o!"OS!;4q7FaIG&7K7O;cP;Q$"PVYWCM/<p3
%M<?Wl-EM1COW]ct:MlfkB[+6pO'>6,OV=8'YsBC"ZpFCePd<+a;O6N!P33u7Bf_/H?rp\[`as#qA=<uoAJ(IL^j<C'[(ojB8O?Bs
%_-PmE5W.#Z4/BoN$Q/k'iUDss#OgYA]tQqEd1:QmNm[s-$B;&H#XF_K)c65n"7/L7Z)]]aiZ&89e?idAYX44=0n`R&P1qR4)\#H3
%?c#($S++otV32,$=.5\+!gI=D9!86.X&3f8M0;D@?>Q5='2c=CC/L&_`GuK%TUHg(5&)rj*X"ek1[S$r[*N"]Z,=M2qGV8+g2dH[
%+tYir&=LI>[tV2`Fohn,-]Tdt.!kkI?ZmTC&;\`DCg!a;\`QhCL0rjT[bXPrE'Y"7Md^12kSb7Z'6`lt&06"N-3StgZEF1YWADhl
%[H.\-'LnhC1-08eJ=!:/LT<9S8kc%A[#Y$/D!-Yuc,"E,YkdW&EMZeor>qZ(%caYnK_S+&7;lVHT][nN>AU$UEYcDEj#*:V/BU!R
%.<!nn]>\)[aX3IF@lG[u9l,0D)1"G6N5g212)7_F_^,Z2KIN98bc/d=EUtGd@j>TM6d3WV"\F]m(pRM&V_8Kb-1BAa#jVna4uPFK
%\Vh-3qe26TF7H[=D]7S(__6eUcD%?n3Z1s'/Y]-`LNNC)<_6<VSQ?!b]`9])=haS$qN@j$?E-.PV@;@k`G>V!^FK(Q];IdWdiEZ*
%h6m[_LcK[+0mF-%V)A[3$gW(<YGDfM2O%8-3NBM'd!WP&W.f=.e^ps)Rr,@OmOcoh-/D&=KjMN":ZF,VSU-'?1d@a);q3a`GG0Q,
%^j2rZNsNA>2)^p&)K@-cocCg$e_u7SZ5H+8-i[#NJ.RraIZ"4lDOKq5L`V)g$%;"[IpY8M]_W:u.)CTgph.)Z'EE7hppC`'>ZK-7
%;SP%d0+KVt=tU5_NgS$5#(Yl)BcDH8R[0]E#e3](<.63P3lkNtoLp&J5[2/h"Z9:Yg\%Hk*@.5iO9k9e7UR;S<j6&9K*>`kC)OWI
%USpd4Eo_$q#4"oe:hBS?=GiRK#1fk6OVV<!kGoVY^8%*>"&q,Rd^gC@I*inC7dF4+rtie4O<.b+oMG;bQ+f;Z5/lIQ-ou;XaFR=o
%k@o,YWE-'S3n#3*S)u;UBr^$3/]dRC'U>a;CE;OFP_E=!qQ:[Jfm+lW$JX*3UMB\#R6Z4V2p\fj?=^n8O<HbF4/lC.hHU`(lUq$`
%JH?r7>&aTf,uc1T,o8hF0"rfIrM??GZ21IU:r]$10Y2d4`Z/,]al+4mJ3[(2#LgXc-G4"+Prg6*;@$!1]3Aurm<I6!]TUdXcp$:2
%-[&,dM9SXjP"YV@WoA<9V3ARKd?)IZH;/=)T^"I`>g2b,[+f[jKjR`H9e?cY7a9b$26)V)e'kGAPEl(#,)*1ljF\(^e#W!H3Aj?!
%iE',se[eU(g0ml#Q`,XQc;4Qo=,#7WgeE[\^^I0ceEO2/7[hSNKqJ:eS<-n\\!/OO!1j4<7F2LI&ILGH-\VgBn=(uED^5T.B8/'L
%BnOBZN',;7pFk!7HboWl%[p<PCbejN//k5A\6o2GCcg0r<beY;L?_K09'maa,7)S%AMPZt.$jC%rF)GU9+]D&^SdGo2=['M(sAXW
%k?6=[\6Z5adN:?5:Eus`lK`B3l<1H[KouB\B,+2RY$8bq@QGpM/ekd!";UIuMm.c(%_!7,oUfN@"g.[?jV\BoSeqol\9Oa<(Oi$"
%CmRW/>,;b!$F5&4<RH8p\%kUQ^-n47J]dVnWo8A5_M]U,`*'%60RKoFThN=BJVOJb2P;3c\hS"sX6__d2%mZ[.0RQ=G'on2s&C!c
%WrAqtHRA<bWO0B%KD7UZIR5D'g?K>tVoPXs/I1Y&f`u6;Pb74akXTd2LKqXm+^_"b.GIah2J;?rk>cH71tit;O"TBJ2Lr3iHqBtf
%7h6UY*U[o22\iM-o+j%^`:/)T2=GA0B*Z*M=I^#qfaD&leEIVRe'lQSmFP+Hk!uskkd3jrG2[VRdHG$Q)#1uKg:/6,,//(q/3as`
%JS:1Iff:d/5P4)peu7?sMQ^]LZ#8q^1_<!H*ZSohXno,7YA-r3eMORPH9LF7'j..o"LM#'&&>'8[#?E+\f/StXGZL.=M`BDbQY1H
%S]?$mm3<4kIm56rBbnhj\iX.GZn^@`OOcBgMWcNNd#nfa&q..tg*fm,bL1.N=GJNH"9[KYde&l)_AEVIc(`pH8Mh6V#]u$Wg4<b\
%`I%,;<0aq!1D^JFM."%'=0VA[\R'bSZ):r"K/c26\Z*$12/Chp]8K!;lAtU7(Ph[dM<.;,DL4ZBffUuF8)ZX'LISNR#*&B4Pqip'
%9p6I^2QK*nhL;c(*9@TfA=,tc*)BERqjRIGkt):[b%!k>7kmi4L&1e1Tl4GmK@2/U$*SnK:N9>R"7=as+Up7j5?HCCMUFL]I]IdR
%#"-6f@fa85DT8`qg]m1*nR`Wup<'<3\fK]V:^Pd)G=,pNHJ9#h]?$P.X([N]bloL#5#O,tb8r+ao6(t"=L#%he?,_")`1+IVhkt(
%$@ib\ac!Tb=kl$J(`D$nJ5!2I5n-_9pO`41PDqk6qS9M!&PS$8/%a))DPZ!L%pts5aoZ9"@6miA&u9V!ScNlinhe3(\G@#LJtcp0
%_ENGR`fgBgTBJD<$.ApG!%s-#c$&*uZeA*['kER1-VTU/4CSm/V2]@3RtF$8G"@$2!>pKiKYQrtIV[b-$af.$a;*6%CN7fmF\bWC
%M8DW9L/nr6R/Lb5Ahqc]:_ctf;9,pe8tr$W7cF5:Ws(i?OBHG-*@Z)K[opXbLe]fsCJ@'[0(_ncFIKDB'A_dYg+>-MXZ0;QH7N/S
%ElQ$a#K]r2^li=NV-*nYNWK<q6"^40"l*B>3eF)0K4O8C6R.2snt*83LuOFU)Pu3cF88AEa-WcY>8$]oO!t+,5!1SWLOsB&"rc/`
%?2<TODrPQ:k8Fe*Js-jRQ='m6!JW^FJFSqPa6m$4KhZ@jle,2CNR6<o#s$eBLM6^&GX1+PQ@&&$Ye)ED72;L\Y'G:kr0CLB\u_]q
%o^ZF2H0`#YUJIDarcsd<++1L]i<O/rep/WMI*?KClqF$h.)e^=HII>c/T7.Oc]a:bcGjBM4b!g`9J17tXA:Gih..m7T'Pn4gLFu=
%\\!/G\T2ppS4k\n*0]6h?GPrdPD.!%6CVa46LTdb_Ue7d9g16%Z?.>)hQ/*>Q*ngPSuF_GR@OSj!6sa(k!gZ+dQ6+Z[%D2Raueor
%;J#5b\1HlODj]NYq>.b:OkZh?9=[`[8KXuLbF@+-*4'j0>$uNfM.uD4jN]Kl1B2_np-`"C7A'/?g=Mhq[,T8@G%]sLV[Mn6]D3X0
%^H#<d'M5.Uni!s7]lO]k[i8"Xm^d(_oUr>PC[FdnCI?rkd__CQ"DEOg=5KO^i]hit=F`?`-L/g[")7_:Yk0B`+3<:"c0`V5#BI=S
%5s%5F#.8c<J9L\VI-*9PC3AR+pg^;BppPK%h4+VU\hi0@Ui2c(&^Z>gf-bLke!JZ6riLY+R,;.#h!Y!G]"D&YecT(jT:q[LR4[CE
%J%3Ag'iS_1%XhQP.bCJabj",L?`Qlrr(GFO(!R3@YV\LiEgFlP[JGm9T"_c)Dfn/;Bn!OS](0VOc-=l/MI\Vm1-b5q>(3U&W8UbX
%1FjdGe6_HbgtiWXFg6-s;n'W`@::$W'f9U$#GLS;bCQdQNT7!5:ofJ&5<!rRf.&TZ0:/_;F'djG_qnGK\N<!ReK$rf^"3*c?(Y;6
%cY)B^ga^<#=2T@Y)`t[AY]Y<UfBVr'g1eo9V<R4dh4'@1X-hQGf=+G!J,R;%aA_3Pm&Y/*r9W#b;qC5\JZ[3<*in&*<G87B\AGYr
%Ck&%jnXnO10?icUqXP%uc*TU8[cb+A/-oT1(S"O");MIkj5oXW(iJU(9A.k\bpIM9S)mMJ90He@H23R7nlp]QX3AEGUP`9pXOG]R
%DH/kOh,f23]k<?Ea(PCRma'eWVc&uOBb`LX)a6@E1Od6\XWD9dqa*QK[fUWbHaXd<C:A8-Y^N!lApfA\a`Qg!Xe)R`l0"^?GF?YO
%q+XYcW#;AhKC&Nt_W9+1Dl[6.QZI_[I`X1C9aA(0B5Ua.O<F$7ma836IBpGki7mO&Aa1tReX+h+r19fdgl0YMf.H.a4t$-7HFuAj
%=orU1gZg`sC*Bh3WU'GXZlu5nL:]W0WU&Z0(Y%_j&+LW\T9cD9od[>[qSULJ\npudD"T*dKNkj+!Sm1*LWlfZ>6PID@E/Q4`KTC`
%X]%QgY4RnDH$]1oIWu4%IVO5M=upCQLcgZO4'TlL^,X<[4;c#Sh/ucmgl15K;^u(;;6-[&VDpXtY:a@gU"+0"[u/+m_\Y8[aY-,a
%>O6gee*>HYhRUHNpoTI,"0tq0e"#J+SLSB>ko&e5rtV!uIT9W[Jqj"H]g10Ad]t04:L61[-b8U3A+3F2\smf5p569>bmgcepc:+g
%3Bcj\;d-B,=AR8350W0Ie'>'qi3J-q+.SoeKKQAbWs1dOS8:;J.,\/lQq7HG4mp%3%t8hJRE[cgH\'2,4dY`UYFhG%a+7%Zc3e2U
%\a=/s%XiVbq-b$5lD6K&nu9tFIemX<A1$B:oQ>]bRSSL*k@3r0)tA)3q!$VX_Qi^^#AEi>_H$*kpJ:Nui)>a3S""k&/YKAcAPrh`
%I3\E0&c=JX'nkMC8"7.,"uQ&Ka6Hjde()!pp(7"@Ec/E1>#-74?D($<*,`Jm"Y*hJ36<no=8110a$rE9kL;Chk:AE(ZaI="!a^$%
%1`;ErRQ!HZgY9#nLRjFriX8u3Vt[n>Vq&Jein!\R\X]1[lb]ReP>CGgI%br\[9Re>4/cP5Se,[jR67%CDc@K\/uM=Wi3uHeN)6/+
%ju6%uL/*Ki+C_FAe,2=-^A!N\/@'o2?$]]N:i=R2XaJYf@Kdq.j18Tu^u/;I^fI]\'[Wj:%F$"okg!npe`uhZ^fEbeD=PHE,!3l*
%d-cXN.J./Y]%nK5?(Y@I>8>Fq8-kiD*78M<DJn0B'cA(64Kode?*0"1a>R`,[jirc"h-Nm<`3fuc.t(^%0B]:P7_V`DZQtH56SEP
%7PhG8,6\PngBI\\K":r>L(`#$WRIlH%_@1<[!rtK.T/+Y#W77+Y1TA0VA?SHOmYMdJ>.FBTr=.M[^;J205%ObXFrU8"1ap)j/$'P
%f/s8!j20KnDI4-gq(61p!J^@Fa#7!kL-H.H)h/4:V1NR8",GlK5,3J&%TNO7`PprOeikiM!M>7j_,/!CH[$73IrPNsk@P0]TY"aB
%?ms*.$Ug%Nk#tfJZVRBp$5anl-dL!uIl:L=[<#99`jN<=:f&4EqWWc4b2irJS^+.*e`&.V1Mm5-aj64WA%4+rb09dD%7?.p%A?O8
%Q=eB+.u0R#[p4>2[mU$Lc)t<U/*P<]AJ(=/)7+8%"Q6a)9)IRt2ub:-7E>,qN"F)M1e<(-D?%BhV#L_JT;Xc?TCSI=Mup.r7"kDj
%[!@$gM"KD'F(dR4r2,TR^T3]@i"_1_BJaK$j\&Qi<&h(dV7ZH0+6YEd`5Add'EnYc5YhI+%K-N[3#':n(/d%WpAloX(Fjjh>]OnZ
%P/Dui/ms;Sk)<QKkUm_+4a+XQUVKH9c;<)<_,irmpFc!I[lY,VH!p<#.lR0Mf+JM_]J"8Kh>FuO+87'W_h$u,\E&n3i-NL$@W5PP
%T+=9nB@,)d*2Y$[-Q^ia^!a3C/Sn\Hqf=(kpu$PaCGG&kP"Q?_%gcBd,eDb&kX,#(o]O_e2nd:]?Xb)0WU'>`nGpQ@gnpFU/\CT^
%-LtsmVQJ5b*[(L:ni,78!&_Qn$CV:(bsR$(eFp2;!6\\++Gfk*$:GG5L$OI,@(JP8\q9sLr"(N_\8]>PB^"a!<:m9;)RE'2c$L"t
%gqsYn\\SG50l#kqh:&h?^Z^Tbb1%RN36_$$[_1RtAd$IIVT$n*?.6)"V4G0,OJtVE1*S,RgLcfChol!kJuqHGWfh8)p*+^t,o+BE
%j201AqlZQY6I#;h<M<%8[[1e(_J=uB`7EY2Dn"5q+R/^DmLE6hOJ3OB4c`BU<Y-EJn/R05HI3K/;>qk'gZKQ&(;1-$>pb>]&XS4j
%A=0lZf9Qp8)"M^cW/VZEd+I:XN>j@op]5qX8no$q<dLn&V]DWmYEZn`('C8*1hSFj<V'cGI_'D>:[;gk;JY1hjS?1C2V86Ycd(*8
%9QM,Um.t3qri.b9#_5`qjuhH+d*oi4`2Lhr"f3A^)EaID#b%XUM9?%?.S"#^I!QDk_4I7nC7W]hO4Muc:C*,k<XL)<7qJ^,m3Ar\
%Yg8d??a/*q@f3N-#a8EQej<4=@_XK+rOlu2F_EMXe80Lq+98)']7DlM^B&3aM?elL1jA=/JTBYoC(BZ1+=hF/!gKbd'Sm#dmDfQc
%1n2,&_VB*"aDY@U+.@7,&E!TScd>)5MnB(Zr[qLqluRi_:b+Y!k&LC@<=I2DJE[OhcuD11[c,Uu]EAS#^d=Io?<"l2NtFYAm^9GS
%G-C9VG((dml:.7_&\][2RI[rP-MBWn%fFQ9_G"?]&C=n=*.)!^Y.qlIa-#[<#[[8\qL*jG',I+S\]HYK(ZO$[YG;YNKK,asTKTp=
%FdnqM%4V1,pF<ZOI_AQ*d2lUAVJm09-kHHLa45k_$?o(OD[1&9!2'ntNZV2=\KosFG.Lc"DXCr,Od^H($NY!#^NHeD*CVp7W7BT4
%=k8IpMf'p'f';FD$?r\GQJ=R3eKN:6CEH2<>'(8dda4CbQ=aB1ke?Kk63h1P%EU+&K33]`[L7&4_Gj7@fAcX8"TTBrn>CuU-<e[M
%mu`!K#X(nWk+_N$G>Q@nj'F/,&aEa<!@!iBga?9e^.so?+G;O;>4IBJ>&@3c%>C,ae[EjCS3pYSosr$"R5qoR'LN95<odP)FOt!S
%Sob]EP+l;8G1;UNdD5&f\<^Gek[^d5OG.:`L"%]V=>b2O&;N;M0ja?_U?Go5S:Wk@/NfI%58gJ\)34L.R.afkM@tp*Q,5e"Si-J>
%kr1PsDAp[R0"#$R#5<MTRtGE0e-eYhhR1.<mcM:V?0DUEkb#IQ<<leLe2N%<-resCjPUBpe\rZdNSjjlGsgM-W0UcXk)3r9'uf<Q
%NWS=ABQ3BoC9b:<j6ItWDE^,i62p_3Hd]dtCh*:gnZ)KP/hN5s^+Cu3Wr#ka'MH!D&RF/CX[.n_4"LDE21eQNY"YLg]^)^dnH.*3
%(Y-OSEZ@0Jf8m./?bZeL7[-l#BrN)iW6"?,l`J-:2UN8YN2lC?g#.ad/FU[Jpr>4RMoB-$]!o+mI]m<YI%",#If7YE+5pOBgH32!
%6p*%aW)6XsL2th(1(*:-@s!5*.Ft6SUG>j6Q])2qF7j)]g-<fOO)XGQXJ(Ng[!uhq"r.T?rKFWk_D+1,NhR`,p)bP"".+j8HMg)Q
%+2`f-B;P+P@a[b1?I=Kg"U[adJU5[1j<GQ(7A1f.+j]#*HU3h])[T>r14srn"_b:VXD9jb%a@hs3Rmar6(,PWmW(NWD(i^8pc(tF
%b!YE"TZ&ZO+*8uTfEm3%F\s<V8;6iO@g)fL[O6/I7%90:6G6j.de8JGUR=`$3*p')G5D%f/ToDR*>^^fQ$.u<Ya<F)%oa[o>RrWt
%(M`8Sq8]sS>O;@*OIRbb2O,B<RSDR25cc3!cnnau0<Qllmm$m\9UP"oKbjZG*M,FuU4j1l'1lg@"e4S(-K?6/Dg8e_p+h]<O.#!%
%q=4r_q3:=.%nc]s`krq`I,VV`*jO:G3a[+aT=J&dGWK2V0&HfWpDcL\?[+3\KKF=]s)c!E>Wuh539bhL\U5&RWJc2%o7cAu+kAZ<
%FM@6L^5:^r`W"<]_K5P.@0m%3o7cAuGnq[M:OT&17B_%JT$HL*JF402G3&U"DPIq`*0U_:E$!YSEnf%jO'%>,QIVm"GY6GlMqM`H
%6"((h-Ze\6"Q&u8Lnd6N?iV"V)M!22CptE"W6W9?fY!ja>%'oMDJnFj)moh)U!!['CO0"g#JmF=-nf(`'H&E08URli1d+[S*_09?
%^jGq=(I71e=J5qHKVL&fDW9aG"f^"c8D>*;$^L1,ZZP4'$1CM.53kMu32)\ceOeHu5+;o_\XR#Hf+cn3&VG^J@YL0PV;4QC&m,1$
%O_K#:Sn8lG0hT%sfX#_6dL*Ghk[>.;=qPYKp`af730K'6k&CWN/Qp5u9=%I;;5QDiUF:I?@m=T5ST0Vc7%<g@E9Nt-f*_6s9R!4O
%Zk4bm^ag\YJB$"!?AK7#a1oNc?Y"RE3X1Q/b0.OkIp1'D1`pikE/#_aEsga8/+gqrn_Ccf,P#aa"trg6aLU=[]oi%D;B8W,V??_V
%9V5r-K-Kct?I,kS,9l7]Gs*NA1\.LO[C.*IP@J?u0kq*RW$.f`hfrg6>PLYsEB8hBbj^,uR^!MFBH\lTI/qO0h;Smmj"Kh:r\,OP
%?0OHHX8@,kV*BBN2MksaMaI`4I6\fMH$c+ir79F[>JC!+OEI'uZ1q)tYKgMRR.2`2p2(?.K\M.Q;FHo4FiV*0)XJ(BWk]u5+_8.d
%e'fKrI./[i.tp:AdLOB-G:P`RP_Ls\.(DN!7&Z'WY[o"S_HsU^$X1o%g-Od;8b#H<)Q(iLl1\Jb?FiLN__oZr>b`_/K0\XV'W?gU
%4Z<K.d4B,tD/5gZ/E>dTBm6+N09qWF=tJCbV4`7_qFr*23m7,IJBGuAZNC&[J-TN>)`)#X\m+^;2g1hK%UubKZ+N"=IHoJdAcPY)
%H#J;Y.(Ar*T?4gCh;4X7=PfMRHW+e=gp<tG*?;80UuB]kJe0pQm/A!$Q\-JJBP*O#mrNH$mJ4=PYkJ@`_teU,m!qb*I(4X<2\Vc.
%=d0FUW:pKD$G*o0IVq4sfSHf<K2;PA5S21HG_/bnll\EZeWZ"P20S:p2BkhM7ZdlqDgD[,P5DVk&S+:2OB'c`+*cNr7nBh4?5PdH
%/gr3rE'dGHlK[P(WaLWh/9M+GUPYn/4Ut-TlNtr2=#hI'r8Iq)qj:4d2H0u6OmsFt3Z0u3VMpdIn6(i9UY'dPDS;#f1N+IHhn^II
%k*`8IhW2=XBBJl<C&MT)q$+a2S@[Zkjp`"59:qVbl-LRg%3mY>)hl2N;@h*to<?N5g'5gGZh-*>4H]Uuo7A1TLRadqA$AIX%JGpP
%2\DVU:UMfSkh1s+n%?%/68-#U-d%#[<p8Y!@r)[o"YMZ9jZYMQ(g,4,T/q_)(8T^q]);i9-p/$a=^I)jBRhZ7D#4E:7(FEW\\BW>
%o5bN(KP)g>p`\5?X^6=,HZ!<b%83@ha#Hp/es`rVg0Y=;'H1&,Ri)u)?M]@Ba&^_&bkj6*?)frKlmm_;,HA^MN.%,(7R_=f15!L`
%Y%Z063H-Pa4rZQ%hl&,?!B4u8N"Cd<][)&I.+@N*6Hu+km&1nk,l@8TE0=bbWJE-5k`]Q1.BdGG0gLmQ4!i5lWY8f4ZHAD(OnBBj
%6@9YOP3eND--:TR<g)g9Td7a/n_<8r1^YZel.hKbg$%-)!oXg-e=0(iTgt`7Y#.[@7CYa\%db9S;P#n;SH,oQXJELc5'FR+,:RQJ
%52Xhu[UCKD)8=C0.t>@14Fc+,kXg'6mYBaKjdFQGXY`Kpjj@e$c47sVb!F<k]\W%=^)XET]fX^n3a8`4/`D*?#&5+*GoJ/k%W09H
%*6k@Bb0[7[;=J-24qOu];;`M:`+g"/L("ZHnRMgg'7gpj+H&5<Xpu>EF7ajbg7/<;BOn:E1mr0/I[FBN]Iuu+F8YuIE\CW`kJ.n\
%VsDHikO7Ttc_nnHC2.[-V0H0/J'aUYfbo-/k<(mc5<\4/L,s#0(U_q!SYTUoQBX)BX_.MFi7=gg_N)u9,s;jYXou8rFmeL85c`?*
%oL5g#)jGMi':/":Sgo4#9D3]p3X]bHNno&\#.7X(E$tO.PJZm'7&uod]BNtYiK2nY[*9[KYP)(FP5U'QlbHO%a;_t;IS;cF*!N]a
%S5X\/b2!:K^kF-4[>!O>[o^:L3iu0LSl;R?A=eG!.85H'H8$Gn.\`F+`TC^hE$mm+--ojqX(JL-nL&B5((3(/f>)D2(U/eRG@-i%
%<D(_)mRpX%OlaMo'Dn:_Lf*0\f:5?([FTjDH?X!QGCr\Lnr)t-kh-EjXk`cS1>N_@c8k)'iM=f>Q,n#%?RC-Qru#KP7?/&/'qAOi
%erHLM\qY4;StBIcY!rlbGeHhDZh=0<gD/rt0dG[ocq/4MJOZ&'lsRb7GXFPq0/-Sa;:VZ;(Y9kWPNa*]D`fj;^b5P,"o:EZ]kc&E
%".g]GPF?C?,#=?kM4h;Dj=GFmLl$Q:/g>f<i'*X%`'-C9_)=E1Qe:Ka+*78,L6L9QkGkrm@"t$#k8..H'+$[D@\7".T8RTAPLp\h
%h*";<T2/H<&TBb3`'1r;^5,>$IM2PUep0r5pFm9Xr2a[poGg>0*s"$aVu!RU%[Pc1Qdln>Z-n,2T4<5[p.lWN@\;Nd'7PL@-2..G
%p%9q+%%Pu5Qdo_&S"V2&q9>U!2a^=+Mc-4&Ph>/#<UaI;hhcc1<D>lR^`5;<Dg4O*<#/sEXhVfg+J90(Z-P)(Dh:%!M`S,hO%5W[
%W*q%Hq.95EL%Gohqa*&=L7-]WQ\%\q\3imTMqUpM8;VbDZfEOD6VHd@[64agljI%=+(A]O+1W%O3\%D\4\K7c=gE0`GN:)pf<1q)
%2WAVu4f<nV.&ad=)2%YdAm^h9ah1J#7j"Z(q5HZR.S"udp][W:Of/!%JndKR:ZQ7)%B-#/%:;6eXEYS,n4`5sM!1&I'H@gCJY)9n
%d82]g(_bK&.'4Vd:H#P1DG_'j<1aYRYI)N.jI^=RBqs]GR8@X"jLQ_0gMF+3s"'gsTDo]t?hZ_]cN?"=:NOatrrThQT(E!Ybe\C7
%H%:/'3/@Nf`Bu`Mrsb&>AK:\.\.b%jn@sg0W1mK#4oEW_[PM:]4o]HY#SL&Vh"NiHqS7p;cbVfO\2bW.ejY<;+kNcTqld-h#=]]R
%);J\'oL"S-5.=_P?Z\5#]GgOs!Pa<%Ss@/VO6r^ab+4>ZO4t0RDN#=+Alo0akqU2'@o4[Lb/:m4S=VE0O'<#731]+t\V^F;(G@'5
%jE6i`<`%PT6EO!hBg]#>F%hf'RZfP&0WeaDN".7X$:ZMeimPUW1&/8V.+Usmd7U%e+l*Y4j+*+KRJ)2_A#QCA*UBNFp0I#"KNI?S
%gtiTWUWdnLpkL'Pjd_L=Oi#<O:&!GmjuBB9Jd>jB1kig'C>.2Hgg1Fs,c#JsDI7]Ji9`<T#39(.W$B3*gpL"M_+T'`A,@Q3A=!)]
%-L\Cgr?l'ocnRl(7k]V%:5is+`\n%2U6mAD^*+`2,6+FXqFI;^b,t?,HkDW4&ODJkTc,=.YgA95D^aj)lJ0,\\pVgici'@&B&QTa
%;!`9'qGu/,Sbj5)WgcNY%8'*V<n@"!.Z-i4R\2f/E3PS($0M<)@!Wgjgcp:#6[@rUrOIELE$!/<?Y/Me@M=enT(Z`?ftLgto&HU:
%rj.$fK\P>s[&7D`r@uCE>*a@DXoB`'OR3F`pc6+K7W]L_`V+WOHI\"4#1*!s>/L$BMjJjQ:([n@e2B[;bQ&L&>cJ%BQQG*lZl@6]
%6V$69c#;AASl&:I8ECG!Wsb.2`)@pZ4m5%Me+`9U\@-):hUVk)%/^@$b.et`lZ<5')NO1kZ[%st@s\D6Z)^u`<)tfKh&?4H!7Hgp
%kOM^+8T3IfG9?"^1r]jn!5[XUh-Tt)h%GH4gq;D>eOt.;0!XDGbtW06XZ$riY?eP0Y<&\c6_Ub^BK"Ik8[j/L;03$KdN4,\^;U49
%Vf*u=@G4;Y_oTH4[!<A/HdMJI9JJCuPV"c'[(jW?KL(i3GW*,':ck:S3mUC]dtsK*\Gm[,l)U/0.>Tmh(UA7N0?QlDRR!j1l]V^m
%#NEiQBncbiqs_Ar)6H>"51e2($^I./(RMu+cB7uBFq!8V19acUS<o97>(pRIoDb9Wg-\\/i-e.sgQQ)cX4uD*2<j>qV?BZoOLeeO
%Eo]PBoAn5i:5N$=*'"-YS92<m\-P\5'VC^UI9C:gjT>^"+Td=h(q3W=-6h=6"Jn=Te$C^lb=YU3MI3Ct3:S'mR9B2%Y*ml;Zo9#X
%lK$Q2kopDM/%ASLhKXgf46N#87&*?/55o)hKQ_,Fje/$MHp"OZ<&o*60hG5;mlnD.'!;u`TmJUoMhp?bPm*4&%C<6u:OU0RpCIRj
%,'u*>l<.!LEOZL!XBR2e1fA;l&\0olRruaB4.XSaSsX#iQ'of`_>.*9!k/5r@*CZ-js"8;C&Ld,WY=7i2ueEO:f,D,*`t_#*Z$JK
%.jPXB3AN`M#$.k.KTD3UC'Z-?"iQ-nN6l-\TPgUc"5^dgXtZ"Fc_bdR!7)(5DZ%AeCaO>a+,B1@>LtBMLJ&0D6LO(]pnk5rHLc"N
%nD'==q8+Jq:VjUq%;-9#_FXKnU+gC."rFlH%]qt_HDNKT)pIlNTj0UHFlLJp#5p^5,jV7!8aL5:?'"U\fF2Qq8Q:rq"6SdQTfpKP
%5+o6+^Upd!7b`FWRu5lI;chd`=jlEjlkjH<&YSd2i5!!M%YM(E`rG*<!KESp]k4b/)j*tOp=gJ%]1,&TB.!qVBM>n!"VL+fol0Vs
%co0:`J(alO:k;60ZQSL9;[LR2ltl%m8N@\hh;'Y!qiAfk$r'?aU"E_&3k)I6OiV*ZeZ!R^"&ah$0Ohng>e[o<4pcP.KLsqa8oj+r
%C:as?ofOSJU9]X8!A.aa1sRdLmPZ>`WI`jaPAC-:W%D+m$qNsc[<N.lkrU2R2BOZD4<mc;C%Dr(L&CpJ&nCd3qb9Yh)iVj.ZpWjM
%91br(7n!/3"/I3jjs*Y!1Jg[f/P$<oh02I8D*DEi,onWb0gpp.?G[(G8Mn'.4"cE.$7EL,*rMGD$9\Y8OZ_4h@>/U:j,Y3]kjPr!
%qI,'f:]$oB'k3gf'K^40Fm+Sq#.s8WH<?kj`lcX=.jQA.s57=>':sX&_n$SW<u]tPhUQB!!tW:F3ugB:c91SM4<\3dDHEn&!tSo.
%C,O(`LX+h4Z)^m_JVW2:U`LPfhZFD,:HS2iVY##h@CUY9@"gcCJVW3^*E"%;<FBA$BntbA@6]3KqnU+#'?Z%A'00JJPRT&Z.d46,
%4%+)8!tXGe3X7Y6copp+7oI8hn?@s]fR=;moLk4?Lpi4gi*dlt&*LaGE67;,B`fE$8<Y)RKEDae1c#*[%XZb4qE=>P%nu<P^dGlt
%aJ!/*]+7"4Y@SpSSAIQ&rO's#*6*PbiG&,5U=Xo#*eq__:&&Xr'E>kcE*LU8]">]Z&,f)S3pi$9#R3?Z0H?P"K&g;E*eoGp]6uTr
%.2SZ_*l^g5)ck+8pU%hGXY]*jLBDMsq?%6qZSn/PAd5CdI(p8+R:sA<%qD,.3-`T"g2kuAGGT8o!tW:F4#FL`i!1<Xq\7Bq_,(V(
%%)R;MZpT&Y8H8=,)8::]cdV_Mn1[mF6N793Os/SnV]C)Pl2SQ:^.d>W#9F*$Jr#OUXO/&5(ud.mjA!/D:N><$bY<Wa4n(/\lunc@
%J-R.LBk4sB/M7^'esGcJi*j.dA&NL"iP<A#dgcWW%[mVD%NuXTk.j?a>hm.+4LAkn:CW=#dH,H-+^M+^^K8+0!tW:JoaQ->&.Uf2
%&E`+hLOhQ>mX^/PV]Cp.q#_X^(iJ.7bYA!;&&V1)*5pIn"r_'gja[RWqB]I%A4ZE@i1Y(]C`D3^rQrlALV4TNH.l]"5:u;SLH^np
%0Epf=)odGaiCUUe4g"/T&,h[N*3XFn'/IRYLD22P_`7->Ht@m<\/a_J6^po#:HJuDl\p2K@2N100%J=dEI0WH0#5/ui.Q0(K'b6)
%P')(5_MjOGpbp>@*"q^YqE!GXP\!WeEe/=XI@G)`(][Iqm#Ye29q+CMF9#fQCF>PQ<KFtRZLE%ujQ'RToHjNK'(2<ubT[R46.\'*
%r8tuSotod+1F#T=Y;54]-11'j,e&)C\@gBpbqF!QkW"X]@fL_F.35g@VOT5d@`in=43[CjpQR\ZjDUH=gRB[6\C=8.B5@)_F7ui'
%B.go"C<Ydeo9m-O@"0ksXh>V7b>tI\g`=/r1O#D>(%\Z!Cbjn6:1ou5lh;e8:Y1Yjo6NKB-g>JbDHH;0G&H'`Xo)[d5ENKhWp,^j
%Z74$o*a[o?\]fX\YF\EphOJN02"bs9NY<Iok.dIhb#@JMe`?:Hq.+sGo=?D'gI[7Kbl!Lt[?SlTb^G7\=Y?HP]]>kp^Iulof+1Z^
%1#TqLaF)UYH6YM^g^lZ]%`gbGj5Ul@f@Q4e8?DX'$UY':4NDh2>kf:&f&a<>!:M[IRnWYU9:=J)ekYkGr2#-h>Fd$B@I\_j,FucN
%F\WelP,6V$[,1e^XeC*j*c9c,(5Ii,2d3P@3u5"BQnI*FXP:JZ"3/bp\Vgq.]e[kL>rhh'27\fJVGQ.<*r<3tc5]!89W%"@&`bjt
%@AI8X8Y]G<4,<RVfcfm#kECk&/GH.bZuc+O^>(@X=(])+Kq7%*0N2>nQ6-l\pOToZ7AP[^+D(_!q7#Ua@9RN*?ead[g>pH:cFj)^
%+%`_?mP^0q#TYM(ZXfjVK+qZY?WYITKiAD-:"aH^QV3ZH4/b5Jq5qh@^/.nZ/<ep)(<Rrk&G:9tdHN#Z#I>H4e(VX6Nh.g9@ot`n
%Y1aDLjFd>gC-QYU]E?:IPd;8jAf\Z($IimE8T/Mu3Od\<!kW'1h_(uA&!WL!L@nq5KlT&;!.8.?&\Jm1SUU%EK2WP8jgQihiTnT5
%FP`Hl`rd*?E4_';^'%uBjtZELDC?aBOb&IOFXV:#7f25Ji,DBbH@bBfib,R#*Vas(V[q*[G^/t1H$OIWIG,O_oJ3e8H=bOV#>)PX
%DcS[O!7K:iZC"\Dk>n4Do,$N]P479>'.,*a^A:NLR4MF'ZP3Gm%D?QnL/TD$O.5$s.U)KsmQiZ"kH)=%r\UgM(O'Y,[OmI(MR?:C
%S9&;7>AQDqQ`;]'Z;<q$m%GrV9IFUN>3.`#5dUT3br"DF7G:qdLG)^;><1>AKMT(Y+nsHNHYtXObJAR+']/[c'6"uSr4\]\.[*sh
%K<J?joA,a;`qjf'Osj--(%#DXm*SIc-Q_&=ndbqMIQRH^CQ@Q=<PjoScc`u6VVWsi(7qAnEP<Slb610uA3"(q`u.6brYYV@bG2kK
%4'*lCeZ+HZSU6+IAj7l_-\\rleMsHHY`)Kt@HY71WTn#T`6Mq>BlS2GF.&OZ/:TaOc!oq^cTSWkbhi'!#kN0dR7)>>9G>R%>C-?`
%SeN0R*I"_[Y)Q@8dD_lM"lPj@^dPf8GT2@-ad'iIEuu_i6gE$>"qrlVD<#pCF%@FFg]F?9Mk-EHbTb1?'InD<VU^NRi3e*fhF#=M
%:rGClm()su>rF\7cD$GNrAafZAa\p#T5-$4.\Gnd5>C"nfgks]"^C_oK!4X?lW9XAiNT8aX=e!#"?`fn(Z9iG#(*`G5lpWE!h.42
%A(f'Wg9Z*<P/?A$13$*Xg'&Y1=hpuLJ98huHt00ZG$(h#RXJ$217((VD_JX>ak!q&(D26=U?Ti$I`\YlaR+lh).r=$(u@D2A-KUD
%,Tra#V2VT>1S<+7]lf<c>)jJaV_+&_I/AN5P6$0!S'd*:Th>$'?AP@]]SZA"[:W&*,,iJY*HVqhB@dn487UW48OC+ZX31<m-Aq7d
%Fr&eT"it*?WC'eA:'j"m=/In1/:q3-/Wn15ehu'CL(=:MUte<1RWh^@@g@_@r(PM<TK;7=`Plu\dmP3mq.cD,:$912!!(iAdBVp"
%qW:3QCW?_:2DMdIpF^qtpTAXTiZ:%Fq3gpKD]!CIi]5@E#B">a!_T))f(dtb.?cAK9VMbnL5sfr+,7VWn;ra'L(DmZD2t;tr=^6V
%.GRr$?u]W@[c,[6`C48Xprr8d\YfS^AK>UuoYfcW-@MsjRHi_<HQSA=#A@2&>.S82l(I4CD_\3W%8jh@aU$WjG=^JED:q1aa$?#r
%[f8U*Y1mp*+lNDa,2r#8[u@<RIf%%s5aYiLr+5sq839)Pqm.-@dlL_=DpT1.LTT*n-ADW>82lj'dI9Q)p4;B2(SH9\5.q%s6$LaC
%L.S(e4%Fi1(nks!+%Geuik>kWS\*D$pBq?=WFR,,+H:Nk!otisLJ7uML"-3/Hc`:_+,iU611$.Sm71,'<Yndb.^2TOs#LLdjBr)#
%=A@Q2g#%`2%=a3M[3tGj5ih?#AfZTYA`#NsTkWrJ@c>jjF/lm"+NjPC;[7g,?tHX(<e6+o":7e9`nQR8bV"h>BMWL6jHo8iEL(Kb
%rWc;<49&g</6Dhr3ost-UZ+5Y\H.=lRLrg^+Jp.bWPQs[rY%(AVTh=Y%#emoF"oj'-7_&X??%G;1!L.9ZAtN-gh5V4dg+?&Si5#L
%bQth/0]f-8$YV/#K[t.JYT1Ck0!WE6hksKZRLr@ZPC>7jR\<3QmFH$eph`HA@@_V8Ja=Z*9V?>]!am2WZ6LBoK6./PZa4es70mUU
%1X4Wrlj003`B)D'b5H.082,^=(bdF8bKGN\U4kC]#F^e?9I;bBlX['<NDu.b'.T?K;S`snI1gmLCNk^7\o[e+r;-45k=1$fc#'%K
%4Vqa/X5qm.YXX),<nGHs>G!gpY<1i?o'>Ik/Jm5^M`7Q+a9'nm*;R!^T>sD2P8;gTX9;`k-HEl.'oH5=%p-`QZ@,QZgWN?]*YS!A
%P4[FT"WOu&2V'+=EaNn2VPdlA%/fKGfK$0$GTofTX6ZXjHE9#!5L.ePP'bi\X^J>`iHi1Q5:9/=f._^MXc"XG)drK`i"K:iK,t>W
%pa]%l-Omem/t6/Lm$3/$)IMse.eYF=4(]?CThj$om2K>MI%sAP@:@^WNNOlG4of%#S"CZJkT/p$g+9.X#KV5qc/:LB:@r'Ua:b]X
%"U974O-[k6(CLtYnBhU=i(9m#%oV%.7,3q[,?&1ck<n<U`1#P8X]+lb1Kca-"/L6k2Z4(MRB*3![;r2`;[SbDB]F.P4(f,M,O`li
%(1S83l15(]QcG[u_p,daTGsFe=H+`m4A!+/[m$pfB%HaZo?M'aOa:3RSQ$[AMYk#LB9)-U],f,:P_)!F@+H?iP"5/K:0XQ%I4!<G
%<IR-aYcH!+SWaq6qsHq&b+3ZflD:!($!Q(FB5N%l`nbe+5FJj-IF$Z>=Ma+3kDEI]gIM8iM.+I?58OmKr0"M>)88AtPriMcIpjqT
%g)%EsW1d#"rCJ[m.':1WeYjF^51IeD(!ll=]iK-jfUiG>j1]O-FfRS_4SbZF11Rjt^PgZVDC!-nAJSoh7%RZDCpp^6?+g3E`a$e?
%P7FCB=!QM9(m=L2>SB'6-oT&VPg_*H[s3kiH3\r&^EBGtSUkM;(QL%mp`uMZK$tsV4.j^R0!>Z%AU1Oc/fe9@Q?2e#ACSc%KXlub
%"`COtDX?[/H!dKCJ"%,OA9aM:A27:GOZr.j<;fq&5Ll50:g;Ktr^l9r=n\Rme&o8%Su_m7MH[FbW\uqqeO2HB<nQ5n`M-PdC21UV
%!#E=\#\T3L7Ac-:%s#B'*2E:rh1"%F52B%mO3I9of/5eM3rab9o15WG%ej,5X7>T<$<KE\>hEboTWct%56q?ZR@,V4gP&h&H$kuI
%qk!'c]CT`b0.9i9gCn6I\20'@c3@Gc3(;!kl]\Y)]8uf3L;&tU::+WH+V_l;^D/(L611_.22P%A[a6V_PguhoFKJasghiZi8OnKg
%e>ID$IIC+G?!AglVdE1k?U"#SCGuLCc0`O4e^rT:1g*sNDH/V[=^[S'1>$sZ_S!?;f4!-27W^UFcr^A`eV_=I0o;VN/W3"k!Z"`+
%egGVA9*n9'\/@$-A7ub`3J\W/&cl1b/PqR386Kksdl,#ujP&qto7JX_(Wcp519O2;rN,&m%jJCgeB@oM"g(gV<8@Qh$X0[L!*\9;
%"g(g6L+3Y7aoJOFC"*55(:76K#$V%a"g(gV'T`>0$X0Y6O/@EGJl\opopiOL7<ip5[EQSNYEqnJmH1MEP,hPdRJGAnN>"okninaX
%FY4DqZ_F[A1""Pf4?2*uA*r=o*c,YXZSSL:0\`IK2Lir`*]W;Q.80'LQ+^7_ImK,)&m(t(YW]C1'tO6nn2l?>N8S7N_:W0HVEt<b
%'<`q&T8f/'Fe/oLEo`tp@Eq%RApD46j9WF"c>]aeMFqL:=L*=e=M=A:VZa?nWt,Q1B8GHBI9>mB%uX.#g_FlMjSL_j%[ZR;Fu)G@
%2+-t,cKmaLb]+6TLr%BF&#N600mUA>R`VI=8*r$Jdd;)'LkIL!dd;ZD,?FLMo/L2Q:+@8H':.jEELHoKq]n=UJF4iB3ARHD,@aME
%M\QGI:Igee/N@1^7_i@,qm*o$a/DpGg9l_dmN;c2B58)Z?g_3Rh)Zc1f_rCEE]GAKo47IP@B!e@pKmVG(f->'`])\EB>KraXWNo-
%<h,.'10d?$<QED?NjHlf^gcZ3O66Pjm>+,BqSDO%ln"o-.JmH*^'A_cEeYc"(6FV9n<R3Jh0:IS^BMDaWms>XcAYcM43oB)\Jfi9
%Z5S\rXH1!ikB7[%ZOJ?bK70&;QO"_hl?pPP_CFkT"^N\7eF"nJUg1rGHkUsR<eFm6"lj4a:58_Z"H>*CU/gg3N]RIOW0o>!Um;6i
%'*$J#5esE\IB<]XC"cOk"ZE7Ne8a=8+D"6*1lg`T4(1O#`/\gkNYJ6!P/)/!XeX;cE$3J4cf2S@2#8(Mq<AE2TKqlNf02fr-P$7=
%5mtpN[I"cAJ8A#%+A4LY*F"4>R]?p81:e.5d'U^h2c'&pX,cLIV[d>%n@D6#FoBi[j(i,th.O*6`jQH]A(k(,E(j1lK8&r62^SdM
%[*.UiR!,S@_MFn;MXFOH)N>+A2dlf6mMD;pVS.'VS!!#l@(O<,#>H5(++n[Pn9h7M!2Z<MlXsSYGOWb6mg:)VbCKA9h<\UD%5\XP
%9-\lg@WI$mIWVIllbq'?1kh%Rg0^C3-Kd%SccA-s'l&lh#\d(!.dE'C?po+rRD:<`l_F\RjeY*ol`;q<"5lN-;WW\#df"=P0_DGg
%-crRBkpb69\S3Q6HY:/k1r5-qg<@Qm[EbX*aD!.Lcfr8V14Lkm+f(0QPjM76BcffNb^nis!shRr60j7ma\W:>:U(]-@V)JtAhrag
%.CjO?Z=$;7]J^9;_A[VO048"EC`7,.>So>No2:Cq_$5*KMmL5/6elX1C`bISHa.B6OZ:Ml:6*7a@2Yu6R#<7<]1Kl&mOjoNk/fp3
%85>T1\,u4\3G":d_;]$Hpj-N$bAWq1;l2Kp-FINuV6>+5CbCos2V5tu^T<$;49m(P_7M8ZGR1HJdsgsu01WcW?8,->d`'4@+a5ZM
%p9!hSfl,utF3Q@--;4>]l/#SL7o9T$Mt!6\*1l4:<t88eKG>^O]5hY2p!GcYMoI,UlI*a\!N;W!V\?p(/q:e-+P5@*?9uK$bk\A'
%M+2NC&WZg1O[=D>YV:.h4FUZkpEdr:VAFq2P#Cj0(L,7Fp$>8S]pYTXRL6fP;+BgKZ*Jr-[PPoF1E1#Eg$.p4SOCWGD&RaAU$&s4
%j&>4.hQl[.k]u?Ja7lgAdF0-#k&mS!I%5&KFi.#@>??E=LpAJdM834W)[i>:>^^c*q`q7L;_pWg^-C#h.Z!7cN:0Q4YYpkJ\.n!#
%'5\4"a/'X1T4n"9@_*7@r/!G@>e5YLjY"_?PaXIM5nn4__Q>W%dr"%fi^7%#W](HQh^ZF,9s=p.ru-ACf`]L?#u22nMhpdB<$qTI
%aQEp-gS`(.8&`Hc!Er6F8E]XFhqkj9fPr0<IM\[WE5*7:)!F'WI`S/2/aoj$4!(TFU.$UK!k1U4\B?3('ZIodqi,Y@X)?LjXCf3m
%OY]//a-Y1RQ1)e=S;;Fejbq<k04)D>p?$;*cUn$-%u5);qJu?+DXkTYlopW)RIB2Gq<RM5Oo5dgr=84En`_E5p[)>Xhd>m1J&0Gq
%ikJ1Q(B3LOB;!mHqt=t'f>#G2s!tIkm]>+?@J@P9\(Q30WVl;P:Hs]Um`pt(i9Jcec<R=EO2LT#X8h*VrU9I,&"=e+-%,FQ`TNkC
%rVZ6RZWBB*I/^b6n%X/@!cI0c]m]M3eW2fkq=*D"o0<3LfjC>#rqZS=p?MOAcenZtZ`E8+*`cW)]AJ,:r7T9Lo#mYTIe!9ZX64E8
%IeN_uT7?_8F5($IEU3H#HL^sg5I[Pbfm;q54Fcn]TAR)t55XWq]4Wd(Hp8ZApX[s"It%((r8Bm?L-\O^n[m\.p$1r0iNHS$Gl-LR
%bQ%D0ZgZd6HSr3RZXLH"p.SiFI[U'BlX"H*qn29UMjq2Q8WNN92rD>^1;D11H&E!$k037BJ,]<;i9?T30E9p:?i2a/[9*Je[_)>,
%IZ&12H!J($DDh39/_Y:Rrag69s5Ve%B3.<7r-?Bo&*JpB$d0lP5!.M,g3.)^%SRfM>Q/!UZi>:LDuY.RT7=Eq_k*L7Na%tt\,Mfq
%X,M@CD0.Z(bheR(A&=:A9149R^*NMM*rNMo9=NL>D%(]6k#:!gO=clI9`(2Um&5]2lB:$0T0PMf?qBYAs*--rS'!pAlYg_M=QB,.
%g9'uCGSPVI=$\OGcK.45p-Z>#9\efGe)R:o@$cIae)5pAJZUt?Wr<S&gl]A&?u8[:&PXjt+5j?Re@c-q($nY>?AQ`[_qnpjO2OC]
%FC9be?QT(<a40MZ*tuumqs=6HCt8.$ReP[7qT(E6=lpsPr-2>@8uM\_$'b^KH\eVD+%$13F*ZYRcJ\H=`0k`28?TINN)ePAHZMS:
%^A7p7qCh@F2gmQkL(#+U_TF7[Tr6!I0Rn7pGt:'3/WK`#2kPQiNLEq_rVk8AddFI!mCrP&-I.,:!&D6QqauWWp--X5DGt/T.uef;
%M71^Jq<\crHhiG47e':W&Da![n!4'CLs#hOR<X++6p&-\CCEHf9Cec-#;?`+"#+.1*oA$dN\CD>")t[7?'\jr!+t5!6-M.Tq"BMe
%I/-h]J;@\na--N\iaMnacG]PG&ZpEU(EC4ng_]8pO)rJ;dZS_9874Mk@QX*@ipl,;ZM.C32;>A!^(!`hTr0L=3kmhTr]3CX?753-
%`=SPFdLJEWdFn?_1%eTd6Je%QC<BukAP"uUZt3nA[FAPr#X7Z^&DaB/Jko%nTr0J'423qU^39iLX4-O6CBPHc/^X2XZp(H==K8W*
%%u$80YfRunM+(F\*;@i+9Ul]/+=-NR'_aK=Sp9IT@%asnI652-,keEk4GmM];(6<1G7-:t\d'=b^^jTVN)l2Ao"dCc9GPr/4aL$J
%e8QbY.=a>aPB85YFZ%5TLr0WiC9j?i)cKakTD(3U&!gMM5(LUMG0'RESaWM4"gs./Pe;mLa"NCNh%q,8jWgi(E*/r4U)V3Gq;>Ce
%EVgG.I9qu9nkM@QRrX)$BQ4?HI27j!ItKmNR)GU(pa(B6E(lOYK7VY(_mU0,N%+\Q$ZiF&FMpOB1a2pHOg#AplU,.UqBN1kjHUes
%Y7*>VIB$M0pVH>kCTJNCn0h=$+KrG9p)V?53YRh5G:<?U@U,qZ1U1#gkLYL-8+$299n&aOdYGLHmXo/9O4s=]jF_jl(Mj<26nRk.
%Uf$0418aMrLBZ)L`:!:AnbDr6BM%XG9Ce5r-Y$i.jVZuNls:bHO0AR5@urm38e@:uR#&p?e="s3G=:e(s)l<m@#'Rd@q`g"(qcJt
%h<RGfnb$7.$jl2:2(:2qJnS^C@q`gB)"LAe?69f@YA_$!bT&U:^ticG(]EfpQ[Xm?+PW4'iNj^`R<<4f('4BA\i%g(("jaadZImg
%/4\PVP<6(sgtom3&S'UC(YjW'Abr6)Q[H?=7d5*nj@j]C,HCBRd>BJ^VB;c&:nq;KHf(dsVJIb%e)L=rjdJM[O3MdBefT9Z6"Sq\
%/ud;B]1/Zs=O6*jD_"o+glj\A;IbYm#]R)gRmb<`P8>\H-K=.=cX/k_.p`04jNCa9H5?/PrUlY\B.r^#A);3ApM&C>j5!kVF<5sg
%pK.N9,@]M=ibpD]HJ+U`h@Ssr`te.=I,E_.*q$@r%jGfkOY!Ed$I;=QDbO3]R9ZY:$SHBD^Ebi,PDc7^$SCh*:],h!k:.]`d-TWD
%>fg2310!`oh"0V6=h\6af_$g&`sj=>i:,BuM0?EH_*i^.n.],R+`u4D`6-k/:MLo]lpG">hS3;ngGlf7VWerAkAPhTPe-+u*Sph"
%epX[_-7/p/H(<R!/:Q&0i22/+LV<jQ:irs+kT+WkM80!0+OXMLHfH?]"E$74^\K2&RiBXhQCBeeX:fIb<D.7`$<Ch47j]gTO?2)/
%5$C>t[3WotU(`C]%]mB?@$RGRN@-j5'_$>XRW)VDr9f/=]=dm;JB\09*^`cJ5_7J:p)8IEh*-Y3K;[foDd>^ILj8?On&UELM59PO
%ZSNH#o\o`J5i);'RoceHZ$sIbnVsUaP,*m*4).N'a`N*0qVUI#auaJ_NCPCYQ#GX]j(<A\B:D<TOE2cI%FQtuW?_'/+C+VE.&!AP
%6B@@$'3(^cN?>k%F&'O@q-?\b7P$Fbc7eY?o(ak@[TU?2FoLc7p3(#b5@ENAT4?$'BQB+LA<8tZYGu-P?#/0"=j\(0B@:1lI^,/K
%bLB_^EZ*0`*\+]QpRK'cMJ5ZREp:173JnbV[]FSWJ'pb_lHGD\qh^.WD1aAYaD/a_EEP5dJYf*\'mV\3_qk&ah.ObgQV[,oH("2Q
%?#%R>(JGk3+U0QS(I^2P5Icbb>ORKf43>T,4$S2MB,I#"F>N%b@aX;M>Kc3=BN]S7!h+B?C[e7VaEfkMnn4<_^*X:5YT@1XMMMq6
%ZS!70:/b5)&c#+S;8FM8UC.NN,;99(&L1d\AbV4GMPu^]a,8@nRu#MY1a-MJ)+<^td'<"M\FN]=%:]+<DA&$e9GJ[?J>&3^F/_!#
%_sSrp'r`nj*/'a(^*Yi^"jX%hn&]?-F%(6f=B7t+<q\6E.fW=b1M#HY3.Z*"M]<<Kr$]F\[l>ouk`ppi#Mk&iYKC.C-pGg'Lp.d<
%8.MrT[&aPd`mR-,EZtmh<qa%Zh4FO.@q%.GAFO9ZI`W2J,#;\S<b,MjA'gt:#,-;`D="5?pTA$hLXh!pcT/(80-WqbE_$oEX5Ahc
%^7r_(9rlm"oqgoRZKb1,%0?>c#Y3(kZL\)j!]4-UaiNn?>.:oJ'hh"dj7Q;#>-\`jNn/I&L$#7.F5nQGgRe&*_fRY,`p+AR1=$<V
%:u^KXHJ?km9T^X1qInTpKO]R+20'C^.iR/2><*"Gc'*QXk11"$0hHO0^Hf,.Bu7c'C)opt.k/V_b\qh:7*/QU6gI[r+F@7p;N4c&
%.lhE`?a*WmlH[R"OI&@<%Ul%.Wr/W\g6;>4\]S2\;<:nm,,U"/OgWh%%d/LDj^aqCB$sD.-j%Fp,$_\`S8ROt_R#Hoa-;sbL*<uf
%W/qFHm!%:iLhZJm5@hC\J=?bpK:JX,eN=lBT5453Mq@Q?l%,hD'Prk2dB.+o!\FNu`!+nkM0.fN_(P3hB198BM?K#c;WPeJDj>pd
%Hgnc9\cRo#Mt.!O9Nh1^)aD)3j2.fYNLs(N"ju&I.6D`5?]5<-!<aVi6[-6rS`:=ANY7ee)QP*1Uqk.,d:?TF2soF]$m?8<Ks^&r
%dYpidPJRVD;j/)<X`)D.caG7M1jd8[B)s*)W*1;gE.>\8m42BAPEa=bYDXI]g67p;#"ZQY/\s"'Q"Gntg3.<$$Lc*6BHJJmR@W@1
%35V&m@MXD6g;:ZcA5(Iaepu6>I`5RsP'!-<3>E_lCV/7Z7N=fII!]'%_oWL"%2A1L(jjC4X_mOd%WB/j_HDo**P'lH=3bTCc'=L4
%Kb[qe>\VM%K\U2%Q\?DBA)Lm\&t+u3YUV`MXtd@:<Mo-g[-XicgCC_j6nH=$<Gb8pXfU0a$:#g>]:+/#KN*c<4SF^L/UUiM*j?;#
%fW!sR[-TIq?psQ+0KnA:%eoK^j%hF&Y@Ql;+*A-))3bEn$=3d.`1IgXR$)75JObZfD=NOuEeY_n78,FG)D)i6LD#b!0&_h^f%U9V
%22+7uh3)g.jg\o>M>'FmOP,ik7hhlpEe)(B)VLS3(kIS`G#BKZ@c%Q'2H7OYMfkJ3GuV:!aT/dcF>L_kX-gd-_7VKrOfW**7=EZh
%hLQ`A0])%68)Yep)9P4F@02-sQ+06$EfsseI<9=Q3ARG!Bj?UBaaKP_FG5=FgtZpKF5tBr;$)u1TehG@BlXRd,6q$ogL8'?GK<rT
%0.hJA]$E.D'uib3=;b#&ZUiYp\#.Jid5:8\\c%\_7L'(p.:YPQNE9tSAMKBHlZCoM883HO"@8s+/_Os*Q>:<r&CrU6hhP`P\8.a-
%L#A5_3Gro0Q`RDBSGu/hPF^cUWQO.>f'P%:':W1qs+QsaHaYX43<YO""VHBB"B=%oD0H3lE#qSu]T5[caa;i_d\1h5"A$e[PFrh6
%Di-.p@RX1`oUiLL\;(:/Q+:XG0&ZBS`fj@gP,m-O>2-ldN,;!M[RlmJg]WupeK\I-8Yn-[6opMY%',q,B6gB\/S1M(X=ql.^(+#C
%[")nlNQ]t)c;9fpc4pG!kUFFgRmUPC'3>1'.I8?I/aAKES"r_P<#<GL!V3r^'0K?_<cbP\Yb#=&d_N.RBp"Q\C*u'!`pI$k`Kg<H
%am:OAaYK*<N[OHQ1q"R=B3R)&63=qA)I8p,D-Tn/8X?hBe0`iND8Cl/[:*],UB!_'8ed"8g:$AaM(#)G2#)+!hm*XD?5!K9:0?hY
%:Xo8pk,=O'AJ(?4d\NA75B:8Bjd'i-*\"Z(;`.>)nSP%I<<EgZa<>MlgG\)r=B.LGZ;lile&\9AJmQL'WA"u'3k0*P[[j4E/6aS!
%(6DIZ<?th4'OI`G)9sK!&X>5P+(d[0Z8fECGsZeH'"g!&SU'\V+'DY%G_guOYOCJL2dn1>Y*SE1q7i`"<%sgIm*\]t9E-,%D]?qg
%>9Q(mm8[+7TD#e<QjW,WEYJjV!4\dt?[LOXBn@b=7@G&$L[(O5-Vg)b=qT>)5%`k(2B`-1[a7_gp.U/;9._H0,%QP"!+Web>L7*t
%`G_%Xjb1"6k`dH9VN=^a<Y%I$=T(RkTdWX#PV!Jh,d!*&g4B0Kf*`7Y<MYTdqE@qSGXCIlKH2C=?5@Rjl-1g'/V;8YQ4hHY5fJsl
%93=Yao>Kp:\M/R^PR\)Y7)6*UM<<'p219q3VP3_fXt<W\;>?Io-@ds>1iGC/#+=Lj'6/Jgd0Up7ci:@3H<Qk",jLSrWBJX'S4nZ:
%6F1+()=sP=q%X8Z0`$bZ@=3E\DOJn+[-k]GRRZl1<P*[5b)q7[9QnhBG=GKnTh1ej!Hf[/Nb$ug)HW88Kl0]iND6M-YY)!6(l-,e
%,H]@"pg'R*R+D=`]$.p*"D-7_5Bp7TLc]e>mP%sES/6`'<#SK_rHd1D/E0Y@YnqhM`J8VbeP:AO`S`Oi?<e8?EURV)o+:hWr)/0$
%YU;pe7ECa6Q/j4DdPr@C\Yr=f)-0!1'-lIDWY/g;/d3[en8_1m)3t/OGZ1/+<]%k]*Y]>8lEqZWln2;KBJs8Vn1H%fj$=p%'HRb*
%ICoJA%KWsTLj=]@]naW/m+kSlin6_c!3;N(.[Z`q`D+7`Q#LqfT%C=EXrUuG,\8_#6UX7JQWQ7N0I3ofj'8+8m24#0<XND$3MI_=
%kUAt>[&>=8"Ih#SEA/dHi*KMZTZ&uY_kBJSMpLuE8JIgP2TeBpqAC]OUg))gb]&;=M-0r&_I,uDR]NfkJdVV$@m:6gGJ)q'9b'*3
%p&c2GCL7bb<aI6=P;X@7Gh'gld;uR(ZRZ0]iDQT8gIFfFfLckcXlgD>7:3^M?FXDVG<TDT;dLZYYXLCg(ZiAro-qS@bM%5ih7tCG
%feiD+i*h49-t<A$!R[YfK!`a\,=Sc<p+#KH1lV<9"ia*o\b&l)U67ND&JdT+Wc4MB>5(?_'F%_mJP8R71Rb$Kb'Z%/LX?.O?YL&u
%Bi8fD&Q,X`K7Tq^$V"PZ,/X`>ep>))Hte"Xe?8oE4_+bU;6=4,JM9-A*]DE=Zq>5WT"@S$33l$,LrP[UDFCHamfp5PlO:1:7WmAE
%Be/mI9.cI"Ae>W_jXASQ"]$k,6s(<93<nirJM(B8)2!oBBkt/aj,A5'Go5d%*?lQU6:-Fc9sBpi)FGWnZamkA@Fb>dR1C:Z))mu:
%%29FYZ:&RHBg/*#%\IjIc-W#l+:e.D01l$nJtc>u[7X^a'jd"n6BtKCpGc4&/!-_gdDZK/MMW7ZbYV:D,-hOI=%,X$/Ef:+0S#;G
%bGk6=::G:@8*l(!EnRgO[H96kE&NrSOkMY?Xu7!!J]]lIlo%hYJ[RPd.^p,=JZ:b-BK&oJTfBJ4ZOA.MPq6rh-i:hY2`0^"/:X#2
%m\mR@oZQba;S9-e88qNgeIH!:j?,F(f&pi=858FRBeG'SBWb+]ESTX9.ZVO6-@&]\)$@1P'E7Q%Dig0p!CIr9,,\MeqG*d*+"fku
%<thr"g(NAbo&M/98g<)2.nOF&MH2L]:`pU4%Vm6JBbPL;o#O@>fbAGWda1O">$V]+G6\Z^2@pUdY/W^sAJ<+I=9j0%KBD*Rh2(^S
%%>Q-?1P=^5k@ma#_tW9*bAN+..orS[YrM#AGA?sO2D'j(CCJH=M0ZYf>#2cDTXOr.fg:%%?pe=VKp"#0EJQ\:H8ul%H5<cPppgEu
%iQ6iGO[NefOnWGRC>AoMQ=Jmj1*71N^`Y?I&Qo.n$Y6.#TfnfCO0K"9lpi#kgTG\D/\H=DDr8^)5M>g-9`KmiZ@(p`(jQeGNe`NE
%+2rsrA*E_jWN/gt\L?#YoqC'3<p&=keTf9O4>K?d9\(06mBIg^A2#*ned"\>Og0AYY!6k+N*HNj?A4LD@c4.$fXeT;f+:6e\.8Uo
%)t62p(fS9,&qM<[@qJ'RW95IQ@cu,9)JI%EZA.Hhh?%(#YWY!fU>*V@T9#*>^,15"V8$,X$fl*P2E$X7e7>AMZ>qenXN*CCpbdrj
%Wf]qp9"!q0"Y:uL$3b+Ve.=GGVum&X9hnU>&sga&(`7d[p>RtZ^:bRT<15aej3H9PF[t+-LbKe_XE?o<a[KPcY7C%`PIduQqMZR`
%6hJ_2BJ]c9D.&]`Y=.#GqNg'L,P2:mW_/2NkT-sS#\q3?[1ah/_/)iOLD:[B:@+p0ZPFt<`M2R!\^<a!':SQQ2KkL"(DLPPg0+RA
%;P`i\mE%s>?iX4_dUitm`l\GKL1o#s)Qd\T5`HJ[9q;\b7<I70e1H[e[4Z5b79XH][t5u9b(=`]3#7rdj-LHl4@D64!DsfgW<(4X
%#fdi.[tZ$/&K#>;)uJUJ5Yq@9bfd>H2ED++E`?Hub%(oIN(%mr.%rIk1GESb!U+@G#!4$q&u)L=V"-JB4Q]W>"]n^N#g5\gVcoN\
%[A+JH@2(u]^=6"`K6V;]i]7`R^72k_,-MD&G3r!<FHd*@]8+0X>\K?IV`P"?Usb38hEeCZ+Jp,?,,1"3)+n\M6t*><OsdpJOKk">
%dIf%tiummNHDqii5=bYP#TR`=#RM7@Al7r,#=J#Oa;p[n2"28GoZ`?\#'(J%:e-',l)QN$AR)!5,]:-f@F]tjH^@dZDqZZd5iPfU
%2s[-H/VNM2<7>Jm\4.$2o"3`HV]^`co.M^LJ%kdUp"O,(pbWCR`oHsPJ^#ff?7Mp!$=D?d2XdXjV;$A<ESBgOVl"liCpDa^b\Gq*
%!8KcCqp,-.j3a;eHMm8.k=Tqb@4\Y!0"2\'+@TqTS]K!XQ>X/=:H'tp/p9:3-7h*e"Y8&(LNZ5H*$S4'T"=S'hfGPCEX>rF]hkq)
%9,E*sL-JB<<okOYF0[AF59OijU.Z/;*NLfkPBW_u6[TSn<c1&[[@EkuqQ8L8^N$kRaQ^Eib`hEIZe8dWcGhYQS;]"0rh+4EqIFR_
%We"XlHE,FNRfQ2=2qbQo]RXfh@-+P7`5Cg8:uWr(>P#oN/%t/8KiKYfa&ZJ+>SH=GqcSNmqq*5X+'6&NQUg&N;gWh2eu*;*#SH?>
%r,Mq\Ar"=(0+U.q?3'IpK_O'3WJT7+OXB'jd?H0.?Ajdj`7VpY(.@CCmJe+nl)eks3Y=_s%].(JnI]X+jMT7JPXGU9-.^5S==GVn
%M?'_*6nU)(Gj0s$#o<+e^W!Ii$&YtQk7;PG[/'@c[ieH;[ic`)AOo3Nkt]\dp[M[ic[,Z&S]8#RdAT&11\!W!)iaueH_OQ]`2T<F
%W:=XWRd[k%$C+h!@%+DoPWY^IC8^b%1l@+*-NI)r#+cV[#2TP>I$&J`?WauLlS!XlnmPrGEo'``!1J+Fp\`%u7V[`UP;8)q210Wb
%%3-]12N3/c3(Z9j7j@<u7Q2s(?4kW+QoMd.(k)"Lfg[k+KA.d:iJuEpe\5ErJF?1lX>HhaQj#Z+a65#XIIWU`&nQ:JXCg7J#aJ/f
%*[&>aj.:HUbTa:$*@VdD#@_q"1(5V]SpMY,>o3TS,1%8`fWHSBV02Qbad!ca)VSUc9X4dV8&t'obBN<m7(LrPjl(YJ:-qH5cIG>L
%B"mqK]bVCpb8-jb*i3j#_)m"o'4!kRTP!.D&s;rZ"Fm%JI-S@e@>1KLE2HlVm-rt:!6Bf?FZli,S*;tCJRR"!*U+uS^DGDJ)fZeL
%Td'nkgO"Iak3jP#.jLd$lGZH,i5MVsRu*MpC&Bc,Stl,QlhPt]oimnWmNX)%`7:.,,!$r*B_D/9V.i$V6*iZYA%&AXO-a'=Vk!Je
%nE1RpqneaK?mTtq7*NNbFeh,?p9gUa4>6q&WYNdo&'dKlVr--ACXjjNf!M_\o9ah@naJU#V+BO[6j:\:"dV!ndp\TMYP5Se#!KZR
%S8(Gq&4!Qf>tbU(%&mN/7uR&XE,)Paf66rREAnHFSnUr)c8bkqM[;R\-S"Wja+]%b-^5:m8Pdr]7l`G,c3d=&m&nDC&gI2rHWpUe
%-8\N+!*Kc$X'DGc^IHjRRcCb!^+)-cH)B$L[1S[ikq%C+l@&8t^d+N]qH9@5cM'=oC'YpB(.-D!49q60!=5EN"hM_U"4N,OfJKrD
%S<^=EjspS[O`AqY+<A<B)+qen)-H[((&t`-H<]KRmkL\+piYf%6X1&\K6-.-.KZ38\UC>mN-$a"ldh]`"1&HWSJnD;/g@2YAr;^t
%$*Xb_nc7+!)UBMa3)W[LAe"h9irR.B,_,cum!H6"AJ$&A+Db5V:[cm(q99i_7*<'+:,'VP#NHZYP_"m-P)4\j]P8oVKA##1e)dlW
%>b*LLV,'R?HdaHFGs@k$+V=F67X:q-XId.Dr-iGFU:N,RN-g:"R#X"Y+#$g59V0dikg]d19.7F$d-@4\Tap?+=hQDr,>_F8`8^8:
%W3!,[m2J7(7DfBOEU(hg!%"23'ERVS.ZQkk7K>78ahueI[*XDV4E;rFPAje1AP6ffEAcMbL[k5#Q9!l2dYX6>bGUD\k#VJ3&$'5M
%Ms-e0Y74kV8@0dOC$GS+Nf6@.XYMN=Jt[Z$G6S>2qVk253Ft<lO:.TfN6!28-TGlqF^8bAF..7S:_!a]MKk)Br;fjZiXVXb<:g2/
%-lNL>"*2>`UA"l9*m$+1@>mAIR\CN>*gl(haQ+(-<bYpe[8?Ki5dhA])t"$XJWcbL0\8G]Elaa%4T+G_rKK6nAIogiN)kKVF2d>S
%ksSMk.Xe4N==7")!%Z`^paD)VKu''1#mC=>b1QBQqUGSlr04o$)$Pj'nIukLo;$>"aADA$&sZ$>U+B:FAs([/A0M4Jg`-;%#Ue&L
%)+8iZNs)am_bM`_6<jcSBS81I_$&7O6u5)=D%2#-:GD)`.prhm>V?Q6a%#ipVghaU(%U'i-+M/\+5Ak+C_:-MiW<[)1@,>gMj?FA
%h@'%9&HOAoT+S+sKEu`DP:5s,;W(Aan<jPbN.(C*BN>oX.ON<SECu3m!N`tG8e?Bo.J1Z#:tfZU16p'f7i;/qcbZQC2$S`$`Ma"N
%BYS@2n0DYBf'FbL%T65.8Eg6f\n4%<i"Fd8j:AQB!eUoK=Y[$MiqG<t`[QUtZ&>L6'$TNH(lEF`AB,I>X!*@:]gK!>n\*9JAIH!e
%4,Vr@Vs8i\S/eaV3I&?6Tf<<?E1(W_+S;'e0mP%WW<?Cs^'mdF]]eok19bZMk%VA)_riss(a(Pe+Tjn9+PR4cQUM,,)E_@Z!CO!*
%QK^:mFZPiD0tBOn%8(=U''B-:IK4!^*YKiiQeF?*b=O:q1UD^+)l9/g^bQY#Nl9FdPQ8")VpH=o8SAGSi0TQC8<jg@2m(f`fH+S`
%+T;i(]5&`M!;21<@$HZ?&tkKrquj?$@og9Tk\I'1^)PS@i=djr*+2$Yn5]>3#\66f5lf]Z2DmBoKnRYD*LROr71L%b'gljP&<eNc
%9tR<oZnL;f+G=]Rb[+Sq&_r>sN0BB5BWHF+V8n0)k"W]eLl/H=SEsd,;s'88*/58JBWsgI&OoPp^2JFbqjRHg(1VeCb&R[JO-kZi
%AH:bAO65VI%S'I2\uaNXq<6C"%adnq#T9g";J`@$nNrV%#EpUl+]SIli;%BP7?M1CjMjZ`&^)1`%DO$`#U)&6?=flA4AIN&ofV,%
%35m48.[Z.FU)_'$_QtA5:YdJRRAURR11e,AnA@!_2Z^YRRGE5_1/.=;,>s[*p_(eo$44Cg_riss35XOGgD7UtrWHj2cTeo0o4I_A
%\DA[,+=g^%P828DF/Fir$Tj<7cFV7JXaa^K(nR8B.rpd6$!n_EnW?qGSFu+bS\atj?(L-NAlK9+>#$]\fT?lfUO!GN&-0?#^W#Op
%@2.'qU.1FTN+"T?'sd*Q8/%3U("8IK8f(@I;Mi=#1K*uS$AD]pl'dIX-M.V;]"gQDKPi#.:BN3gc7gqSaA5Cj&-Khf#O\79=*nY@
%GY)^[c%BtMaLg*3f8]-1B>ftf#36Hk6F^fhp'/XVgJ,jX7/.qD5!\Ch4-m!c=>^CVRttfQYiSu@dO0^f&Q4H6$Z7NJi>K95D-kOj
%`2,k</*&2iZ#]nTW9>#T9[LR=#&9i5&<!N"7Ud@bG6hIg.Mt0IP7"<*!?\*m8=tfQ@4Yrd"9]Ve$'C$qN+YT'M<mO2*G$jX[\CrA
%[@l7c"cX?5`-5<u1+cNZ,`Su-:k19epm;)4P1feIrJlOI7O!..=Ti#Zd7tX_`>h57Cl`;#(P"a&+7j(i`G0]tRrkr,1l1)0+u!U4
%=E(8Z$$NkT'GHbd",U2boWa1mm*RBlStW(gMVr42QLYH";Y9V*?oT48L!J*LAh+/=fqEqmBb3k)%7OofH??,k<D'M_1l@QP5lfnb
%66qkrh0E<_Snl:%pK]Bp[606F%l+q2@KmRUi&,=@(k]^3<;m*]Eu'6?LIEZ!;O^k'$qsr\f@S4-Jt2upDMqu7IDb5,Dn*TcO;gsF
%ausog\U8J=30lF3],L4S24Junf@?%XWo)ummgaU6LkW%ONhLR#(1Pk#c4`GD&J<Qth\K9;"@nfa;@FlgZ'R;5j87Bjp.$N7S8rV8
%._dNXq?558Igk6gQ@:>,_K*Pj)dNEe%6uZ_,N3q52ZXWF1*itU]kBbA(U"n;1[/BUb4oC8i>-t:,dr_81?O:kM'S((^np',%mml[
%:)a3i-'BB_U8NRp9N-O&QlS.ZEd)'6F("Hu!db$XA`8'.Q"6a':8iW!m"]o+n/LF/ED841O9pFmN63FZ6sX)2-ED-GLhd*KZ6m40
%3-!Ps;EYV-2KqULMA`SmjcHSS\F5kRY8R.lhk/a3UT7mI_6!*ueP10@]$CTT*\Cd#4-K#dd:Ko#ElWA[f%[ep7n,k!iI5/S,,QM4
%-o,M$Bjdb8PWoE+1Q,.p7^*1jFaJXr2*`E2Ekd`I&%6\EYaW!>O$mLe-d?U)]4PM._2YNe)Rjj(D-C/>`g3[5M/-K))jnh"2RTsK
%D/Gm!Yi;2lqd`u6-Gd+?E+iK]gE>*kb-a8$@V#.:)b6MsS^P`RfF#J=j$4#uo"N2!Hb"A5oNdAi_FR$W,sn$A&Z)p6$bSfNHDJT'
%K04YE0`JN7P:Hd(=I3mM`;\46FJt$k8&YD5lYfN.nGAjnhD[O4,:1Cp,RfM?0Jg`[+/`L3]$[V7]p@?V-Hkc@^KOOme,HSL)fr;F
%K,N(?-!it,?jJG>kB[24!,'S)3"dJt$$#XrC;>U?&*5`Sn=,033<@WCNB&l[19EU?5d+K0)B+N[>T<>^W%CU4OW&1[<%X)aq1[\_
%OdN#9!Ghl'b68XED8[N?NIYTV5M>^A,$cgI5#G[=$BACa7qLO?-ErmWkt#)%#Lo)5C)^X6a>=K]H+a&lMZEi6(,i4,N=3UKKZVf7
%'SJhSWOc+)l9U=/g"R2C]#C?BTo/r.?3!@@K@L%7`OpCPH>cstcK\j9(hs*-@Np9m>!RX!+p_jKY0Wc,@q6\.+P3%X&l]'-]8hdH
%!B-lY#1Q"^$PLmTW\(3J_U;\raP)a`#Sj)&\jh4e8T:FEHS^d:(HnCh]M48Qm2i6XlAt8b3)ZWfi-Rt'lh8L*YmmmP@%)bb*<*s*
%ho"u-]0`0Z;o@If#TU-_PRjr'gara/&'aiIcEQ)/?c2h#N;jY,Ito4eE+3\Oaq'F!hdRXUF1sj=f;gNS9Z2nF5di#t'O^#T1^R2W
%`Z2<5,bB;Le/\^0`f!6DC^_KV.BlfB(Yt6X7'ooI"u8,Nl=5'"-RoNPU#f$ma>W'/logeT3Zq6"rbP\F2*VLI.;RZ"^c^>PAQAeu
%2Ximc(Ka<^?*gJsW&nLW\<CX'!A^JN&IBs'e,efJHdHQJ)HbU=i.D:sej74/8IE:q+GC"D@IXWhgN,&^_JUCKVZIKP^eII#/Lph:
%TSIMId5.<D"ir046h?$A:i/bKWWs)hQ_Gj0$+7JIL4UIH1_#U<d"\V@5plY3&W%0<D3;*mL;mipUEL^)8)#g.8I!T(Gdj[Z$9+R,
%P^Ik_W)jQg#RZeRLCU9S>5go_)"8"^d\Vq.+L''2FEj)]7SlI3LpTIe5_eT)UiNol1@4;kUTEriQKE+?:8mWU5RRGB2G^lN.dWR[
%'K6Ut$/0#r>"1\O1oQ+@*pR(Y<+eH7H*0[!*nSo+/_^909OUQGa[AZno"mFiQl&eRf\rf5382/i7N-%ee7.W`7_#]i4H[=T2DcZ*
%Wp4),mO#_D;Y03+Lp.R%85FA+SCVRubT6rkNGV,%OIHe1M.lTAbX76r0J.'>@!s=q+:7Zf5[T17R$Q\f@F=:VU"L:iB:4&YZXSbD
%AP<0\i,UO0D^ejlMWk,KG7,T[>Wh`l.;2AX?E:1OpRg!K<g?+nkW\:2fS`%&a+CQ#NsEu\lCg^C^uQ3BQh1Z]<hp5SbZ5p"VMV6#
%ka@W0cF;-X-L1"d`^/!7Ht!:IR\Go`MF&`>#rW$Cf6rSu&>K"OciLWIbeR&MH4$BF4#s7.7Yt+>:e1pL.0\^0EHI[_,9]?:$k8"I
%A4\s1;bU;'OFe^O0u5Q;BuFCA2WRs'W%#%E(m!h!!6JY*U(IRm7I;sQW,$3&nmG-dk6Rt0[Xn%Y):@3=6ot@(Jb1?i-d.iQB\'YO
%QGRX0L=%7D2;2+&a!3AHG)LRKlQ]J5Krl>q@H\Y<ZMU:;),R4fF[0#]_?U0/E@`KQ.0T8iLA$i>Rf18CIQFkU".;rh;e"-09^&KM
%aSP26-=oZPf=S=cgoiER)+&a6o,?S4Q(YYs$ZIH^gD*%4>b\-ojbG:Q75'd93ZEAVr9/8?oFma:EL4b9UOnfiU%1lhA<;Vlh6?/8
%>;Rq@)K'do;kmKHn"5kb^u_baZ^b>,K1f^&]9$e`Q`(NIcr5K1U?E=ZM@c;;Vg8`iOrO0C@L&)s'0Qe+GX?!1GBe)<&chg.\`e1$
%'^^s`*dmBn+a@r8d'7,Da=1u'/8%H*n-fG/>#@9C9q'O,25_reoU];$9bbW@12%tHQI:]&TIH6d"@f4o.)3/`d0BCp><2(]_1=oR
%17';mFJ]Q/=Q/piOpA;8=O#(ohdt:I:DpYD;A1L0KMcY7C')PW^Q^fFV;2>o"s*lRMJR_94Co>&#bsell\.6#aT>>!0QO'<?@og/
%!rBo`"L&7@*>OOBVNHh1%P00A@<28O]<X:h0uC`R=rNVKQ[5^l#b61;jb3.q':gX50'82Z=W+>r"UV``EpZE-+UYY2'<KCg(8UY8
%1='VkE/`D:dhF-/3@EZpI^LUF(5qDiK16^e\OfCAI_&RT<l>I2.[HJ.+q<(R2;RKQ5FI<H,R#+X2e7PoQ%hD_"\unXAZUa9<^(6T
%^s;"-AR&_K5(&ZaF.89^q0=ZV)h.X2qpXBTp)fm:'5i#P>bRU['kl^07^WWhJFlh&NBj\[Ce%Ic_S%ahi2F\iI^aRK&IT1rho0a]
%,;PG7Of3=UP_fU]dh=kOVGR%%WWQLW]Rpq=5lrrU9+2k5b6*lQ,^U%3i:*DBch$GW5>g,*KKfm4aI(_`R*pe1NB,dE'b2)CR'WA>
%huT#_F7V9@+5@:b)e=BI$ne@Kc#kc%JrSZYEesfM=Yh(=GslWbo;1Q9n=YE4bENbP.777[(^VDpo*P`tit+H[P3fZD,1<,F3"?^p
%[_AXtmD(VbG>EosT"0oDXMCW1U<!F-apfi+g?!"5C5L.eW1.+ApY\,50-\57r$F2_K**f,OrT"oecspi)E.FUbTf_]BSK1dobqn*
%Umm\7VDIeiH!LDW=u8E;/$km^;#jXn28bWdIN</PMnY+B#XuS)9J/<a>oQ#C7H:>]SJ/eN&M@"k$N2]E.<0m]9+b0iJ<I]C,_dSN
%/.cVc;4hTd,6c)PVL6pMRedkD_+S[#'a6T4gp^^fg,C>Te-7V2'T?2ZJE77Xo880-XH[012.+m;TjB2)n'mT,da/5Fr)hob)[=mE
%K=.-+7eVY&Rf%m2U=j.HDC_":Z5#++2CdjQ,aQ8KO:!.81[.6V8-01F*$[">e*NK:#3m/cBG!g@=MMKsKb\I^W?R`mZVuL6.g\ja
%*;)Z7D=F54jr>E$=W+GPJc_i%(YC$"E`tF*;%c_^Zf@p]/34/R7L!j==^HH-@)<J>2ZiKi:?.e^22\?!_VDkU+*(@XZ^lZi-ra9L
%,1)_0:ecuWH,jE,B.Q]_37Ks=N;99;7^[+T,-V(c@tY9VLH&/q$oW?C5XghefCh(B]24W4N"3q5o<Q:KVC&&:#HY`V\7&,TEa>M5
%J>ngBdY)/o$'P_N#VDRN4]K\m9APOUUHskfWJK4\VR"5J+n:jD6WY7rOM0d'l`t$Y,.cs!hGI&apAt*l!"X`QX7_`&E-jkSF'):B
%6kP-&:d"k*a+,08+D#;s&u_8`4#6Y2o:@+e1+8F(i&em=G\/IJOVN%=[.Aj&lk&mBFt^%:f4^En@:ehjNf^YX6MD7T`9f.O#,q[#
%eS;iM??iI\)QUb7WhLK#A>'alE!V.f6t/rDpu.VML@%r'*OlO,kR9XhkL\kq<$+S"rG_L==O]8T5i&aL!Ki5@h@<1qb@GRQ&YeZS
%1`ci_]ba=7"tE[f9N%1cfBM&"%KZ]Zb>+E\dbn8f27m)9k;R=i0m>d/&\maP4W1b:Y109L"bh(LX_Y3UC.g>++4M,oRB3('Ep8]R
%##_/@\CIl'M&arVF6QJW9+&fJ4je\L.'/&n35_kOXfHei3j$R=;Pt263&U'XqJ`Q4i;06U[.CmleVB.EJ''+pkldT`P7c7]F/K$X
%)_el==578W-X=*:bU:VZ^p:FoqtLd`]dd',b1>[\\u"+TQrr.Z61kCfRj>0_WbcCeB/Xk6%K(,lNk0!gH:ulI'CFZ!8%A+8Na7Z4
%hrMS*\T2h!mhT3#iBrNg?7@d69(g;:9k=s2<4C>Y)=V8gbjj6(e<;)V.`@@!&L"Rk:u)'#%,5]8a`%@.lpq-qC.`8iC9;_dN]"3:
%LnEPW=G?%OhDZYkKIWemMb"Ehp5D<X*/.Rs!_UcE2d8CmQEdfk&\IIV>,uQ9mIT^`pI">^r#dK;g>@%\m2BJGNiHu.QFDE%+;.*6
%(0b/1"nRK!^&fOGFPe?GE\q/,RE`Ot#_CM;*EH`ERuX_<_ee^>)uACq5.Z:imr\IDGHVN<n<.3<f,cfnVIQ?LN#sDq?kc;nW$OdH
%:C:)*Q?N]f$(@ERMNQ./ZWID';""f+%AC@0E`rVU!ZM`lWF_n08L-R3,iHIG1c+!27Et+r!`TM4pR!gS9b.mGQ$V@#K[HR/G\2qD
%9Xh@q9o"&4>-YGW)P^e:5/tO6bb&_b"<uI'8Y&nAMMFL,6*fc2@Q?P?^a''DkU'^:0J*ckp1+g:0]ABL-<Ue&An>JI"]1>(=*%qd
%)8QLLTZD(LOhGqW+R2@q'l&a0ViF-gTB8XLI*nTBSCV"8pld,b+;p.SLG4@?"nSic0JPg\ZTE\@Z3FUN-C,;]dkh4K^amGcadV&j
%H'b%1"&NP_B_F[SI4uUaF5K'4O][C4HD"G0iIdA_mi5]Y86\%*Wu"\7L<LFV=rZHtE3K`8X`4<8EZ(8OJ)Nn*fba#T_%+"BkU5`G
%RMu`XaR,%'m"&:rB!:knBD,lM8KBA+HMQ.XgfFGc:MasqiDq!.C6#P9"#sRR-%>BLaJ3+THMc][QS4s/o]"D^IsCtdc`b)J8Q%+g
%qX+$LIZiP,U@J,!s)@bqX"S[hmllqB?[_`Uq<iI=Ipk.q4*b03[f#bA'PmG5/8Z*`"kO'V.`7/G,qOIVOA.P?1PuqK7uJJ0qZ>lY
%1d=PWnh)C5\A0[]LC.M8+d[^iNL&%6ZE;A#W?RJbKt]WGUD>)^>17C^^dj>:>jfo0Y[=&X;8Uq#iP"JA\[t6tao1B`;JVWf*i[5l
%NEf2ucS6/ha>.&5'8_-\RWP<ScpL-j8BB?iP%G@.ag^UHUls9R<(-;AWW#b*r4]*AR-N0nM%CgbR!V!%%QUqSo3HQZmQ:maV05gn
%..s7kkr.[qFI\kmg1IVegbdVg]A92@LLThZ?PJ9;`H5K-5M)$XRpenMXs(nihsE!#B0N(GqhY;Q.fmpOL9;X+]UMnuVHZNaISiXI
%P]+;bTN7rXR+E$>eg-(-Uon<ZihUc/Iq1"4ls%u'adSchKtl&87u>a5n4Yb*an?TgZ.30n=LJ\"P_-+D4]4K-=@+sTr.mgpmKV-f
%d&h<!*hu^S0!BicXMmA`mIuU$WS437\iTi/\@LQ"N2PfddjTgHL4_'=4Jj`dEM(>"^*Oc#'UNk@6^OpD*WA#'9Bn>=9BpM%@k(Z_
%rpFh]pNN'ZHXC@p%T^L$HA,[)SVij1rltrXJl6hZ1F%jXXg,dB#D[Z4%Q'u3>Kn*/23Yn>RTYA..[+PWo+lKF_I<5qG,bU[]r!f9
%4jk]_/Z?02Oh'JUU^!qb7!B'1\nqf44%Tnua@*SkR&T&7U(4lfqHFM^J#'-Y&M<94CLP2]-U"GOR40:kl86/kP):eb,("NN9U"0&
%AKkDrcMDL6]#j08o:/OnIM#b5#4$;O70!/U^[D*uA01Qq?_>$Fr:@)*a5@G9T:06klj,/3!R>d0_oa-m)k[mW@1Z^."(%t;h("V=
%+U_%=r57H(kVXnRRWbE(6&%Y4Y0/o8H[b!u*@$$$Ksk+&TIe;;%XqTbV(!Q6KZ5?N.b/^7oK44p!.\Vm<flh'K\.:a2cmG[8JbUo
%CZ?rid;ndAP_sgbp<SW-/_ZKW44KHtcah53l86XN:Xu`\7X)C$U9u(>(2rWc9]Co"7QFC-6dp/$eDm@LN==tIITmV[#S"KQIL0J?
%flI]Qb#<ou*MRk+H9u$<MTBG3>8LmY^p))s!IC4+iT+S6d#b\(2AMo5@*c6_H^Ap%DqqK_KlQ36JGu@Mgpu_n*XA=1e%.-0[p>@3
%'dic\Zj]XT"=u7S9@$fplND]pK)q<1a$;+\_`M+4192EG\N#Ban1#9ugj_$-+WVnW%j<al</)'Z-"CsoH"!qYOCYnITsCcmbh1e2
%A,sN?ln0JJPjE1Q[]Qi3%V1?0XgtZB$qeomD$/,'`/TF<-HJ:)I1:-+?[%TQS7Y`h?DS]q&j]4G"J9?cOn2:l'=4qZjP)sm9dEuC
%"<br"7T><+<2#rTl+tU$!u3'oEqLt"cTJ]Tp1G6"R3`Ot.!u8LdQ'f-.G.fB01O.p(h&;U!/ECU)e]i:;=OT4$bHZ7/osP?WTE`@
%\*PkJH8-WZN.g9q&&]_#ag=J9()bc.eBAT>VN,=hg3AGK#)Y;o-Na`o1#[Ii`mn['!tpI2MlTlm/gEHI'j,BOY+_c/^hhtolE(a1
%jeGK:XVAY"[8uLRKWPdH%#LjBrM?J"<_c],Qq(SZHGFjTC'H<ZOg(,682Dl4!HsN/lf^#2ccCVA$Y;*C,s>@pD])aeJC1aTaZ1(V
%QuNkA[pe1?$A"=T*SIENqCh9fo(gO7L5Ai['=9eg[rRtjM?HSVKG_5*nKVUf^[0-Ck9O8F$nNf7iQJ([OPrE3_6/Sn@n&%&J?mk-
%A/3!0(q%6M]TA4:&E59V78N$`OE$@$!g5*I,65B1g%)6Bm9?"l"6A`Gh>aHJjVoEW$4jT<P@ii;h>ce>1>GQU>rUE*K2(.0G-L6l
%KN'k_H^P<GQ3IJTMot=*;S0,g>npaJp)77<7r1hKP8KjErA\?MO@q"7l#AeeVZ.]T)oikO^?#?RXiR@@,3jj5"ca+GaE-li3lJl6
%/(ui(`tqR7\XAHIH>*Xjj<NQ]dtu1M!JOREN8^$C-F@^>AM6_6M#/oR-/#BALKdbFq@__NT-VdJS[Mq>^2&;0"A<30p6KnN=&f=[
%m0[%b*4K2Cb.F__/Nka;Y[aTn*-4W]:bK_;+K\1q<ucf/'^Y/dGE_0Z"u0X72<u;sQ<=`P_aYcFd?-cU)+[1k,:KN;@>^ee(cuqD
%o>`mo]-&U<81hKp6%WMd%6,%TV6k$>jrMI%'Ho"a.^GnfI9mq4I)o3qYut8#=$(Hu(Nm;KJ5e)O(3i@5-B?A/6E_8=KW5lf'rbmn
%d:K(#)QpW:0cKPFm.agQD.=UZ[e!%7eYXT:,*_OWUpliA=lPTIDUJZC`7*\rD*%Lh]@bT2m#cE+4Y56c9ZGk(R`lse+hgo$Z>4_:
%1NJM.jQLM\XLdC>5`OVXC..Jk@!j0cq+R"Z6nGPd5%tYQ7\\rLIr\0[K1?LeYo;Qu4fPj9-Kn!cMcelEFulft<=KgHDNE@ba9q[X
%F"U-/q.R;E\F3(;&-elb?t(caVjiT`fNbPBl+]_dFf<!DAB*:WW#dosfKH=bPgeiK@H]!+U!AuR<"RS0=G8CSY_4u`)_!3FOS<cc
%_pVQCnRrZGn'LY$c!(B"\!eZdQ(d!4$?J^l%Y,fXh+G/c.QL<pka%l3SU4PMGYlT^nV2bs,%L:lJY`D]^YI>DeHRNP?U3HWd$@r#
%rH1_'DXDA\GPE;F)Kh6;c_3Ia8[Td+eUr+@-69HXVu"nHko)'b)<[RW$["@igVt[eY)ti*nR-dNoN"NiZM-f"s/KoH1401^-&b(Q
%[HdjV*oFo2.sl6?Y9e_=E[ri1N1MN/=P;lScQU445je4W:Tgo;JoDF5l&Ae>pL1]e_t=tMo6NbdeL`*eVg5IVLKQBa(t6?;QMJ')
%=6>W^G4)cg=K[37h5"jh@^]9Fg!E8)G"T!/d5V<Fr"t23ic_Yo.2,#H@$WE13#4-e13aa3"PAKgm+F'7p_NOL\!G?YhQe=1I1u5n
%TMc<96mAq=C?-)o#fSLRT\4!2B<7-E(rU]!W$u6"@"lCP9$rmfNC9(`W,oRqY"lOBOkhqLlgCn(qe^Qa?@Q0SfBV;bh70<5fD4@Q
%hinUO@`2I$=NMgJ%M>R?haFIQ>b).hLrl('\4@!O<6-5T.ReE$4(-:\oPQ8Q0d-A+8r=C@K:f)R?#,JZlH)kHk/X?=iD:WN5gWde
%#s?i\PDdgGLa7:\;'_Kg>9H?ldSo4HjCYV2eq;\2,FsBIQBnLNCdtceg7dH#N<GT".Z15R:na3'`)6g#JE/;?[3<7;gZH+=3-&7)
%A5YpO.cK[sQ:_o".B)uV;$klg/.p;SCN)D8N\UGFoq58+VQpdJJ^Cd#M&L&rlqh:%aB1c9JUT)a.:5!#81%>rn<aA7FN#^aNH)'k
%/?]2O3,*#-_RnpX::MGfn\p0saep]Ls"VQQ/crmN:,VYD8Z$&[_$!$`]@E'9N7^J<"I:TPc=JCP/i</W?jRbL$-sftdS?!`S0:'N
%!C[6V/d)h<a"gfgK.8`&&m8/%In,g)&FtLYJsqa"$:%7!R-`]aP8)bfk?VRDW6l^$O/-K'&Vq>?i<2ebBP[j^NHX?-C]`'`a4oC^
%R&@RqE;e`tS=uZW*Ct=O"iCnNXR68O_*+V8l!.4dCs9`-8XTbp)+fXn:o!Whs$7:*4#TuM]MM(1bnN..&5<DV5df(Q);>bEOd'>@
%8M2S^4UP&o@Pri6@frA@^iX+8dUbR%`V6UA"c!1rC$\NqP-&\B7UFM=,==EZ'^uAP]f*$tk'fQ>'WbDg5rLETd->KC*tTJ?bV;+P
%lCh;Jh-*"WH-6I0.UEL1YR8t!<Gl%0RObeRYBJND&"[[hX]o4VI?<Ekn!V"/[(`t$L2-HKW<9h`?l`?R&J+pVZX948XXBgN$Ppb_
%2Chc_-76FX1P4[!\uPj<Jt2u4EGO:L16ud%2",6OF(?1l&_@6X*1(JV'sYa-AC.?7jRSnm;S4augo5stUPps21CK4H`Om,aZ5jBY
%;0>p-iQr&l.TA2V'e0WLYi8J\L#g7..u.1\C5jbm8O`Fd1jN+Z@Xp#R?-]a35ZL^hR\1(\9A^<H8E3jrjNgLn:k[a4i,eFshM+;2
%,=\F)*]BlIBkfWVQ%I4d(0//,Fc05?OdQN@)?t9:1`\84[CN!0:K4PYiD`+$artHKg(>9OdU#/sQNOD%_1!tfF-ALk$djM8DVEn=
%k,GLsdPEgZ&&XuG'*e6g!-u(Gi?DZL#hZ416";T2+D)Y:U.6dGdqj@H7pkp-_g!s?j$i_L=f$?82OH"1:jBLe@,,YmH1'8Sq9<+J
%)m`^^Y\9H.LZGRpL1'!TCm`4I,6P.-Fg!2_1QWHFDFt]FIQB(S_CS<jH]u$T%2GI$;GF6O!E$%8$EiDY@j2Il'"OiRC3`U4D1GR@
%Aa"<>c;0Tke-M2R+HFT6R%8n-%TG5hBpN!,Xb^Xj-d8LnY;3Th;&JMR7P@%k[W!K$B'Zan_5J[*2(t1BL3a%Aaj!+=ZA]-"oa9QR
%Rp(ladlK',.q!lkB;cY@Aq_dJ["eb_Oqd1V&0P(Ze^+`_qbaJ16GI7I/#[*;3%>/a1[1A/bAedUK[M"2E9glr<M=^D_aGtmopA`@
%K]%s0F>5h1XY9`d2c,*tCar+G+`f&lNcsAr!T*(43F/W#H>Y;3C4cq<dH5UVmE>1j*H1P/o5J_bf#R)c;p^<D6Wc7)G9N[_qldI)
%D(mm[+LTq%pHTgNr?jI&$2\=G7-%Lt8j9CUoI_n`WQnb&(t$,(n6RTE7C5N]](5]/>kXOIO^/TS(L<5:n'pe$NSA"UY+docQ/%T"
%o./@UYY)G"\OBuUclVCgM7t8A*Yt_8/:D:r_h>G,lBDP]f'mZ)>sZCoX]+4?8!k""3RSiM/Xm0!+jMH/C5!iH97$hrR;q"Qgh1_W
%_']l5%,iCRLt9U98@7426$dJ(8RaRb?m,s;.\>Cpod#sj8IEj@V2;E=Q[2i!QD!g$G1ET4_-FEJf/<"Fj>Kl;>amlE,kg47bfR^C
%_*1md>/SIR$?H<3DaQEfacHTjF"NM\N()@+4SDbMp8Qt.&FVO<^pUhbQ75n@kG?=mNimO6/HK-6DZ_sR&<"dlRu[fJNm:DP4K$0E
%'%Orp+Bk_CJ+/;4^)1\p==XXaFc7G:c&.\l"QlEBARM37fl9LDSi_S!30.&*pB5i8+nS%kH=g,r<g/&67SSf2SbZ064[5&n^bqrZ
%iKL`*bs3G1hNNcYJhOaPr9hr&q9<,u!h/>\5rbshr^#=Mlgo>.Uh77u+$`1M"K2Kd*KIR=h/"Lt`bh1-.XN&!!^2&LQSJS*&>'Q\
%fKGTE,F"uo+8WE[eDdh'$o&;q9H[Ti!ZdoFG?]<J#+V=u9D^^:;b!6QEWUkqn*uCTYWap="'ckL_#ZYYWU5Y:BU"8]eao%&4W,l:
%)Om'nV[(r,eX!Xd'0T3Xnl'UtS]kYg[[2]1]r[Vu1R#Vi"CZHC+?\`lG`blKjj`W7<TRU(Zj`u1#^=C]OZ'ED];E%;qsXrl5roo0
%c6*TRd3=:W2=NJrSm=j?Ma's];9kJ$.WX8:U_SP>m=%n<.:Rtpnd,jtBpi,+k*+K9YV\@ISIjlmE_FStbU)Z-k2W49kseS45cBXn
%$^I&;dXG*-?Mt2>;LdIIl<)SZE01.E%(7D'od"O-;dIS=h"CU0h9G^nSG6%IhS#HTPJ7KTdQ=tojUOIoItX<%5;'-\J%0:M+.(Tr
%o[A-qj^(lLT4R@4<_X(h7mB@+.^K[oAI,P0GuQ;\l!u2T),!c<4>I:q\#nKk"&6qN''=.*9RXC)cYqYo!!>5U2JFYKWtNb=Y]"TA
%-9&Q[f2mGfD3<XM.+tl;HN!g6dr=k2mq!=S31d:]SQ'*Sf#[ZphC,;?gG#b7H]2rc80l?f\V-E`(hU^/M]Y5q/YgEb*'c-pas%$n
%I`OsBEf4mD3FUYNS9SfS52C"X_0jFAYXp1(4r=FpGY`l.rcgmG+f1DOrjK86V)-WOVuR<4l@nC0;jMcV,3W<EeW%@PB2j=37C-*Z
%'ED(GcjAp7-Mu6s6$fOAH@fP3d\T`e:fC"BiHcC<[+0UgB`+lYo;%SNJW'iHR[CqXN@4P<AW:sJ!j5MPb!p4`7KJ#R@>$sp[T=0^
%eB!?TaBQ_;oMFK/"qu+i/>5LmMa6WfA!M-1OCD&=]Kq4O6W-`r=qUH..!jpXLcVg[9]rd/qYG&6[Z()Mi(3>nm/BcIT&71da9b^P
%dtjAZ>Gn`&^MUChIuA+`>'IC9m'qBf0Xd(F^'4NCPLk,jaLu7r:H^8-YQgk_cscHu0t$nqDctG)Wsm[kQ5pP':nlfRapr`BfQqL>
%b3l<3n".4?nboXgamNc9FgpbkY_q8mL39].rI&#?b1Nt<;LYi*FuPo`>F-srGqqXr^JP<L].M(*B67ComUe7oYN:+micX1P$26/1
%RnWM._>989e$+d#=1.utm?uc"$Y*rOKo_#^To;>1>I>Juen5TN,3%E'oD8f]+%e=W7%aE9bjWR53t]BL>VV;`n%gJ3_r"bk$0P7^
%D`H^'8*WFRS%gYS5'"A-cM,.q^-\llH/sAQGb"4Jh8t)NUijNrMB'IbZk+<llCGo7rX44:9GHH?>DM^1K7:l]oV7Nh*B<9F-@=gH
%pQ6JC[b"*-*RhThm.eZq*nfD*an@n:_=<ZTrK;cmW=Z&#(mNBGpm`c5c,8e9!SW8E4X9n>.]ij'2X#SmFY@N&$KeMJBlpLnO\mPN
%RnlO:+L2j3B`rNr:ld4F-kXkY]M7e-:^ZbKKoYEu]ue!,lKP7JfCA.PcB,sTPtkoHV?K%Gs5NV?kGtdn^O:ilQa?(8Vb3XCmqm$4
%4)<B5X\Q&h#FJ[@eprPa<!eD,9#=OPd5_l*q2e^oFXB6lp?>ujr=IY>f)reAg&`=P^b#(*DG[r*7fFm<+bos>O#GC<DM-Js?#B#c
%@2Hu%@;,J$:NP4q8@'&T@au"CKrW+,Nn]10Q2-)Tda<sXSV_9>c<ju?;(`10_j@AfR&+Hsm&d:pc9GEd#1^MG(Ni`2Y`P_%-oJ94
%?m?^.7%CWc0ob#dA*WRdf1Z;)q=r9_Vr>N,pOM26RCnk$JbUY_I=)*'@W(5`bX$VdJ^5%mq5]PXhh)5_5XS#]N1ZuO-F"`4-u.7"
%;)I5-LZSbLafSTE2'X+LZe_OFI<;>-(=\A,G$c(b].a(fo%+!Uo9SLMkH7Ko+O]-lHi46'X%0S%kWa1eNCcet^ZFj0A?U2cYBQ==
%OdS)gFM_=i8%Ii._Hi5PSr_/=(_Rp9lQ^?Hpj"CT8gE?kOgk=bnQ+_/e-(Z1C7_iE'='GAL(;PZ_h-V6_W)HPeF!]oQRn;F&%9ue
%"cEd;I_6uC4L3$=RRIEkN;+7.:BuO4,E$q?(+K*.W2DE3:qtl6`K+@C;]hjW7k+#hB9=6tpRC,9*tX?XPTi=;")'&t$?J&3q6H^S
%#MW)d$gN>+Noe^>GQ2"&CY6[E"NQ,-)O),nP#WUWlNb[@"%A-M]C>u4YK0Z7Snm8H^"u?_mHg*//n+*GAogkT)g,@*+58^*hgK$t
%"UP>R0p`t.Me)?IZN[`2J64'nI@L!#,E'2:M_&jdR*cR)QQd&s>qPt2H!d7I*YeQQ=HqAkj%N:`=clsSaJG]3Z4=dU?HXHgnP_j$
%^MEi4A4H.@&UWT"+#JI@8;VCNgR6`i_HMFV*pHNEp3N@\,EKJB/q(s]:=BFgc@tc,=7NnPIJ*Qtg#&C93BInk5Q/X/+.rSrRqFC-
%$%;ZlO$>dSpO)`%eLN>akC8UYm='HSr27$-h`Tfpo]OhU"U-R(0Ds9`rTbR*gS^\AJ(%OZ!<~>
%AI9_PrivateDataEnd
